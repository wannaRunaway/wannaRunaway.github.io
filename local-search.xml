<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机-数学之美-by吴军</title>
    <link href="/2024/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA-%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E-by%E5%90%B4%E5%86%9B/"/>
    <url>/2024/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA-%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E-by%E5%90%B4%E5%86%9B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我读的是博客版本，共70页。作者在google工作期间语言分析的研究和对其他同事的观察了解，写出了这本书，读起来简单易懂，水平还可以。</p><p>中文作者常见的一大致命缺点，就是云里雾里扯东扯西，导致本来需要表达的思想被掩盖，或者很多人就没有什么思想纯粹是水文，这算是中文和外国高水平书籍的一大明显差别。</p><p>外文书籍短的启蒙读物通俗易懂，常常能引发我的兴趣；长篇书籍复杂而又细节满满，可谓经典。</p></blockquote><p>给我留下深刻印象的就是简单易用的解决方法，是组成企业级解决方案的基础。对某个方案最初立项或者构思的时候，就需要提出一些简单易用的方案，不能设计的复杂，无论是返工还是优化，后期都是折磨。</p><p>这让我想到了最近的项目，一开始设计的有问题，提交后发现这个问题会造成更大更多的问题，但没办法工期卡死了，只能硬着头皮继续改，虽然是一个很蠢的设计思路。这算是给我经验教训，当发现一个设计上的问题的时候，就应该立马修正，无论改多少代码或者耽误几天工期，否则后期越来越难维护。</p><p>本书作者使用了大量例子来说明数学在程序开发中的使用，余弦定理和新闻的分类等等，其实关于本书没什么好写的，我也只是过了一遍，抱着上班无事读点东西态度，本来没什么期待，读完发现还可以；本来也不想写什么东西，发现其实可以写点东西输出一下…</p><p>读了这些书之后，我发现我的性格确实有了改变。以前我更多是无所谓麻木心态，每天也没什么动力，纯粹为了上班和生活的压力活着。现在工作压力确实很大，但我更少的感受到压力，我不知道是因为内心的平静还是其他什么东西，每天的表达欲望很强，需要我克制自己。每时每刻想要输出些什么，让我感受到了确实还活着。</p><p>读书是因为兴趣吗，读书是为了治疗自己。</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录Hexo和git使用无法连接-443问题.md</title>
    <link href="/2024/01/22/%E8%AE%B0%E5%BD%95Hexo%E5%92%8Cgit%E4%BD%BF%E7%94%A8%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5-443%E9%97%AE%E9%A2%98/"/>
    <url>/2024/01/22/%E8%AE%B0%E5%BD%95Hexo%E5%92%8Cgit%E4%BD%BF%E7%94%A8%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5-443%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在使用Hexo上传博客文件的时候出现了一次**Git报错： Failed to connect to github.com port 443 **，解决问题方法是给git配置代理，我使用clash代理，我使用的ip和端口127.0.0.1:7890，配置如下：</p><blockquote><p><strong>git config –global http.proxy 127.0.0.1:7890</strong><br><strong>git config –global https.proxy 127.0.0.1:7890</strong></p></blockquote><p>也可以给socket5配置：</p><blockquote><p>git config –global http.proxy socks5 127.0.0.1:7890<br>git config –global https.proxy socks5 127.0.0.1:7890</p></blockquote><p>hexo的_config.yml文件deploy中Git token配置，在第一次上传hexo d时候，需要输入密码就是配置的token。</p>]]></content>
    
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2024/01/12/test/"/>
    <url>/2024/01/12/test/</url>
    
    <content type="html"><![CDATA[<p>这是一张图片</p><img src="/2024/01/12/test/test.jpeg" class="" title="图片引用方法"><p>这是图片</p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Reading-文化输出论</title>
    <link href="/2023/08/04/Reading-%E6%96%87%E5%8C%96%E8%BE%93%E5%87%BA%E8%AE%BA/"/>
    <url>/2023/08/04/Reading-%E6%96%87%E5%8C%96%E8%BE%93%E5%87%BA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>不知道从什么时候开始，墙内的粉红们非常执着于一个词：文化输出</p><p>他们无论是看电影、听音乐、玩游戏，哪怕是创作一个meme，搞一个短视频，都非常执着于所谓的文化输出。</p><p>外国人喜欢这个中国人创作的短视频，这是文化输出</p><p>外国人喜欢李子柒的长视频，也是文化输出</p><p>外国人喜欢原神，更是文化输出…</p><p>对于墙内的群体而言，如果外国人喜欢，那自然是文化输出，是民族自豪，连带自己也是要粘上几分光的。</p><p>但是另外一方面，墙内日益加剧的民粹主义情绪又让这些民众对于文化题材抱有非常严苛的目光，并希望这些文化产品一定是“中国文化”，必须得有“文化自信”，电影里面出现类似“民主自由”、LGBT、公正法制这些的要素是需要万分谨慎，甚至是不可容忍的。</p><p>比如我们审视最近出现的这些电影，大火的“消失的她”是一部贩卖性别对立和焦虑的，迎合时下流行的东南亚噶腰子传闻的庸俗之作。</p><p>追光的”长安三万里”又是一堆梦回盛世大唐的电影作品中的一个，其核心主旨依然是迎合中国人心中所谓天朝盛世、梦回大唐的幻想。</p><p>开心麻花的作品则是一贯的工业垃圾水平，没有任何讨论的必要。</p><p>而封神这部作品，也是打着所谓的“中国电影里程碑”，“中国划时代的作品”的旗号，堂而皇之的拍出一部水平平庸的渣作。</p><p>对于这些所谓的中国电影工业的作品，他们要吗对于现实持回避态度，要吗放弃对于现实和未来的观察，退回到过去，为现在的观众编织一场过去的美梦。</p><p>由于缺少对于现实社会思考的探究和思考，这些编织出来的美梦也只是美梦本身，出了依靠民族主义来唤醒观众的认同外，他们无法真正的感染和引起公众的思考。</p><p>在严格的文化管制下，不但是电影，音乐产业的退化则更加让人瞠目。</p><p>这些年来，涉及到音乐的综艺节目堪称琳琅满目，但是主流的音乐节目则是彻底的走向了保守和退步，他们用最好的灯光和舞台，却尽数唱着过去的歌曲，纵然有部分乐队和音乐人仍保持着一定的创造活力，但是整个保守的社会氛围下，他们的活力反而显得格格不入。</p><p>当然，墙内的粉红们也能感受到文化的压制和退步，他们不敢于反抗，甚至夸张点来讲，他们在民粹主义的驱动下，甚至维护政府的文化管制，并一遍一遍的洗脑自己，国外的电影和音乐也不行了。</p><p>并且他们坚信：他们这些充溢着盛世美梦和民族主义的作品，一定能让其他国家认同自己。</p><p>一方面妄自尊大，不想要尊重别国的文化和传统，却又渴望得到别的国家的人民的认同。</p><p>一方面脆弱自卑，沉浸于某种过去虚幻的盛世辉煌，在文化上面保守退步，却想要引领世界。</p><p>说实话，每每看到这些言论，真实让人觉得荒谬可笑</p>]]></content>
    
    
    
    <tags>
      
      <tag>Reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>心理学-梦的解析·弗洛伊德</title>
    <link href="/2023/06/29/%E5%BF%83%E7%90%86%E5%AD%A6%C2%B7%E6%A2%A6%E7%9A%84%E8%A7%A3%E6%9E%90-%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7/"/>
    <url>/2023/06/29/%E5%BF%83%E7%90%86%E5%AD%A6%C2%B7%E6%A2%A6%E7%9A%84%E8%A7%A3%E6%9E%90-%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="一九零零年以前"><a href="#一九零零年以前" class="headerlink" title="一九零零年以前"></a>一九零零年以前</h1><p>古代人类将梦看待成神明意志，或者某种先见等等。一直到现在，对于梦的解析一直没有系统的说法。亚里士多德将梦称为人精神的延续，也就是人当前精神状态就会产生各种梦，也有现实情况会影响梦中的事实存在。所以产生了困惑，亚里士多德之前的人将梦称为神谕，在这之后的哲学家将其看为人当前精神的延续。</p><h1 id="梦的解析方法"><a href="#梦的解析方法" class="headerlink" title="梦的解析方法"></a>梦的解析方法</h1>]]></content>
    
    
    
    <tags>
      
      <tag>心理学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用clash加速同一局域网下其他设备x</title>
    <link href="/2023/02/13/%E4%BD%BF%E7%94%A8clash%E5%8A%A0%E9%80%9F%E5%90%8C%E4%B8%80%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%8B%E5%85%B6%E4%BB%96%E8%AE%BE%E5%A4%87/"/>
    <url>/2023/02/13/%E4%BD%BF%E7%94%A8clash%E5%8A%A0%E9%80%9F%E5%90%8C%E4%B8%80%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%8B%E5%85%B6%E4%BB%96%E8%AE%BE%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<p>使用clashx加速同一局域网下其他设备。</p><p>1、打开clash的 allow LAN</p><p>2、获取本机局域网ip</p><p>3、clash控制台看到端口</p><p>4、客户端代理手动，输入主机名和代理端口</p><p>5、客户端成功上网</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>学会提问--批判性思维指南</title>
    <link href="/2023/01/13/%E5%BF%83%E7%90%86%E5%AD%A6-%E5%AD%A6%E4%BC%9A%E6%8F%90%E9%97%AE-%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E7%BB%B4%E6%8C%87%E5%8D%97/"/>
    <url>/2023/01/13/%E5%BF%83%E7%90%86%E5%AD%A6-%E5%AD%A6%E4%BC%9A%E6%8F%90%E9%97%AE-%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E7%BB%B4%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="提出正确问题的益处"><a href="#提出正确问题的益处" class="headerlink" title="提出正确问题的益处"></a>提出正确问题的益处</h1><p>两种思维习惯，海绵式和淘金式。海绵式将所获取到的知识信息统统记下来，导致自己是一个空白的人，脑子里只有别人的观点。淘金式是一种更加主动的思维方式，在获取信息中，时刻提出问题观察观点，这种更加主动的思维方式让我有了自己的看法。</p><p>对于任何事情，提出问题是更加主动的做法，这至少表明了我在思考、倾听和归纳，我充分尊重每件事情。</p><p>批判性思维分为弱强，弱批判性思维是对别人的观点、社会事件，发生在我之外的事件批判性思考。强批判性思维是对自己已有的观点进行思考，注意自己已有的观点很多是来自家庭、文化、习俗等等，大多经不起推敲，所以当他人说了一个与自己价值观完全相反的观点时，不要着急抵制反对，运用自己强批判性思维对自己观点进行思考，很多人无法摆脱谎言洗脑，就是因为完全无法运用批判性思维。很多人固执、刻板、僵硬其原因也就是缺乏批判性思维罢。</p><h1 id="什么是论题，什么是结论"><a href="#什么是论题，什么是结论" class="headerlink" title="什么是论题，什么是结论"></a>什么是论题，什么是结论</h1><p>论题分为两种，描述性论题和说明性论题，描述性论题是针对过去、现在、将来的描述是否正确提出的问题；说明性论题就是我应当怎样做、对与错、好与坏提出的问题。所以在评价某人观点之前，先要找出论题和结论。结论很好找出，他会在话里话外明里暗里不断重申或者暗示他的结论，论题则是他讨论某个事情。要找出论题和结论，在进行联系，最后进行评价。</p><h1 id="理由是什么"><a href="#理由是什么" class="headerlink" title="理由是什么"></a>理由是什么</h1><p>我们找到了论题和结论后，就要对他结论正确性进行思考，他提出的理由就是说明结论的重要依据。而我们思考时，要用一种开放的心态进行，否则就会本能的回到旧思维习惯中。理由就是结论的说明，也是我们是否接受这个结论的重要依据。</p><p>实际中，由多个理由支撑某个结论，而多个结论又组成最后的结论，所以在处理复杂的结论时，最好画出思维导图，对每个理由和结论的逻辑进行分析，而得出是否接受。</p><h1 id="哪些词句有歧义"><a href="#哪些词句有歧义" class="headerlink" title="哪些词句有歧义"></a>哪些词句有歧义</h1><p>一旦确定作者观点，必须确定其推理过程中的关键词语和句子，发现作者是否明确定义了关键词语或者句子，如果他没有这样做且使用另一个定义改变了观点的理解，那这就是歧义词句。</p><h1 id="什么是价值观冲突-什么是价值观假设"><a href="#什么是价值观冲突-什么是价值观假设" class="headerlink" title="什么是价值观冲突 什么是价值观假设"></a>什么是价值观冲突 什么是价值观假设</h1><p>一段文字中我们确定了论题、结论和理由，还要看到作者隐含的价值观，而多数价值观中作者偏爱的那个超过了其他价值观，这就是价值观假设。</p><p>价值观冲突很明显，个人自由和集体主义冲突等等，人们在特定论题上价值观有很大冲突。但注意特定论题下的价值观，不同论题下人们价值观会有偏向导致改变。</p><h1 id="什么是描述性假设"><a href="#什么是描述性假设" class="headerlink" title="什么是描述性假设"></a>什么是描述性假设</h1>]]></content>
    
    
    
    <tags>
      
      <tag>心理学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你的诞生只是某种偶然</title>
    <link href="/2022/11/16/Reading-%E4%BD%A0%E7%9A%84%E8%AF%9E%E7%94%9F%E5%8F%AA%E6%98%AF%E6%9F%90%E7%A7%8D%E5%81%B6%E7%84%B6/"/>
    <url>/2022/11/16/Reading-%E4%BD%A0%E7%9A%84%E8%AF%9E%E7%94%9F%E5%8F%AA%E6%98%AF%E6%9F%90%E7%A7%8D%E5%81%B6%E7%84%B6/</url>
    
    <content type="html"><![CDATA[<p>你在这个国家的诞生只是某种偶然，当你战胜了数十亿竞争者，又没有被街道计生办扼杀在母亲的腹中才得以呱呱落地一一十几年或几十年后，在午夜时分深思的你不禁想到，这究竟是一种幸运还是残酷的咒诅?</p><p>你的父亲与母亲都双双忙于工作，当你刚刚走出摇篮没有多久，他们就迫不及待地将你送进了托儿所或幼儿园一一他们在那里可以短暂地将为人父母的责任负担交给某个并不熟识的中年妇女，此刻你对他们而言仿佛如同一种负担。你为他们的无情迷惑了很久:为什么当他们把你交到某个“阿姨”手中后就那样绝情地离开，他们是不是就如此要抛弃你?那时你绝望地嚎啕大哭，哭的满脸赤红。</p><p>你上的是一所平平无奇的小学，所受的折磨也是平平无奇:那个身材肥胖的中年女教师，手拿板尺，好像邻居养的那条凶神恶煞的大狗在教室里不住地徘徊，你生怕被她狠狠咬上一口一一一个汉字的笔画歪斜了?一首古诗的词句被记错了?“啪!”，火辣辣的痛霎时点燃了你的手心，吃痛的你不禁要缩回手掌，可老师并不乐意，她把戒尺威胁般地举得更高:“伸出手来，还有四下!”在放学后，当同学快活地奔出校门，你还徘徊在走廊背着:“天安门在那天成为了欢乐的海洋…”，可是你不时望向被夕阳映照的天空，心中不明白背这样的课文意义何在，或者，这样的生活意义何在一一过早来临的苦难向你逼问这个沉重的问题。</p><p>升_上初中后，你还是觉着小学的生活更加安逸一一你的父母通过艰难的关系打点最终将你送入了这所重点初中(是的，在这个想象力贫乏的国家中，几乎什么人与事物都要分出重点与非重点)，你不得不承受某些无谓的竞争:周考，月考以及期中期末考一一可以说你的学校生活无非是等待考试与进行考试。可是你对于这段时间的回忆，更为鲜明的则是关于同班的那个面貌可爱的女孩，虽然时至今日她的面貌早已模糊，但是她带给你的那份最初幸福的体验却从未消磨一一然而班主任眼镜后的目光却早早地将一切看透,在一次谈话后她泪水涟涟走出办公室，在此之后她甚至再也不同你说一句话。一一多年以后，你的外国朋友们在餐桌上激动地讨论着自己的初恋与在公园中的青涩初吻，你苦笑，此时你的视线中仿佛又再次浮现了她的模糊轮廓…</p><p>无论高中学校在宣传册中如何渲染自身的种种特点，但是这不过是好听的骗局一一你这三年生命中所最应尽的义务仍是做题，你将自己的精神与目光都浸淫在漫漫题海:三角函数，物理公式以及如何以一种特有的八股文体去大谈我们实际不曾拥有的精神。某个冬天，你走出封闭的大门准备开始寒假，却觉着眼前的大街相当陌生，然而并不是由于隔离太久，只是你近视了一一你发现自己连三十步外的招牌都看不清楚,可是你没有办法，你趁着短短的一周寒假配上一副眼镜，然后回到学校这座围城中继续将自己按入汹汹其势的题海。</p><p>一场决定你未来生活命运的考试结束了，很短，几乎只有两天一一然而你却花费了整整12年光阴去为它做准备。有人滥情地说，这是一种生活的考验，是一种命数中的成长;甚至还有人更为滥情地说，一个人如果没有在他的生命中经历一场这样的考试，那么他的生活则无意义一一你只觉着他们可笑。最终父母还是为你做了决定，你( 更应说他们)选了计算机。</p><p>大学既像卡夫卡笔下的”Das SchloB”，又如钱钟书笔下无形的围城，让人捉摸不透，在其中有千般生存法一一然而刚刚被解放的你选择的是最为安逸的一种,你整日安眠高卧，整日不起，跌跌撞撞地度过了第一学期，可是在新年时分，不及格的通知比起返乡的火车来的还快一一然而父母却不愿再去训诫些什么，他们并不知道你在大学过一种怎样的日 子，他们佝偻的腰身在你身前显得滑稽地矮小(当你回忆以往与他们的冲突，再望见他们的今时形象，似乎那些回忆不过是幻觉)。然而你还是决定去投身恒久不变的做题事业一一不过这次你是自愿如此。</p><p>你毕业了，以平凡的成绩毕业;你找到工作了;一个负担颇重的工作;你衰老了，以平凡姿态逐渐衰老。在工作不断的重压之下，身体暗暗发出警告意味的呻吟:你的头发成百上千地掉落，你感到腰上与颈椎似乎挂了铅，你觉着似乎自己睡整整一月还是 困顿不堪，可是你忽视了，业绩与上司的青眼是你所关心的。很快地，某次加班后，你在医院的病床上醒来,医生给你一份报告，说明着你的健康如何摇摇欲坠。</p><p>你决定出国，你决定逃离。可是未知的忧虑还是紧紧地抓捏着你的心:你不知道未来前景如何，你不知道自己年近而立还要去读硕士是否年龄太大，这些因素摇摆着你的决意一一可是当你同诸多公司的人事谈论了自己的情况后，你的决意却又愈发坚定一一你还是发了申请，买了机票，办了签证与护照。</p><p>当飞机起飞，同地面逐渐遥远，建筑与人都化作大地上不可见的蚂蚁时，你似乎如同开悟似地去审视过去在这片土地上的自身经历与苦难一一你望向碧蓝天空深处一朵似房子般的宽大白云时，你感到仍然猜不透其中意义。</p><p>十年之后，你和一帮金发碧眼的同事应另一位年轻同事的邀请来到捷克度假，那是一个小而美，盛产哲学家与作家的思想国度。那个来自布拉格的姑娘，尤其热情，尽着地主之谊向你们介绍这座城市，她的故乡的种种逸闻一一你偷偷窥着她年轻富活力的面庞,不由深深羡慕起她对自己国家的那种自豪态度一一你想，自己也整整十年没有回到中国了。</p><p>在中午，你们一行人悠哉游哉地步行到了旧城广场，来自整个世界的游客都在遮阳伞下快活地畅饮冰咖啡，你望见在广场的一角摆放着不少红色底色的告示牌，你走向前，发现上面有着那张举世闻名的青年挡在坦克前的照片，旁边用着颇为蹩脚的英语与捷克语写着几十年前发生在中国某场学生运动的事实一一这时，你的一个年轻好事的青年同事走上前，也望了一眼公告牌，随即转头问向你:“怎么，这是发生在您国家的事情吗?”，你怔了怔，却释然的笑了:“那并不是我的国家，我都离开很久了。”，说着你转头走向在露天咖啡馆旁演奏小提琴的街头乐手，准备为他投出几欧分的硬币一一看他那副通红的脸孔，显然上午已经在这太阳下晒很久了。</p><p>一阵风飒然地吹过，引得在广场中央闲庭信步的鸽子一下扑翼而起一一这是布拉格一个美丽且平常的夏日。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Reading 为什么移民</title>
    <link href="/2022/10/29/Reading-%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A7%BB%E6%B0%91/"/>
    <url>/2022/10/29/Reading-%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A7%BB%E6%B0%91/</url>
    
    <content type="html"><![CDATA[<p>作者：刘易杰<br>链接：<a href="https://www.zhihu.com/question/36019799/answer/69947510">https://www.zhihu.com/question/36019799/answer/69947510</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>我就先假设题主真的是不知道，这个国家曾经发生了什么，也不知道这个国家刚刚发生了什么，同样，也不知道这个国家每时每刻正在发生什么吧。这个假设成立的可能性是很大的。<br>可你让我，怎么跟你说呢？<br>实话实说吧？很快你就看不到了。<br>我不能提及我想要提的事件来举例，不能提到我想要提的名字来论证，不然就被删了，好像之前我说的许多实话那样。<br>即便是我一直实名，我愿意为我说的每一句话负法律责任——即便是那些我认为是恶法的法律。然并卵。这个国家境内的每一个网站，都会因为“违反相关法律法规”，删除掉我要说的话。搞笑的事儿是，他们从来不告诉我，我究竟违反了哪条“相关法律法规”。<br>单就这一份禁言所带来的屈辱和憋气，就足够让一个像我一样对真相和实话有洁癖的人，撕护照移民了。<br>我之前的一个朋友，一个美国留学的女孩子。参与了一个组织，因为那些你懂的原因，我就不说什么组织了——反正2009年的7月，这个组织已经被取缔了，原因是“偷税漏税”，我估计他们实在是找不到什么别的理由了。这个女孩子从锁骨到胸口，有一片很大的烫伤疤痕，猩红一片，盖过了半个乳房（别闹，我没看过，我发誓）。组织被取缔的时候，她被请去喝茶，被一杯开水劈头洒下，留下了这个跟着她一辈子的疤。<br>还有一个老大哥，在国内作生意，主要是搞农膜，后来有钱了，投资文化产业，搞得也是风生水起的。他们老家那儿，有一批参加过越战的老兵，过得都比较惨淡，他跟我说过其中一个的故事——当年在战场上踩了地雷，炸断了一条腿。回国之后呢，开始是当着英雄对待，那时候宣传的也是狠，有一个年轻姑娘也是一时脑热，嫁给了他。本来是挺好的故事，后来因为生了二胎，违反了计划生育政策，搞得英雄的待遇和指标给吊销了，结果没了经济来源，生活一下跌落了谷底，后来媳妇儿也跑了，当年的英雄，以下子成了落魄户，再后来频繁的上访，又沦为了政府的“维稳”对象。<br>我的这个老大哥，每年过年的时候，总不忘请乡亲们吃席酒宴。之后也会给这些困难户门，塞个三万五万的。由于他的“资助”，这些老兵不至于断了炊，还能继续的“上访”。直道有一天，收到了“传话”，让他别再给钱了，不然他的企业就会“出问题”。<br>老大哥在已经移民了，自己拿的是美国护照，比弗利山庄有套院子内有高球场的别墅，老婆孩子是新加坡护照。每次他来新加坡，我们把酒言欢，有一次他跟我说，那些没出过国的中国人老是觉得，自己出了国，会被歧视，当二等公民，多么屈辱，其实出了国之后才发现，哪有什么屈辱和歧视。退一万步，就算人家外国人歧视我一辈子，也比不上我在国内所受的屈辱。<br>之前我写了一篇文章，题目叫《他在想什么》，最开始的时候写在校内网，后来发到了知乎的专栏，因为这篇文章，我在知乎的专栏被关停了。文章里面我提到，我很想认识一下那些，在网上删我文章的人，我很想知道，在删我的文章的时候，他们在想什么……<br>后来，机缘巧合，我还真的认识了某一个网站负责运营的朋友——姑且称他为朋友吧。当然不是知乎啊。有一次我跟他聊天，他说刘易杰你得理解我们啊，我也觉得你写的有道理，我也知道你说的是真话，可是有规定啊，有些内容不能碰，我不删也有别人去删啊，我也不能拿我工作叫板老板啊。所以，希望你理解。<br>我很理解他。虽然我一直觉得“言论自由”是宪法赋予我的权利。可在他生活的那个国家，为了他的工作，为了他的衣食温饱，他可以践踏宪法赋予我的权利。他并不孤独，在这个国家，太多人为了自己的利益，践踏着正义和公正。<br>为什么说这个故事，我的一位老师——扣下题，一位移民新加坡近二十年的前辈，二十年前的祖国有什么故事，你们自己回忆——对曾经慷慨歌燕市，不负少年头的我说过一番话：你千万不要对这个国家的人们抱有太高的同情，他们自身所承受的屈辱和苦难，多是他们应得的。<br>“爱国”情怀仿佛已经由教育和宣传，刻入了我们每个人的骨子里，虚构出来的“国家”的抽象概念，让我们都忘记了，我们本身爱的是什么。你爱国，你想要爱的“国家”，实际上并不存在，存在的只是组成这个国家的十三亿人。你爱他们，想要他们活得更好，更安全，因为“有国才有家”，因为你以为“国家强大了，家人才能更幸福”，直到有一天你会发现原来因为你做的那些想让这个国家的其他人更幸福更安全更有尊严的事，会让你和你的家庭，最先失去尊严和安全。<br>这十三亿人本没有什么共同利益，他们的利益甚至是冲突和矛盾的。他们当中的绝大多数人都是为了自己的利益来挣扎。就好像开始提到的那个姑娘，和泼她一身热水的人，好像我的那位老大哥，那个一条腿的老兵，和那些威胁“你的公司会出事”的人，和我，和那个为了自己的工作删我贴的人，这些人的利益，不会因为我们同拿一个国家的护照，就统一了的。<br>知乎之前有一个问题，说韩寒是不是已经丧失了以往的犀利。作为一个十几年的韩粉，我觉得韩寒停止对一些社会性话题发声，是从有女儿开始的。当一个男人升级成父亲之后，他生活的中心就变了。以我对这个社会底线的衡量，让更多人听到实话的爱国，是要以自己和家人的安全为代价的。韩寒的犀利，他说的那些引起共鸣的真话，刺痛神经的犀利，对这个国家来说，是你们消费不起的奢侈品。<br>题主以为所谓的“从自身做起”，“去改善那些不好”，是一件轻而易举的选择，当站在你面前的是一群为了维护自身的利益，毫无底线不择手段的人的时候，他们会为了维护自己的既得利益而不惜刺穿所有你珍惜的人和事的时候，你究竟会有多坚强，还能坚持下去。<br>无论从哪个角度讲，这些移民的人，做出的抉择都是对的。他们知道太多的真相，而这个国家的繁华和稳定确必须建立在一片无知之上。<br>所以就让他们走吧，让留下的人遗忘过往，好像那些曾经的血都没流过一样。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Reading-布鲁克林没有膨胀</title>
    <link href="/2022/10/25/Reading-%E5%B8%83%E9%B2%81%E5%85%8B%E6%9E%97%E6%B2%A1%E6%9C%89%E8%86%A8%E8%83%80/"/>
    <url>/2022/10/25/Reading-%E5%B8%83%E9%B2%81%E5%85%8B%E6%9E%97%E6%B2%A1%E6%9C%89%E8%86%A8%E8%83%80/</url>
    
    <content type="html"><![CDATA[<h1 id="布鲁克林没有膨胀"><a href="#布鲁克林没有膨胀" class="headerlink" title="布鲁克林没有膨胀"></a>布鲁克林没有膨胀</h1><p><img src="https://www.redditstatic.com/desktop2x/img/renderTimingPixel.png" alt="img"></p><p>　　“二战”期间，美国纽约布鲁克林区，一个郁郁寡欢的男孩被他的妈妈带去看心理医生，他的妈妈说：“他最近情绪很低落，突如其来地，他不想做任何事情。”<br>　　“你为什么会情绪低落呢，艾尔维？”医生问男孩。<br>　　“宇宙正在膨胀，宇宙代表着世间万物，如果它正在膨胀，那么总有一天，它会四分五裂的，那将会是世界末日。”<br>　　“那和你有什么关系？”妈妈一边对艾尔维大声吼着，一边向医生抱怨，“他为此不再做作业了！”<br>　　艾尔维瓮声瓮气地说：“还有什么意义可言呢？”<br>　　“宇宙和作业有什么关系啊？”妈妈的声音从怒吼变成了尖叫，“你现在是在布鲁克林，布鲁克林没有膨胀！”<br>　　好吧，我承认这不是真实的故事，而是伍迪·艾伦《安妮·霍尔》中的一个桥段。伍迪·艾伦不是我最爱的导演，《安妮·霍尔》也不是我最中意的电影，但是这些丝毫不妨碍我把这部片子翻来覆去看了许多遍，而且每回看到这段对话时我都会放声大笑。<br>　　妈妈的话当然是对的，宇宙和作业连半毛钱的关系都没有。就像一个无限遥远的目标不是目标，而是一个欺骗；一个无限遥远的理由不是理由，而是一个借口。<br>　　艾尔维应该去写作业，因为艾尔维在布鲁克林，布鲁克林没有膨胀，布鲁克林也没有被轰炸。<br>　　1940年9月7日，德国空军第2航空队出动1000架次飞机空袭伦敦，长达10个月的不列颠战役就此拉开序幕。据统计，这期间伦敦被轰炸超过76个昼夜，逾4.3万名市民死亡，约10万幢房屋被摧毁。有时候，我忍不住替艾尔维惋惜，因为和宇宙在膨胀相比，德国人的炸弹显然是一个更好的理由。当然，问题在于，没有谁会为了不写作业而选择德军的炸弹，问题还在于，当死亡的威胁真的近在咫尺时，人们也许才会认识到人生的意义恰恰就在于读书写字这些看似微不足道的事情上。<br>　　比方说那张著名的《在废墟中读书》的老照片：在德军炸弹刚刚“问候”过的图书馆里，硝烟仍未散去，遍地都是瓦砾和断梁，3位头戴礼帽的伦敦市民安静地伫立在尚未倾圮的书架前，浑然忘我地凝神寻找书籍。我实在想象不出还有什么画面能比这张照片更好地阐释了人类文明和尊严的“败而不溃”。<br>　　昨天，我读到这么一段话：<br>　　“清晨，塞林格登上奥马哈海滩，他的背包里装着写了6个章节的未完成小说《麦田里的守望者》。下午，伊夫林·沃因在伞兵训练中因腿部受伤而在德文郡养伤，在那里，他完成了小说《旧地重游》的最后一章。”<br>　　这个场景让我想起在“一战”前线顶着协约国炮火埋头撰写《逻辑哲学论》的维特根斯坦；想起在战火纷飞的波黑，某间地下室里一遍一遍挥动球拍的德约科维奇；想起2000年在英国一家二手书店重见天日的那张“二战”旧海报：Keep Calm and Carry On（保持冷静，继续前行）。据史学家考证，这份海报印于1939年春天，为了迎接必将到来的对德战争，英国政府印刷了3款海报用来鼓舞士气，其他两款在战争初期被广泛印发，唯独这一款虽然印了250万份，却始终没有派上用场，原因是英国本土没有沦陷，而英国政府原定在本土沦陷之后才发放它。就这样，这张海报被尘封了整整61年。2013年8月17日的《经济学人》评论说，这个标语极为准确地反映了英国人自我期许的人格形象：“不事声张的勇敢，稍许的刻板，以及在轰炸中照常煮茶的镇定自若。”<br>　　这应该就是古希腊人和古罗马人心向往之的“德性”吧。<br>　　在《理想国》中，柏拉图借苏格拉底之口问道：“如果正义就是强者的利益，如果不正义的人比正义的人生活得更好，那么人们为什么还要去做一个正义的人？”我始终相信，黑暗的力量不足以控制生活的所有方面，哪怕是在一个普遍不正义的时代，仍有足够的行动空间让个体去承担生活的责任以及政治的责任，对此我们没有任何推诿的理由或借口。<br>　　自我感动是件让人生厌的事情，我很清楚“在废墟中读书”以及“Keep Calm and Carry On”一不留神就会跌入“刻奇”（讨好自己，迎合自己）的陷阱。维特根斯坦说，哪怕你意识到生活在根本上的不安全，意识到根基随时会垮掉，也“决不可因此戏剧化，对此你必须提防”。<br>　　宇宙正在膨胀，世界末日终有一天会来临，但是在此之前，请让我们牢记，布鲁克林没有膨胀。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Thinking in Java</title>
    <link href="/2022/06/04/Java-Thinking%20in%20Java/"/>
    <url>/2022/06/04/Java-Thinking%20in%20Java/</url>
    
    <content type="html"><![CDATA[<blockquote><p>重读Thinking in Java这本书，之前读过但没有坚持下去，这次必须要完整重读一遍了。</p><p>除去最后java界面组件开发，一共766页。</p></blockquote><h1 id="对象导论"><a href="#对象导论" class="headerlink" title="对象导论"></a>对象导论</h1><p>问题空间–解空间，面向对象编程只关心对象和他们之间的消息。java单继承，多态就是父类对象方法可以使用子类对象调用，向上转型是安全的，向下不安全，因为父类可以有多个子类，子类只有一个父类。</p><h1 id="一切都是对象"><a href="#一切都是对象" class="headerlink" title="一切都是对象"></a>一切都是对象</h1><p>java内存5个分区：</p><p>1、寄存器，在处理器里面。</p><p>2、堆栈，在ram中，对象引用就存储在这里。基本类型如int等就存储在这里。</p><p>3、堆，ram中，存储对象。</p><p>4、常量，存储在程序中。</p><p>5、非ram存储，比如持久化存储之类的文件，在磁盘中。</p><p>static静态，类方法和类成员可以被对象调用，与类调用相同，内存也是同一块。</p><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><p>++i是先运算再得出值，i++是先得出值再运算。基本类型运算会自动往大的数据类型转换，窄化数据要注意数据可能丢失。</p><h1 id="控制执行流程"><a href="#控制执行流程" class="headerlink" title="控制执行流程"></a>控制执行流程</h1><p>If else、while、do while、for、return、break</p><p>break退出循环，continue跳过这个循环执行下一次循环。</p><h1 id="初始化与清理"><a href="#初始化与清理" class="headerlink" title="初始化与清理"></a>初始化与清理</h1><blockquote><p>非常重要的一章</p></blockquote><p>java使用默认构造器确保初始化，方法重载就是相同方法名称不同参数，对象调用时会自动识别调用的方法。重写是子类对父类方法的重写。this关键字就是调用这个方法的对象。</p><p>Finalize()是对对象的标记，让gc下次运行时回收堆内存。</p><p>垃圾回收器如何工作？垃圾回收器回收对象时候是搜寻所有对象看他们是否在使用中，也就是引用是否为空，空就回收。2中回收方法，标记清除就是每次找到活的堆内存就标记，在gc的时候把那些不标记的直接清除，还有停止复制，把堆内对象复制到另一块区域，这样整理内存，保持新堆紧密排列。</p><blockquote><p>类加载时候的初始化</p></blockquote><p>类加载发生在类静态成员被使用或创建对象的时候。初始化先初始化静态成员且只初始化一次，然后是非静态成员，如果是对象创建就会到构造器初始化。注意java是动态加载语言，方法只有到执行到了才会执行。</p><p>可变参数列表，放进去数组可以是多个，枚举和switch case使用。</p><h1 id="访问权限控制"><a href="#访问权限控制" class="headerlink" title="访问权限控制"></a>访问权限控制</h1><p>import导入，package包，说明当前文件在哪个包下面。</p><p>private私有外部无法访问，protected继承访问权限，默认包访问权限，public全局访问权限。</p><p>访问权限2个好处：</p><blockquote><p>给外部提供部分，控制他们可以使用的方法，不暴露内部方法给他们。</p></blockquote><blockquote><p>让类库使用者更加简单的修改内部代码，使接口和实现分离开来。</p></blockquote><h1 id="复用类"><a href="#复用类" class="headerlink" title="复用类"></a>复用类</h1><blockquote><p>复用类两种方式，继承和组合。在实际开发中多用组合，会让程序更加灵活，继承使用的是基类的接口。</p></blockquote><p>初始化基类：在导出类加载时，程序会往上寻找积累并进行类加载。加载顺序：基类static数据并只初始化一次，然后非static数据，导出类static数据并只初始化一次，然后非static数据。基类构造器初始化，导出类构造器初始化。</p><p>finally通常使用在try catch中，用来最后清理数据之类的。</p><p>protected使用在数据和方法中，导出类可以继承使用他。</p><p>向上转型，父类的引用指向子类的对象，因为导出类算是父类的一种。</p><p>final数据不可修改，方法无法重写，类无法被继承。</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态意味着不同的形式，我们持有的从基类中继承来的相同接口，以及使用该接口的不同形式。</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>抽象类，含有抽象方法的类就是抽象类，继承该类需要重写抽象方法。</p><p>接口就是用来类之间的通信，变相实现多继承的方式。</p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>内部类默认持有外部类对象，静态内部类可看作静态方法，匿名内部类相当于创建实现接口的类。</p><p><em>需要重读。</em></p><h1 id="持有对象"><a href="#持有对象" class="headerlink" title="持有对象"></a>持有对象</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-实现一个栈</title>
    <link href="/2022/05/16/Leetcode-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%A0%88/"/>
    <url>/2022/05/16/Leetcode-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>请你实现一个栈。</p><p>操作：</p><p>push x：将 加x入栈，保证 x 为 int 型整数。</p><p>pop：输出栈顶，并让栈顶出栈</p><p>top：输出栈顶，栈顶不出栈</p><h3 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h3><p>第一行为一个正整数 n ，代表操作次数。(1≤<em>n</em>≤100000)</p><p>接下来的 n ，每行为一个字符串，代表一个操作。保证操作是题目描述中三种中的一种。</p><h3 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h3><p>如果操作为push，则不输出任何东西。</p><p>如果为另外两种，若栈为空，则输出 “error“</p><p>否则按对应操作输出。</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-number">6</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">pop</span><br><span class="hljs-literal">top</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">3</span><br><span class="hljs-keyword">pop</span><br></code></pre></td></tr></table></figure><p>复制</p><p>输出：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">1<br><span class="hljs-keyword">error</span><br><span class="hljs-keyword"></span>3<br></code></pre></td></tr></table></figure><blockquote><p>分析</p></blockquote><p><strong>1、第一行是操作台操作的次数，执行的操作到n次数为止；</strong></p><p><strong>2、输出2种情况，pop输出栈顶并出栈，top输出栈顶不出栈;</strong></p><p><strong>3、pop和top输出，栈不为空输出正常值，栈为空则输出error;</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>认知心理学-无从选择为何多即是少BY巴里·施瓦茨</title>
    <link href="/2022/04/17/%E5%BF%83%E7%90%86%E5%AD%A6-%E6%97%A0%E4%BB%8E%E9%80%89%E6%8B%A9%E4%B8%BA%E4%BD%95%E5%A4%9A%E5%8D%B3%E6%98%AF%E5%B0%91-BY%E5%B7%B4%E9%87%8C%C2%B7%E6%96%BD%E7%93%A6%E8%8C%A8/"/>
    <url>/2022/04/17/%E5%BF%83%E7%90%86%E5%AD%A6-%E6%97%A0%E4%BB%8E%E9%80%89%E6%8B%A9%E4%B8%BA%E4%BD%95%E5%A4%9A%E5%8D%B3%E6%98%AF%E5%B0%91-BY%E5%B7%B4%E9%87%8C%C2%B7%E6%96%BD%E7%93%A6%E8%8C%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="当我们选择的时候"><a href="#当我们选择的时候" class="headerlink" title="当我们选择的时候"></a>当我们选择的时候</h1><h2 id="购物的真实体验"><a href="#购物的真实体验" class="headerlink" title="购物的真实体验"></a>购物的真实体验</h2><p>从超市商品选择到大学教育科目选择，在生活中选择越来越多，这是多样化提现。实验中，6种口味饼干购买率高于30种，这是选择过多导致的问题吗？电视节目、服装是不是少点选择会更好呢？</p><h2 id="新领域的选择"><a href="#新领域的选择" class="headerlink" title="新领域的选择"></a>新领域的选择</h2><p>美国人用电公司的选择、保险的选择、医生选择等等，美国社会中的选择越来越多，这会花费人更多的精力去了解。但很多时候会让人沮丧，如医生给患者的选择，很多患者并不想要这种选择，这种责任转嫁太沉重。</p><p>生活的选择是无时无刻的，比如早上起来洗漱、刮胡子、选择衣服等，当然也可以不这样干，如周末的时候就可以休息下。所以适当的不选择会让人感到舒适。</p><h1 id="我们如何选择"><a href="#我们如何选择" class="headerlink" title="我们如何选择"></a>我们如何选择</h1><h2 id="选择与决定"><a href="#选择与决定" class="headerlink" title="选择与决定"></a>选择与决定</h2><p>损失心态比得到心态效果强烈，比如买电脑带400块耳机和自己购买耳机，多数人会选择第一种，损失的心态效果更强烈。人的损失得到心态不是45度斜线，而是曲线，越多则感觉越小，这就是赌徒越来越上头的原因，俗称输麻了。</p><p><strong>信息的可用性</strong>，一台车世面好评如潮，而你的朋友买了后经常给你抱怨这车的问题，大多数人是不会选择这系列车的。这就是印象暗示推论法，人们总是对某一类信息过分看重的倾向，熟悉的经常发生的事情总会让人们更加有倾向。</p><p><strong>从选择者变成采摘人</strong>。选择者清楚的知道生活中什么对他是主要的，以及所做决定的眼前利益和长远后果，并为创造选项而去创造机会。采摘人生活犹如电视影像匆匆而过，能抓住什么就抓住什么并希望他是最好的。</p><h2 id="只有最好的才行吗"><a href="#只有最好的才行吗" class="headerlink" title="只有最好的才行吗"></a>只有最好的才行吗</h2><p>尽取者和满足者区别，尽取者想要了解每个选择再做出决定，满足者心里有个标准某个选择达到就立刻做出决定。尽取者花费大量时间并且不可能了解每个选择情况下会感到痛苦，在物质越充足选择越多的情况下时常发生。在我选择过程中，不要当一个尽取者，这种看似智慧的做法会让人陷入痛苦之中，如同当下既要清零又要经济发展，弱智的如同小学生一样的政策，可以看出所谓光荣正确伟大是有多么脑残。若是相同的选择机会我可以理解，可有人要在两个相悖的选择中只能取其一情况下，还要两个都要，无法形容。</p><p>满足者选择时，只要达到心中的标准就会立马做出选择。这种满足感、幸福感就是我追求的。</p><h1 id="我们为何感到痛苦"><a href="#我们为何感到痛苦" class="headerlink" title="我们为何感到痛苦"></a>我们为何感到痛苦</h1><h2 id="选择与快乐"><a href="#选择与快乐" class="headerlink" title="选择与快乐"></a>选择与快乐</h2><p>自由和自主是选择的前提，没有自由自主就无从选择。选择也可以看出人的表达方式，我穿绿色衣物或者戴一顶华丽帽子可以体现出我个性。财富多的人比少的人更快乐，但达到某个零界点，财富再增加和快乐感关联更少，现代人快乐大多来自于社会的亲密关系，如亲人、朋友、爱人等等。在我维护这些关系时要付出大量时间精力也要遵循团体的要求，这失去了一些自由和选择，但会让我更快乐。</p><h2 id="错过的机会"><a href="#错过的机会" class="headerlink" title="错过的机会"></a>错过的机会</h2><p>机会成本、让步与剧增的选项。机会成本：选择某个选项，失去了次好的选择。大多数人会将其他所有的选项视为机会成本让自己痛苦不堪，这是错误的，机会成本只是失去了次好的选择，很多人无法区分最好选择、次好选择，陷入了自我痛苦中，这样即便做出选择，满足感大大减少了。</p><p>让步：多个选择机会，比较优缺点做出选择。可我在生活中，不想失去每个机会优点，经常陷入既要…又要的妄想中，难以做出让步。这样就算做出了最中选择，满足感少了很多。</p><p>剧增的选项：一个简单的问题却有多个选择，常常让人痛苦不堪。在于每个选项的了解是非常花费时间精力的，而我又恰好是个尽取者的话，这就太痛苦了。</p><h2 id="但愿···就好，后悔的问题"><a href="#但愿···就好，后悔的问题" class="headerlink" title="但愿···就好，后悔的问题"></a>但愿···就好，后悔的问题</h2><p>决定性后悔和预期后悔，决定性后悔是做出了某个选择但是后期发现问题产生的后悔，预期后悔是没做出决定之前就产生了后悔。决定性后悔是正常的，但预期后悔可能就要我审视下自己了。后悔本身来自于自我责任感，在某件事中责任越重，发生问题时也就越后悔。当然这很好理解，某个团体中，责任越重，满足感也就越强，做出的选择出现问题也就越后悔。</p><p>后悔的是一种负面情感，但可以让我做选择之前更加谨慎仔细，后悔感在选择中非常重要。</p><h2 id="决定为何让人失望：习惯的问题"><a href="#决定为何让人失望：习惯的问题" class="headerlink" title="决定为何让人失望：习惯的问题"></a>决定为何让人失望：习惯的问题</h2><p>我的满足感幸福感随着习惯会慢慢消失，原因是因为当初的选择对我的影响逐渐减小，我对满足感幸福感阀值提升了，这是人类基本的心理。在选择中，一开始对人的幸福感时最好的，慢慢的由于习惯自我幸福阀值升高，这种满足感就慢慢消失了。在决定为何让人失望中，习惯是个很大的问题。</p><p>能做些什么？选择时不要做个尽取者，不要增加选择成本，生活中时常保持感恩，懂得习惯对选择的影响，发生一些失望的决定时，尽可能多思考总结，多读书。</p><p>这也是我现在做的，说实话读书很难受痛苦，我要忍着很多诱惑还要一边读书一边写感受。读书输入、大脑思考、记忆总结、输出感受，每一步都很痛苦，但这没办法。我深刻的认识到要改变自己、想清楚某些让我无法原谅的事情、摆脱痛苦感，就要读很多书。</p><p>如何克服读书时的痛苦，就像这章节说的，让他成为习惯，让读书成为生活的一部分。习惯了之后就会继续下去，这也是我想要的。</p><h2 id="为什么凡事皆因比较而痛苦"><a href="#为什么凡事皆因比较而痛苦" class="headerlink" title="为什么凡事皆因比较而痛苦"></a>为什么凡事皆因比较而痛苦</h2><p>在我的社会身份中，就像在大海中鱼儿一样，尽管我是鲨鱼，比起鲸鱼还是弱小，所以只要是比较那总有办法承认自己是一个失败者。关键在于划分区域，我认定我在哪个区域就在那片水域中呆着就好。最好、足够好、很好这些评价都是比较而言，若我是尽取者，面对比较的选择去了解那每个都让我头晕目眩，满足者在心中有一个标准，达到这个标准就好。</p><p>比较是痛苦的，特别在现今互联网上轻易看到富人的生活，自卑不甘痛苦是正常的情绪。正确理解找到自己的水域这是很重要的，也就是说我想成为什么人，那些人过着什么日子，他们如何努力、如何工作，向往就奋斗，不想那就干脆躺平，幸福感满足感是人生第一要务。</p><h2 id="谁之过：选择、失望还是抑郁"><a href="#谁之过：选择、失望还是抑郁" class="headerlink" title="谁之过：选择、失望还是抑郁"></a>谁之过：选择、失望还是抑郁</h2><p>选择的增多、机会成本增加、对自我提升期望过高、对让步的厌恶 、习惯效应、后悔、自我埋冤、与社会比较、尽取。这些心理过程造成了感到选择是累赘而不是恩赐。</p><p>现代社会追求的个人自由个人主义，导致发生了问题时就会把原因归结在自己身上，例如减肥减不下去，个人就不会去想基因问题等等，而是比较他人对自己更加失望。面试接连失败就会想到自己是不是不够好，导致渐渐没了信心。种种心理作用下导致抑郁。这就是选择的增加、对自我高度期望导致失望，再到最后抑郁。</p><h1 id="我们可以做些什么"><a href="#我们可以做些什么" class="headerlink" title="我们可以做些什么"></a>我们可以做些什么</h1><h2 id="对于选择应该做些什么"><a href="#对于选择应该做些什么" class="headerlink" title="对于选择应该做些什么"></a>对于选择应该做些什么</h2><h3 id="1、决定自己的选择"><a href="#1、决定自己的选择" class="headerlink" title="1、决定自己的选择"></a>1、决定自己的选择</h3><p>选择有负面特性，随着选择的增多会升级，所以要会放弃一些选择。可以根据最近的生活给自己加一些自我限制，看看有什么变化。</p><h3 id="2、做个选择者，别当捡拾者"><a href="#2、做个选择者，别当捡拾者" class="headerlink" title="2、做个选择者，别当捡拾者"></a>2、做个选择者，别当捡拾者</h3><p>不能在众多选项里疲于奔命，要知道什么决定是重要的，什么选择应该是放弃的，要根基自己喜好、习惯、规范和准则自然的做出决定。</p><h3 id="3、多一些满足、少一点尽取"><a href="#3、多一些满足、少一点尽取" class="headerlink" title="3、多一些满足、少一点尽取"></a>3、多一些满足、少一点尽取</h3><p>尽取者是痛苦的，想得到最好是耗费精力的，我要成为一个满足者，制定一套明确的够好标准，了解自己和关心的事情，这就够了。</p><h3 id="4、想象机会成本的成本"><a href="#4、想象机会成本的成本" class="headerlink" title="4、想象机会成本的成本"></a>4、想象机会成本的成本</h3><p>多个选择之间对比是正确的，但选择之后不要想着要是…就怎样之类的，想想当下的选择为自己带来了哪些便利。</p><h3 id="5、让你的决定变得不可逆转"><a href="#5、让你的决定变得不可逆转" class="headerlink" title="5、让你的决定变得不可逆转"></a>5、让你的决定变得不可逆转</h3><p>可以试着让自己的决定变得不可逆转，就像是婚姻一样，无可避免的会遇到更好的人，但我已经做出了选择且无可避免。</p><h3 id="6、采取感恩的心态"><a href="#6、采取感恩的心态" class="headerlink" title="6、采取感恩的心态"></a>6、采取感恩的心态</h3><p>每天记录下最让自己心存感激的事情，慢慢的发现自己感激的事情越多，对生活也就越满意。</p><h3 id="7、少一点后悔"><a href="#7、少一点后悔" class="headerlink" title="7、少一点后悔"></a>7、少一点后悔</h3><p>想一下生活是有多么复杂，凭借着一个决定奇迹般的改变生活是多么渺茫。所以不要为了某个决定后悔终生，因为没那个决定生活也没多大变化，自己尝试改变自己都很艰难，不是吗？</p><h3 id="8、降低习惯的效应"><a href="#8、降低习惯的效应" class="headerlink" title="8、降低习惯的效应"></a>8、降低习惯的效应</h3><p>学会在快感弱化时仍然感到满足，可以减轻习惯效应出现时的失望。采取满足者的策略，减少为决定所花的时间和精力，减少习惯效应带来的失望和苦恼。</p><h3 id="9-控制期望值"><a href="#9-控制期望值" class="headerlink" title="9.控制期望值"></a>9.控制期望值</h3><p>减少所考虑的选项的数量，做个满足者而不是尽取者，使意外的惊喜成为可能。</p><h3 id="10-减少社会比较"><a href="#10-减少社会比较" class="headerlink" title="10.减少社会比较"></a>10.减少社会比较</h3><p>痛苦来于社会中的比较，不是吗？无论怎样比较都会有比你更好活的更幸福的人，我无法对他人的幸福视而不见，对自己的痛苦不充满怨气。但这种比较是没有任何意义只会给自己带来痛苦的，关注让自己快乐，让我生命充满意义的事。</p><h3 id="11-学会自我限制"><a href="#11-学会自我限制" class="headerlink" title="11.学会自我限制"></a>11.学会自我限制</h3><p>对自己自我限制，限制中的选择，约束中的自由，带来满足感幸福感。</p>]]></content>
    
    
    
    <tags>
      
      <tag>认知心理学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora-快捷键大全mac</title>
    <link href="/2022/03/08/Typora-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8mac/"/>
    <url>/2022/03/08/Typora-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8mac/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这是typora快捷键大全，基于macos系统。</p></blockquote><p><a href="">https://juejin.cn/post/6960861656494637086</a></p><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>新行</td><td>shift+enter</td></tr><tr><td>标题</td><td>command+1…6</td></tr><tr><td>段落</td><td>command+0</td></tr><tr><td>表</td><td>Command option t</td></tr><tr><td>代码块</td><td>Command option c</td></tr><tr><td>数学块</td><td>Command option b</td></tr><tr><td>引用</td><td>Command option q</td></tr><tr><td>有序列表</td><td>command option o</td></tr><tr><td>无序列表</td><td>command option u</td></tr><tr><td>加粗</td><td>command b</td></tr><tr><td>重点</td><td>command i</td></tr><tr><td>下划线</td><td>Command u</td></tr><tr><td>超链接</td><td>Command k</td></tr><tr><td>图片</td><td>command control i</td></tr><tr><td>切换侧边栏</td><td>command shift l</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-多线程基础</title>
    <link href="/2022/03/08/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/03/08/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p>一个进程包括多个线程，进程包括由操作系统分配出来的内存空间，线程不能独立存在，必须存在进程之上。一个进程一直运行，知道所有的非守护线程结束运行后才停止。</p></blockquote><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><h2 id="1、新建状态"><a href="#1、新建状态" class="headerlink" title="1、新建状态"></a>1、新建状态</h2><p>使用了new关键字和thread或其子类建立一个线程后，就处于新建状态；</p><h2 id="2、就绪状态"><a href="#2、就绪状态" class="headerlink" title="2、就绪状态"></a>2、就绪状态</h2><p>start之后线程进入了就绪状态。进入了就绪队列中，等待jvm线程调度器的调用。</p><h2 id="3、运行状态"><a href="#3、运行状态" class="headerlink" title="3、运行状态"></a>3、运行状态</h2><p>就绪状态的线程获取到了cpu资源，就可以执行run，此时，它可以变为阻塞、就绪、死亡状态。</p><h2 id="4、阻塞状态"><a href="#4、阻塞状态" class="headerlink" title="4、阻塞状态"></a>4、阻塞状态</h2><p>线程执行了sleep、suspend等方法，失去了cpu资源，该线程就从运行状态进入阻塞状态。在睡眠时间已到或者获取到了资源后就可以重新进入就绪状态，三种：</p><p>1、等待阻塞，线程执行wait方法；</p><p>2、同步阻塞，线程获取synchronized同步锁失败；</p><p>3、其他阻塞，线程通过sleep()或者join()发出io请求时，线程就会进入阻塞状态，sleep()超时，join()等待线程终止或超时，线程重新进入就绪状态；</p><h1 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h1><p>线程优先级是一个整数，在1…10之间，Thread.MIN_PRIORITY—Thread.MAX_PRIORITY，默认情况下，每一个线程分配一个优先级 NORM_PRIORITY&#x3D;5</p><h1 id="创建线程的3种方式"><a href="#创建线程的3种方式" class="headerlink" title="创建线程的3种方式"></a>创建线程的3种方式</h1><h2 id="1、实现runnable接口创建线程"><a href="#1、实现runnable接口创建线程" class="headerlink" title="1、实现runnable接口创建线程"></a>1、实现runnable接口创建线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunnalbeThreadType</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Thread thread;<br>    <span class="hljs-keyword">private</span> String threadName;<br>    RunnalbeThreadType(String threadName)&#123;<br>        <span class="hljs-built_in">this</span>.threadName = threadName;<br>        System.out.println(threadName+<span class="hljs-string">&quot; creating&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;start running&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(i+<span class="hljs-string">&quot; is cycling&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;starting&quot;</span>);<br>        <span class="hljs-keyword">if</span> (thread == <span class="hljs-literal">null</span>)&#123;<br>            thread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">this</span>, threadName);<br>            thread.start();<br>        &#125;<br>    &#125;<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">runnalbeThreadType</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RunnalbeThreadType</span>(RunnalbeThreadType.class.getCanonicalName());<br>        runnalbeThreadType.start();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="2、继承thread类创建线程"><a href="#2、继承thread类创建线程" class="headerlink" title="2、继承thread类创建线程"></a>2、继承thread类创建线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Thread thread;<br>    <span class="hljs-keyword">private</span> String threadName;<br>    ExtendThread(String threadName)&#123;<br>        <span class="hljs-built_in">this</span>.threadName = threadName;<br>        System.out.println(<span class="hljs-string">&quot;creating&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.run();<br>        System.out.println(<span class="hljs-string">&quot;running&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(i+<span class="hljs-string">&quot; cycling&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;starting&quot;</span>);<br>        <span class="hljs-keyword">if</span> (thread == <span class="hljs-literal">null</span>)&#123;<br>            thread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">this</span>, threadName);<br>            thread.start();<br>        &#125;<br>    &#125;<br>&#125;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExtendThread</span>(ExtendThread.class.getName());<br>        thread.start();<br></code></pre></td></tr></table></figure><h1 id="Join-使用"><a href="#Join-使用" class="headerlink" title="Join()使用"></a>Join()使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBase</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-comment">//        var runnalbeThreadType = new RunnalbeThreadType(RunnalbeThreadType.class.getCanonicalName());</span><br><span class="hljs-comment">//        runnalbeThreadType.start();</span><br><span class="hljs-comment">//        var extendThread = new ExtendThread(ExtendThread.class.getName());</span><br><span class="hljs-comment">//        extendThread.start();</span><br>        <span class="hljs-type">var</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">3000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(Thread.currentThread()+<span class="hljs-string">&quot;starting&quot;</span>);<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;start...&quot;</span>);<br>        thread.start();<br>        thread.join();<br>        System.out.println(<span class="hljs-string">&quot;end...&quot;</span>);<br>    &#125;<br>&#125;<br><br>start...<br>Thread[Thread-<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,main]starting<br>end...<br></code></pre></td></tr></table></figure><p>Thread.join挂起当前线程，等待线程执行完毕。</p><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><h2 id="1、多线程本身不同步的问题"><a href="#1、多线程本身不同步的问题" class="headerlink" title="1、多线程本身不同步的问题"></a>1、多线程本身不同步的问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> threadbase;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadAdd</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    Thread thread;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            Counter.count = Counter.count + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-built_in">this</span>.getClass().getName() + <span class="hljs-string">&quot; &quot;</span> + Counter.count);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (thread == <span class="hljs-literal">null</span>) &#123;<br>            thread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">this</span>);<br>            thread.start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDec</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    Thread thread;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            Counter.count = Counter.count - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-built_in">this</span>.getClass().getName() + <span class="hljs-string">&quot; &quot;</span> + Counter.count);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (thread == <span class="hljs-literal">null</span>) &#123;<br>            thread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">this</span>);<br>            thread.start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Threadsynchronize</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">threadAdd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadAdd</span>();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">threaddec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadDec</span>();<br>        threadAdd.start();<br>        threaddec.start();<br>        threadAdd.thread.join();<br>        threaddec.thread.join();<br>        System.out.println(<span class="hljs-string">&quot;final result is &quot;</span>+Counter.count);<br>    &#125;<br>&#125;<br><br>outputs: <br><span class="hljs-keyword">final</span> result is -<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>多线程模式下，要保证逻辑正确，对共享变量必须进行原子化操作：即某一个线程执行时，其他线程等待。</p><h2 id="2、synchronized锁"><a href="#2、synchronized锁" class="headerlink" title="2、synchronized锁"></a>2、synchronized锁</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> threadbase;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Counter</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Counter</span>();<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadAdd</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    Thread thread;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Counter.counter) &#123;<br>                Counter.count = Counter.count + <span class="hljs-number">1</span>;<br>            &#125;<br>            System.out.println(<span class="hljs-built_in">this</span>.getClass().getName() + <span class="hljs-string">&quot; &quot;</span> + Counter.count);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (thread == <span class="hljs-literal">null</span>) &#123;<br>            thread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">this</span>);<br>            thread.start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDec</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    Thread thread;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Counter.counter) &#123;<br>                Counter.count = Counter.count - <span class="hljs-number">1</span>;<br>            &#125;<br>            System.out.println(<span class="hljs-built_in">this</span>.getClass().getName() + <span class="hljs-string">&quot; &quot;</span> + Counter.count);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (thread == <span class="hljs-literal">null</span>) &#123;<br>            thread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">this</span>);<br>            thread.start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Threadsynchronize</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">threadAdd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadAdd</span>();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">threaddec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadDec</span>();<br>        threadAdd.start();<br>        threaddec.start();<br>        threadAdd.thread.join();<br>        threaddec.thread.join();<br>        System.out.println(<span class="hljs-string">&quot;final result is &quot;</span>+Counter.count);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">final</span> result is <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><p>synchronized锁保证了只能有一个线程某段时间在执行，获取锁要用同一个对象才有效，但是synchronized问题是性能下降，1是加锁释放锁需要消耗资源，2是代码块无法并发执行。</p><p>synchronized锁加在方法上就是同步代码块，synchronized方法加锁对象就是this，静态方法就是同步锁加到类上面去。</p><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><h2 id="1、可重入锁"><a href="#1、可重入锁" class="headerlink" title="1、可重入锁"></a>1、可重入锁</h2><p>jvm允许同一个线程重复获取同一个锁，能被一个线程重复获取的锁，就叫做可重入锁。</p><p>每次获取一次锁，就+1；退出synchronized代码块就-1。减到0的时候，才会释放锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 可重入锁</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RepeatBolck</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span>&#123;<br>        count = count+number;<br>        System.out.println(<span class="hljs-string">&quot;add &quot;</span>+count);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">des</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span>&#123;<br>        count = count - number;<br>        System.out.println(<span class="hljs-string">&quot;des &quot;</span>+count);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainBolck</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-type">RepeatBolck</span> <span class="hljs-variable">repeatBolck</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RepeatBolck</span>();<br>            repeatBolck.add(<span class="hljs-number">10</span>);<br>            repeatBolck.des(<span class="hljs-number">2</span>);<br>            System.out.println(<span class="hljs-string">&quot;result &quot;</span>+repeatBolck.count);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、死锁"><a href="#2、死锁" class="headerlink" title="2、死锁"></a>2、死锁</h2><p>获取多个锁的时候，不同线程获取不同锁对象可能导致死锁，例如下面代码：</p><p>Thread1.oneblock()获取到了deadblock1,再去获取deadblock2;</p><p>Thread2.secondblock()获取到了deadblock2,再去获取deadblock1;</p><p>这样可能会导致thread1得到了deadblock1等待获取deadblock2;</p><p>thread2得到了deadblock2等待获取deadblock1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> threadbase;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadBolck</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">DeadBolck</span> <span class="hljs-variable">deadBolck1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadBolck</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">DeadBolck</span> <span class="hljs-variable">deadBolck2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadBolck</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onebolck</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (deadBolck1)&#123;<br>            count = count + <span class="hljs-number">10</span>;<br>            System.out.println(<span class="hljs-string">&quot;oneblock1 &quot;</span>+count);<br>            <span class="hljs-keyword">synchronized</span> (deadBolck2)&#123;<br>                count = count + <span class="hljs-number">10</span>;<br>                System.out.println(<span class="hljs-string">&quot;oneblock2 &quot;</span>+count);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">secondblock</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (deadBolck2)&#123;<br>            count = count - <span class="hljs-number">20</span>;<br>            System.out.println(<span class="hljs-string">&quot;secondblock1 &quot;</span>+count);<br>            <span class="hljs-keyword">synchronized</span> (deadBolck1)&#123;<br>                count = count -<span class="hljs-number">20</span>;<br>                System.out.println(<span class="hljs-string">&quot;secondblock2 &quot;</span>+count);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainRun</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-type">DeadBolck</span> <span class="hljs-variable">deadBolck</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadBolck</span>();<br>            <span class="hljs-type">var</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(deadBolck::onebolck);<br>            <span class="hljs-type">var</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(deadBolck::secondblock);<br>            thread1.start();<br>            thread2.start();<br>            thread1.join();<br>            thread2.join();<br>            System.out.println(<span class="hljs-string">&quot;main end&quot;</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>死锁发生后，只能强制结束jvm进程。</p><p>避免死锁：获取锁的顺序要一致。</p><p><strong>总结：</strong><br><strong>java的synchronized是可重入锁</strong><br><strong>死锁发生的条件是多线程持有不同的锁，并试图获取对方已持有的锁，导致互相等待。</strong></p><p><strong>避免死锁的方法：多线程获取锁顺序要保持一致性。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Reading-教育</title>
    <link href="/2022/02/18/Reading-%E8%B6%A3%E9%97%BB%E6%95%85%E4%BA%8B/"/>
    <url>/2022/02/18/Reading-%E8%B6%A3%E9%97%BB%E6%95%85%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<p>西洛特是苏州一所私立学校的外教，在中国呆了八年，他从德国过来，原本是抱着对中国神奇文化的向往和对中国人的质朴过来的，遗憾的是，年前他还是回国了。</p><p>为了给他送行，我们一行来到周庄廊上人家，这是他最喜欢的一家餐馆，铺子不大，但环境优美。席间，自然免不了谈论一些对教育的看法和离开的原因。他说他真的不愿意离开，他不想接受这种失败，带着挫败感回国是一件影响一生的事情，但他不得不回去，在他看来，他这一辈子也无法在中国看到真正的教育，他为中国的未来深深担忧。</p><p>他说，看到孩子每天5点多到校，晚上6点多离校，家长每天都很疲惫，老师更是疲惫，这种连大人都吃不消的教学模式竟然没谁改变，看到孩子们每天无精打采，每天在应付着，他心里很痛。德国的孩子都是快乐的，每天9:30-下午3:30，没有所谓的家庭作业，可这并没有丝毫影响他们的创造，他们长大后做的不比中国毕业生逊色，很多方面甚至很出色。</p><p>他多次跟校长提议，少上课，多让孩子娱乐，这样可以提高学生学习知识的兴趣，开发心智。校长很无奈，大家都在比分数，比成绩，一旦名落孙山，学校就要倒闭。那时候老师们不仅失业，学生们还要到很远的地方就读，还是继续延续这种披星戴月的学习生活。</p><p>他说，他把同样的一份英文试卷给学生做，考试时平均80多分，考试结束一周后，平均也只有70分。可见大多数学生的学习目标都是很短暂的，他们就像跨栏竞赛者，在咬牙越过眼前的跨栏，最优秀的也只不过是越过最后一道后然后身心疲惫到瘫痪，如果你再让他重新翻越，恐怕连一个都跨不过去。事实上，真正的教育，是受教育者完成学业后，走向工作后，才开始真正的跨栏。</p><p>他看到4岁的孩子背诵拼音，5岁的孩子做加减法时，他心都碎了。在德国，8岁的孩子只会播种、栽花、除草什么的，会简单的拆卸玩具，根本就不知道1+1&#x3D;2。但是他们18岁后的能力，远比中国28岁的人能力强大。</p><p>他说，他教的中学英语尽管在苏州分数很高，但从毕业后的学生回馈看，几乎没有哪个学生用得着。不仅是英语，其他学科也是如此，缺乏起码的实用价值。大多数学生毕业后，往往都要从零开始学习。</p><p>除了以上压制教育、无效教育外，西洛特还谈了中国的预防教育。他说，中国这个国家最初的教育动机就把所有孩子想象成即将变坏的一个人，从幼儿园就灌输一些不切实际的理论和思想。不停地灌输爱国、爱党教育，就是没有人性关怀的教育。</p><p>这些政治教育对几岁甚至十几岁的孩子来说，简直是天书，就连很多政治老师都搞不懂。这些教育的功能仅仅是为了应付试卷上的标准答案，除此别无用处。真正的人性教育、逻辑教育是空白的。人性是人格的基础，缺乏人性认识的人，肯定缺乏人格。他拿什么爱自己？爱家人？爱社会？更谈不上再爱其他。所以，当下中国糜乱也就不足为奇了。爱，是一种成长感受，不是靠说教获取的，这是基本原理。这种认识西方700多年前就已经认同，而有着五千年文明的中国却仿佛停留在原始社会。</p><p>除了预防外，贯穿中国教育思想的还有仇恨。据我所知，欧洲和美国从没有哪个学校给学生灌输仇恨，他们更不敢灌输，这在大多数国家是犯罪行为。在欧洲和美洲，人们强调的是反对而不是仇恨，仇恨在西方思想里是魔鬼的特征。比如你们与日本之间关于钓鱼岛的争执，在我们看来，这与仇恨无关，用证据谈判即可解决的事情，非得仇恨。我们与法国领土战争大小不下30次，尽管是战争，但没有仇恨，战争结束后，双方还是公平谈判。就像现在欧洲各国、犹太人，不仇视我们，他们只是反对法西斯暴行。</p><p>整个西方的教学思想是建立在爱的基础上的诚信、敬畏教育。没来中国前，我很难想象一个十多亿的大国，从小接受的是仇恨教育。马克思尽管与我是老乡，但我知道的，我家乡的人，没谁认为他说的是正确的，因为德国和其他欧洲国家一样，允许不同声音，马克思的声音只不过是成千上万种声音中的一个，而这种声音目前几乎不存在。而在中国人的逻辑词典里，只要能说出来的，就是真理，正因为这种对西方的误会，大多数中国人到现在还以为马克思说的很有市场，其实不然。这就是不同的认识偏差造成的错误理解。在我经验看来，中国人爱的西方人不多，马克思、恩格斯、白求恩，其他的呢？而我们从小爱很多人，父母、家人、社会上所有的人，当然还有上帝。</p><p>中国教育失败的另一个证明还体现在安全教育方面。很多学校实行无缝对接管理，从学生进校门到出校门，每一分每一秒都有老师看着，下一个老师不到，上一个老师不能离开，就像看管羊圈一样。放学时，离学校不足50米的地方是密密麻麻的家长及形形色色的车辆，孩子到家后又是圈养在房间里做作业、吃饭、睡觉，这个循环过程一般持续15年之久，刚来中国时，小学二三年级以下的孩子有家长接送，现在就连中学生也要接送。孩子终究要离开学校离开家庭，终究要独立生活，到那时怎么办？</p><p>中国教育是把人最珍贵的年华付之毫无意义、毫无发展价值的学习内容上，而不舍得花费一点点时间去讨论和思考。记忆成了学习的唯一方法，高压成了教育的唯一手段，保护成了成长的唯一措施。这种负成长的教育模式其实是对人性的一种摧残，是对人类的极大犯罪，当我认识到这一点时，我很内疚，我现在甚至每天起来都在请求神的宽恕。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哲学-哲学问题BY波特兰·罗素</title>
    <link href="/2022/01/18/%E5%93%B2%E5%AD%A6-%E5%93%B2%E5%AD%A6%E9%97%AE%E9%A2%98BY%E6%B3%A2%E7%89%B9%E5%85%B0%C2%B7%E7%BD%97%E7%B4%A0/"/>
    <url>/2022/01/18/%E5%93%B2%E5%AD%A6-%E5%93%B2%E5%AD%A6%E9%97%AE%E9%A2%98BY%E6%B3%A2%E7%89%B9%E5%85%B0%C2%B7%E7%BD%97%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在本书各章中，我主要限于谈论那些我认为可以发表一点肯定的和建设性意见的问题，因为单纯否定的批判似乎是不正当的。为了这个缘故，本书中知识论所占篇幅就比形而上学更多些，而哲学家们讨论得很多的一些论题，倘使加以处理，也处理的非常简略。</p></blockquote><p><strong>现实与实在。</strong>一张桌子，我可以观察到它的反光颜色质地等等特点，摸起来手感平滑，显微镜观察发现沟壑众多，这种相悖的观察特点是桌子本身吗。大多数情况下，感觉特征并不是物质本身，因为有太多客观条件存在，例如光照、温度、湿度、海拔等等，所以依照感觉构建出某种物质的特点可以称之为现实。但物质本身的实在并不是这种现实。</p><p><strong>物质的存在。</strong>生活中，我对物质的观察基于感官感觉，当我不观察物质的时候，它就不存在了吗？从笛卡尔的怀疑论说起，我可以证明我是存在的，因为当我不存在我的怀疑也失去了意义，所以我肯定存在。那客观世界呢，一只猫当我观察到的时候是存在的，那我不观察没有感知的时候可以认为不存在吗？猫饿了会叫，开心就会乱跑，这些事物本身就证明了猫是存在的，所以物质的存在可以依照感觉特征去感受，但不能用感觉特征去评判物质。物质是存在的，感觉特征是片面的。一切知识必须根据本能信仰建立起来，哲学应当指明本能信仰的层次。</p><p><strong>物质的性质。</strong>物理中的提出的空间大小等观念，我虽然无法直接观察得到。但从我个人观察发现，我个人观察的空间和物理存在的空间是对应的。视觉观察到某2种物质具有相同的颜色就认为它们具有相关性，不同颜色就认为不具有相关性，这是错误的。视觉听觉触觉这些感官感觉受到各种各样的影响，可以观察物质的性质，但物质的性质不是由感官感觉决定的。</p><p><strong>唯心主义。</strong>一切存在的，或者至少，一切为人所知道是存在的，在某种意义上，都必然是精神的。这个定义是混乱的，没有明确观念和感觉材料的区别。观念是存在人心灵之中，我对某某人或者某个事物的观念，感觉材料是我见到某个物质，观察它的颜色温度大小形状所得到的感觉材料。感觉材料和观念甚至可以不相关，比如某个人名声很差，我没有见过他，我可以通过想象和逻辑构建出这个人的大致形象，在心中存在这个观念，而在这里我没有任何感觉材料。在这里唯心主义者的定义太笼统和混乱了，越是庞大的理论，其定义越是谨慎。</p><p><strong>认知知识和描述知识。</strong>认知知识是个人亲自通过感觉材料认识的知识，可以是具体事物如太阳椅子等，也可以是抽象的概念，认知知识来自经验、记忆、学习生活等等。描述知识基本原则：我所能了解的每一个命题都必须完全由我所认识的成分组成，比如袁崇焕，熟读历史的人知道这是一位武将，不读历史的人会根据发音和自己记忆结合起来，找出某个东西。描述知识可以让我超越个人经验的局限，凭借者描述对从未体验过的事物具有知识。但必须知道：个人直接经验极为狭窄，对描述知识要具有疑问。</p><p><strong>论归纳法</strong>。太阳每天升起，火是热的，这都是从归纳法总结的经验，原则表述如下：1、如果发现甲和乙是相联系在一起的。而且从未发现它们分开过。那么甲乙相联系的次数越多，在新事例出现它们相联系的或然性也就越大；2、在同样情况下，相联系的事例其数目足够多，那么会使得或然性几乎接近与必然性，而且会使得它无限接近必然性。凡是根据经验告诉我有关未曾经验过的某种事物的知识，都是基于即非经验所能肯定的、又非经验否定的信念，这种信念大多来自归纳法总结得出的。</p><p><strong>论我们关于普遍原则的知识</strong>。从上一章的归纳法说起，在生活中普遍原则普遍到我根本不会注意到，它们如此确信的存在。比如今天是19号因为昨天是18号，这个原则就是，因为这是真的，所以那也是真的。一切随着真命题带来的都是真的。三条思维律原则：1、同一律：是就是是。2矛盾律：任何东西不能是即是又不是。3排中律：任何东西必须或者是或者不是。在经验主义和理性主义之间的争论，经验主义者认为一切知识都是从经验得来的，理性主义者认为除了经验外，还有我不知道的内在观念和内在原则。那到了今天，我已经知道理性主义者是正确的。</p><p><strong>先验的知识如何可能</strong>。康德之前，一般人抱有这样的见解：任何知识只要是先验的，就必然是分析的，比如，一个男人是人。那么我在否定任何先验事物的时候，就有矛盾：一个男人不是人。休谟发现：许多过往被认为是先验的事例，关系其实是综合的，1+2&#x3D;3这个例子，3并不在1和2里面，1和2这种先验的知识通过分析根本无法得出3。经验主义者答案是数学知识从归纳得来，但这个很容易反对：1，归纳法的实效性，不是凭借者归纳法证明的；2，对于简单数字问题，显然是通过某个单独的例子就可以肯定知道的。康德认为，经验具有2个因素：1是物理客体，2我的自身性质。在之前就论述过，物理客体和感觉材料不同，感觉材料是物理客体和自身相互作用的结果。我一切先验和知识都是和物理客体有关的，我和物理客体的关系存在即非心灵又非物质的世界里。</p><p><strong>共相的世界</strong>。柏拉图的理念说，从公道这个词开始，人的、大自然的、宇宙的所谓公道肯定会有一个共同的性质，这个性质就是公道这个词本质。公道不存在感觉世界之中，不等于任何公道的事物，但他确实存在着。理念说得到了很多不相干的联系，在这里我使用共相这个词阐述柏拉图的意见。凡是感觉给定的事物同性质的东西，我就说他是一个特殊的东西；相反，共相则是许多特殊事物分享的、具有一些相同特性的东西。我家在你家北面，在这里我家和你家就是一种共相，这种在…北面关系和事物不同，它既不存在时间空间之中，即非物质又非精神，但它确实是存在的。共相不是大多人理解的属于精神的，例如当我思考白色时，我想到的颜色形态等都是白色的共相，这种共相存在你的头脑也在我的头脑。</p><p><strong>论我们关于共相的知识</strong>。一切先验的知识都只处理共相之间的关系。对于之前的总结：我对于事物的知识和真理的知识必须区别，每种知识可以分作2类，一是直接，一是派生。对于事物的直接知识，称之为认识的，对于认识的事物而言，包括殊相的和其相的。殊相的知识，我认识的是感觉材料和我自己，共相知识，我能够从知识知道的东西是感性的性质、空间时间关系、相似关系和逻辑方面的某些抽象的共相。事物派生知识，我称为描述的知识，他包括对于东西认识和真理的知识，我所具有的直接的真理知识称为直观的知识，直观认识的真理称为自明的真理。</p>]]></content>
    
    
    
    <tags>
      
      <tag>哲学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哲学-《What Does It All Mean》 BY托马斯内格尔</title>
    <link href="/2022/01/17/%E5%93%B2%E5%AD%A6-%E3%80%8AWhat-Does-It-All-Mean%E3%80%8B-BY%E6%89%98%E9%A9%AC%E6%96%AF%E5%86%85%E6%A0%BC%E5%B0%94/"/>
    <url>/2022/01/17/%E5%93%B2%E5%AD%A6-%E3%80%8AWhat-Does-It-All-Mean%E3%80%8B-BY%E6%89%98%E9%A9%AC%E6%96%AF%E5%86%85%E6%A0%BC%E5%B0%94/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我对中国哲学和中国文化知之甚少，所以不能对中国读者说些什么。或许我只能表达这样一个愿望：本书将传达在西方哲学中最为核心的东西—-<strong>思想自由的理念</strong>。它会使读者感到，要评估每一种主张、每一条论证和每一套理论，并且尝试着判断它们是否可以被接受，<em>这最终都依赖于每一个人的独立思考，而非听命于权威。</em>by 托马斯·内格尔</p></blockquote><p>​这是一本简明的哲学入门的书籍，论证了几个简单的例子，包括外部世界、他人心灵、身心问题、自由意志、对错、公正、死亡与生活的意义问题。</p><p>​首先吸引我的就是生活的意义。在当下的中国，所谓流行比较文化，其实就是体现出来优越感，为何每个人都要去比较去展示给别人优越感，内核还是自卑。深耕于这个国家民族几千年的自卑，看这个国家历史就知道，几千年的屠杀、剥削、反抗、奴隶史循环往复，一个朝代覆灭又一个朝代兴起，每个人都在穷尽一生把别人踩在脚下。为什么？因为不去展示优越、不去比较显示给别人自己有多强大，别人就要要你命。而这种特点就造成这个国家从上到下面子文化、假大空文化、吹嘘文化。其内核还是自卑，人们深深的认识到，自己不过是这场生下来就参与游戏的棋子，毫无安全感，毫无被爱被需要的感觉。</p><p>​托马斯内格尔讨论生活的意义，人的一生就是自己的意义，一片叶子就是叶子存在的意义。人可以吃吃喝喝平安度过一生，这就是意义，当然也可以追求远大目标，这也是意义。这和中国当下教育完全相反，中国所谓的国家主义、集体主义、狼奶主义不可能容忍个人主义，甚至都无法容忍躺平主义。</p><p>​死亡，之后是回归寂静还是灵魂继续存在，这和个人信仰有关，我认为灵魂会继续存在。不会是现实世界这种，但会以一种特别方式存在。如果有人说人就是有肉体器官大脑组成，没有灵魂的说法，那我肯定不会认同。这世界上以肉体存在的物种不计其数，但没有一个让文明发展到了人类这种高度，肯定存在某种决定性的东西能够影响这一切，我认为这就是灵魂。死亡只是一个阶段，我并不惧怕也不怨恨死亡，我相信灵魂会继续存在。</p><p>​公正，有人出生含着金钥匙，有人出生极度贫穷，这是公正的吗？当然不是，但是这时候就是体现现代文明国家力量的时候，可以通过税收投入到教育、基础建设、新生孩童保障、单亲母亲保障等方面。那国与国之间呢？我出生在天朝，你出生在美国，地狱与天堂，相隔太平洋。那在这时候，我的公正怎么体现，没有福利，没有法律，时时处在极度被消失的恐惧中。很悲伤，这时候没有任何国家想要来改变你的境遇，因为不管我国事。在这种情况下，只能靠着自己努力run出去，有公正吗？没有，但这就是现实人生。极权国家之最大恶，就在于洗脑人民，把正常人洗脑阉割成了丧尸，满眼充血的找着不爱国的血肉。</p><p>​对与错，这是处于哪个方面的标准，如何定义。我在中国检举不爱国分子获得了50w，你在美国揭发不爱国邻居传为笑谈，我对了吗？你错了吗？即使这是在相同时空发生的事，得到的结果却完全相反，所以对错并不是法律决定的。那在道德层面呢，偷窃对于有的人来说道德无法接受，而有些人以盗窃为乐，道德也无法评判对错，因为不同的人道德完全是不同的。以个人的喜好呢，那更加无法评价。对错可以以道德标准去评判，但我们要知道，用道德去评判对错是不完全的是不标准的。</p><p>​自由意志，与此相反就是决定论。也就是中国人常说的命中如此等等，但如果这个世界是决定论的话，那你我生活，个人选择与自由，人类的存在就毫无意义，如果人生就如同电梯上下的运行被决定了那又有什么意义呢。命中如此很多时候就是自己给自己找的借口罢了，强迫自己接受某种不公平，说到底还是一种自我催眠，这在中国上了年纪的人身上很常见，他们所受的苦难确实需要自我催眠才能继续下去。我在苹果和梨中选择苹果就是自由意志，我今天去理发而不是明天去理发就是自由意志，人生中的每个决定都是自由意志体现。但注意，要在信息自由言论自由情况下这种说法是成立的，在高墙内，个人自由意志及其有限，而且要注意不被他人煽动蛊惑。</p><p>​外部世界、他人心灵或身心问题。在有些人看来，只需要关注自我，看自己过的快不快乐，他人与我何干。但是请注意，个人主义不是唯心主义，唯心主义者走进了自己给自己编织的谎言中，抛弃了道德、信仰、传统，这是不对的。这个世界不会是matrix中的人工智能，这个世界远比matrix艰难邪恶的多，多关注周围的人，帮助弱者，不管是道德需要还是个人意志，这都是对外部世界的作用。反过来也会作用到自己，爱笑的人运气不会太差，积善之家必有余庆，大概如此吧。</p><p>​托马斯内格尔这篇《what does it all mean》讨论的这几个方面，只是哲学基础入门，但我能够感受到这些问题的意义。<strong>思想自由，独立思考</strong>这是讨论哲学的基础，所以这大概也是我写这篇文章的原因，因为周围没什么人可说，大家都很封闭，基本上某个国家某个党是他们不可触碰的禁区，所以讨论也失去了意义。而表达自由是我与生俱来的人权，所以我应该会坚持写下去。</p>]]></content>
    
    
    
    <tags>
      
      <tag>哲学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哲学-大卫·休谟：人类理解研究</title>
    <link href="/2021/12/25/%E5%93%B2%E5%AD%A6-%E5%A4%A7%E5%8D%AB%C2%B7%E4%BC%91%E8%B0%9F%EF%BC%9A%E4%BA%BA%E7%B1%BB%E7%90%86%E8%A7%A3%E7%A0%94%E7%A9%B6/"/>
    <url>/2021/12/25/%E5%93%B2%E5%AD%A6-%E5%A4%A7%E5%8D%AB%C2%B7%E4%BC%91%E8%B0%9F%EF%BC%9A%E4%BA%BA%E7%B1%BB%E7%90%86%E8%A7%A3%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="人类理解和研究"><a href="#人类理解和研究" class="headerlink" title="人类理解和研究"></a>人类理解和研究</h1><p>​从各派哲学说起，大多数人喜欢轻松愉快简单能够融入人类生活的哲学并对其赞赏，讨厌抽象精细的哲学研究，认为更多的哲学研究会激发人心中的恶。但这是不对的，哲学研究是对人道德、思想、观念、印象等一系列品质最全面的研究，人们不应该对不熟悉的超出自己经验理解之外的事情排斥。</p><p>​人心中的知觉分为2大类，不强烈知觉为观念，强烈知觉为印象。举个例子，生活在大山的孩子终于有天见到了海，每次他一想起大海就会想起辽阔、海风、海天一线等场景，这种实体化的场景就是具有强烈知觉的印象。大山的孩子没见过飞机，听朋友说铁壳子长翅膀能飞起来的就是飞机，这种不强烈想象的知觉就是观念。但是注意，观念是一切印象的摹本，人具体感知到了什么就有什么样的观念，就算是天马行空的想象力也存在观念的联系。</p><p>​观念三种联系原则：相似关系、接近关系、因果关系。相似关系比如人看到了朋友的照片，那大脑中一下就涌现出朋友的英容笑貌，人各种感情升腾而起；接近关系如同古话近乡情更切就是这个理，人离开家乡好多年，回家时候距离500里和距离550米那其中感情如同烧水一般升温；因果关系是人类从最古老的经验之中获得的，是人类最纯粹最本能的关系。吃了饭就能维持人的生存，喝了水就不渴，那千年之前的人类也没有认识到这些东西含有的物质，也不知道人类基本生命需要的化学元素，但就是从经验获取到的因果关系让人进化到了现在。</p><p>​人类理性分为2种，观念的关系和实际的事情。人类的观念是从经验中得来的，当人对于理性产生怀疑时，要知道人类大多数东西都是经验所得，没有什么理性或者推导可言。</p>]]></content>
    
    
    
    <tags>
      
      <tag>哲学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android-Room和ViewmodelCoroutineLivedata配合使用</title>
    <link href="/2021/12/18/Android-Room%E5%92%8CViewmodelCoroutineLivedata%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/12/18/Android-Room%E5%92%8CViewmodelCoroutineLivedata%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<img src="/Users/xuedi/Desktop/blog/source/images/roomviewmodelMain.png" style="zoom:25%;" /><hr><p>这是小项目的样子，主界面是一个recyclerView从room取出的所有数据并使用livedata观察，左边floatiingButton点击清除room数据库，右边floatingButton点击进入存储数据界面insert表。</p><h1 id="db"><a href="#db" class="headerlink" title="db"></a>db</h1><p>room数据库所有操作</p><h2 id="WordRoomDatabase"><a href="#WordRoomDatabase" class="headerlink" title="WordRoomDatabase"></a>WordRoomDatabase</h2><blockquote><p>1、创建abstract WordRoomDatabase继承RoomDatabase，create abstract fun wordDao()</p><p>2、dcl单例wordRoomDatabase instance by fun getDatabase</p><p>3、addCallback()，wordDatabaseCallback override fun onCreate use coroutine function launch()对room init。deleteAll() insert() insert()</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Database(entities = arrayOf(Word::class), version = 1, exportSchema = false)</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WordRoomDatabase</span> : <span class="hljs-type">RoomDatabase</span>() &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">wordDao</span><span class="hljs-params">()</span></span>: WordDao<br><br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-meta">@Volatile</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> INSTANCE: WordRoomDatabase? = <span class="hljs-literal">null</span><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getDatabase</span><span class="hljs-params">(context: <span class="hljs-type">Context</span>, scope: <span class="hljs-type">CoroutineScope</span>)</span></span>: WordRoomDatabase &#123;<br>            <span class="hljs-keyword">return</span> INSTANCE ?: synchronized(<span class="hljs-keyword">this</span>) &#123;<br>                <span class="hljs-keyword">val</span> instance = Room.databaseBuilder(<br>                    context.applicationContext,<br>                    WordRoomDatabase::<span class="hljs-keyword">class</span>.java,<br>                    <span class="hljs-string">&quot;word_database&quot;</span><br>                ).addCallback(WordDatabaseCallback(scope)).build()<br>                INSTANCE = instance<br>                instance<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WordDatabaseCallback</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> scope: CoroutineScope) :<br>        RoomDatabase.Callback() &#123;<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(db: <span class="hljs-type">SupportSQLiteDatabase</span>)</span></span> &#123;<br>            <span class="hljs-keyword">super</span>.onCreate(db)<br>            INSTANCE?.let &#123; wordRoomDatabase -&gt;<br>                scope.launch &#123;<br>                    populateDatabase(wordRoomDatabase.wordDao())<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">populateDatabase</span><span class="hljs-params">(wordDao: <span class="hljs-type">WordDao</span>)</span></span> &#123;<br>            <span class="hljs-comment">//deleteAll</span><br>            wordDao.deleteAll()<br>            <span class="hljs-comment">//Add words</span><br>            wordDao.insert(Word(<span class="hljs-string">&quot;BE BRAVE DI&quot;</span>))<br>            wordDao.insert(Word(<span class="hljs-string">&quot;DO NOT GIVEUP&quot;</span>))<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Word"><a href="#Word" class="headerlink" title="Word"></a>Word</h2><blockquote><p>word表。tableName 设置表名称，ColumnInfo设置每一列名称，在这里只有word和autoGenerate id</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Entity(tableName = <span class="hljs-string">&quot;work_table&quot;</span>)</span><br><span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Word</span>(<br>    <span class="hljs-meta">@ColumnInfo(name = <span class="hljs-string">&quot;word&quot;</span>)</span><br>    <span class="hljs-keyword">var</span> word: String = <span class="hljs-string">&quot;&quot;</span><br>) &#123;<br>    <span class="hljs-meta">@PrimaryKey(autoGenerate = true)</span><br>    <span class="hljs-keyword">var</span> id: <span class="hljs-built_in">Int</span> = <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="WordDao"><a href="#WordDao" class="headerlink" title="WordDao"></a>WordDao</h2><blockquote><p>对word表进行的sql操作。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Dao</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">WordDao</span> &#123;<br><br>    <span class="hljs-meta">@Query(<span class="hljs-string">&quot;SELECT * FROM work_table ORDER BY word ASC&quot;</span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getAlphabetizedWords</span><span class="hljs-params">()</span></span> :Flow&lt;List&lt;Word&gt;&gt;<br><br>    <span class="hljs-meta">@Insert(onConflict = OnConflictStrategy.IGNORE)</span><br>    <span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">insert</span><span class="hljs-params">(word: <span class="hljs-type">Word</span>)</span></span><br><br>    <span class="hljs-meta">@Query(<span class="hljs-string">&quot;DELETE FROM work_table&quot;</span>)</span><br>    <span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">deleteAll</span><span class="hljs-params">()</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="repo"><a href="#repo" class="headerlink" title="repo"></a>repo</h1><p>WordRepository是对db和net进行的统一管理，调用wordDao.function</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WordRepository</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> wordDao: WordDao) &#123;<br>    <span class="hljs-keyword">val</span> allWords: Flow&lt;List&lt;Word&gt;&gt; = wordDao.getAlphabetizedWords()<br><br>    <span class="hljs-meta">@Suppress(<span class="hljs-string">&quot;RedundantSuspendModifier&quot;</span>)</span><br>    <span class="hljs-meta">@WorkerThread</span><br>    <span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">insert</span><span class="hljs-params">(word: <span class="hljs-type">Word</span>)</span></span>&#123;<br>        wordDao.insert(word)<br>    &#125;<br><br>    <span class="hljs-meta">@WorkerThread</span><br>    <span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">deleteAll</span><span class="hljs-params">()</span></span>&#123;<br>        wordDao.deleteAll()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="viewmodel"><a href="#viewmodel" class="headerlink" title="viewmodel"></a>viewmodel</h1><p>viewmodel对activity界面数据保存</p><h2 id="WordViewModelFactory"><a href="#WordViewModelFactory" class="headerlink" title="WordViewModelFactory"></a>WordViewModelFactory</h2><blockquote><p>Return WordViewModel(repository) as T</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WordViewModelFactory</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> repository: WordRepository) : ViewModelProvider.Factory &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T : ViewModel?&gt;</span> <span class="hljs-title">create</span><span class="hljs-params">(modelClass: <span class="hljs-type">Class</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span>: T &#123;<br>        <span class="hljs-keyword">if</span> (modelClass.isAssignableFrom(WordViewModel::<span class="hljs-keyword">class</span>.java))&#123;<br>            <span class="hljs-meta">@Suppress(<span class="hljs-string">&quot;UNCHECK_CAST&quot;</span>)</span><br>            <span class="hljs-keyword">return</span> WordViewModel(repository) <span class="hljs-keyword">as</span> T<br>        &#125;<br>        <span class="hljs-keyword">throw</span> IllegalArgumentException(<span class="hljs-string">&quot;Unknown ViewModel class&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="WordViewModel"><a href="#WordViewModel" class="headerlink" title="WordViewModel"></a>WordViewModel</h2><blockquote><p>allWords()使用Flow.asLiveData</p><p>Insert()使用协程viewmodelscope.launch()</p><p>deleteAdd()同上</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WordViewModel</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> repository: WordRepository) : ViewModel() &#123;<br><br>    <span class="hljs-keyword">val</span> allWords:LiveData&lt;List&lt;Word&gt;&gt; = repository.allWords.asLiveData()<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">insert</span><span class="hljs-params">(word: <span class="hljs-type">Word</span>)</span></span> = viewModelScope.launch &#123;<br>        repository.insert(word)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">deleteAdd</span><span class="hljs-params">()</span></span> = viewModelScope.launch &#123;<br>        repository.deleteAll()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="adapter"><a href="#adapter" class="headerlink" title="adapter"></a>adapter</h1><h2 id="WordListAdapter"><a href="#WordListAdapter" class="headerlink" title="WordListAdapter"></a>WordListAdapter</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WordListAdapter</span> : <span class="hljs-type">ListAdapter</span>&lt;<span class="hljs-type">Word, WordListAdapter.WordViewHolder</span>&gt;(WordsComparator()) &#123;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreateViewHolder</span><span class="hljs-params">(parent: <span class="hljs-type">ViewGroup</span>, viewType: <span class="hljs-type">Int</span>)</span></span>: WordViewHolder &#123;<br>        <span class="hljs-keyword">return</span> WordViewHolder.create(parent)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onBindViewHolder</span><span class="hljs-params">(holder: <span class="hljs-type">WordViewHolder</span>, position: <span class="hljs-type">Int</span>)</span></span> &#123;<br>        <span class="hljs-keyword">val</span> current = getItem(position)<br>        holder.bind(current.word)<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">WordViewHolder</span>(itemView: View) : RecyclerView.ViewHolder(itemView) &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> wordItemView: TextView = itemView.findViewById(R.id.textView)<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> wordItemContent: ConstraintLayout = itemView.findViewById(R.id.recyclerviewcontent)<br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">bind</span><span class="hljs-params">(text: <span class="hljs-type">String</span>?)</span></span> &#123;<br>            wordItemView.text = text<br>            <span class="hljs-keyword">val</span> colorArr = arrayOf(Color.WHITE, Color.YELLOW, Color.GREEN, Color.RED)<br>            wordItemContent.setBackgroundColor(colorArr[Random.nextInt(colorArr.size)])<br>        &#125;<br><br>        <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">create</span><span class="hljs-params">(parent: <span class="hljs-type">ViewGroup</span>)</span></span>: WordViewHolder &#123;<br>                <span class="hljs-keyword">val</span> view: View = LayoutInflater.from(parent.context)<br>                    .inflate(R.layout.recyclerview_item, parent, <span class="hljs-literal">false</span>)<br>                <span class="hljs-keyword">return</span> WordViewHolder(view)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">WordsComparator</span> : <span class="hljs-type">DiffUtil.ItemCallback</span>&lt;<span class="hljs-type">Word</span>&gt;() &#123;<br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">areItemsTheSame</span><span class="hljs-params">(oldItem: <span class="hljs-type">Word</span>, newItem: <span class="hljs-type">Word</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>            <span class="hljs-keyword">return</span> oldItem === newItem<br>        &#125;<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">areContentsTheSame</span><span class="hljs-params">(oldItem: <span class="hljs-type">Word</span>, newItem: <span class="hljs-type">Word</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>            <span class="hljs-keyword">return</span> oldItem.word == newItem.word<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Activity-and-application"><a href="#Activity-and-application" class="headerlink" title="Activity and application"></a>Activity and application</h1><h2 id="WordsApplication"><a href="#WordsApplication" class="headerlink" title="WordsApplication"></a>WordsApplication</h2><blockquote><p>By lazy调用到在初始化</p><p>Init function: WordRoomDatabase.getDatabase(this,scope), WordRepository(database.wordDao)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WordsApplication</span> : <span class="hljs-type">Application</span>() &#123;<br>    <span class="hljs-keyword">val</span> applicationScope = CoroutineScope(SupervisorJob())<br>    <span class="hljs-keyword">val</span> database <span class="hljs-keyword">by</span> lazy &#123; WordRoomDatabase.getDatabase(<span class="hljs-keyword">this</span>, scope = applicationScope) &#125;<br>    <span class="hljs-keyword">val</span> repository <span class="hljs-keyword">by</span> lazy &#123; WordRepository(database.wordDao()) &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="NewWordActivity"><a href="#NewWordActivity" class="headerlink" title="NewWordActivity"></a>NewWordActivity</h2><blockquote><p>存储word表</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NewWordActivity</span> : <span class="hljs-type">AppCompatActivity</span>() &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> binding:ActivityNewWordBinding<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        binding = ActivityNewWordBinding.inflate(layoutInflater)<br>        setContentView(binding.root)<br>        binding.buttonSave.setOnClickListener &#123;<br>            <span class="hljs-keyword">val</span> replyIntent = Intent()<br>            <span class="hljs-keyword">if</span> (TextUtils.isEmpty(binding.editWord.text))&#123;<br>                setResult(Activity.RESULT_CANCELED, replyIntent)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                Log.d(<span class="hljs-string">&quot;DI&quot;</span>, binding.editWord.text.toString())<br>                replyIntent.putExtra(EXTRA_REPLY, binding.editWord.text.toString())<br>                setResult(Activity.RESULT_OK, replyIntent)<br>            &#125;<br>            finish()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span>&#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> EXTRA_REPLY = <span class="hljs-string">&quot;com.example.android.wordlistsqp.REPLY&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h2><blockquote><p>first       —&gt; viewModel. ‘’Viewmodel include liveData scope’’</p><p>Second —&gt; livedata.observe() 数据变化则adapter跟着变化.</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> : <span class="hljs-type">AppCompatActivity</span>() &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> binding: ActivityMainBinding<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> newWOrdActivityRequestCode = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        binding = ActivityMainBinding.inflate(layoutInflater)<br>        setContentView(binding.root)<br>        <span class="hljs-keyword">var</span> adapter = WordListAdapter()<br>        binding.recyclerview.adapter = adapter<br>        binding.recyclerview.layoutManager = LinearLayoutManager(<span class="hljs-keyword">this</span>)<br>        wordViewModel.allWords.observe(<span class="hljs-keyword">this</span>, Observer &#123; wordViewModel -&gt;<br>            wordViewModel?.let &#123;<br>                adapter.submitList(it)<br>            &#125;<br>        &#125;)<br>        binding.floatingActionButton.setOnClickListener&#123;<br>            <span class="hljs-keyword">val</span> intent = Intent(<span class="hljs-keyword">this</span>, NewWordActivity::<span class="hljs-keyword">class</span>.java)<br>            startActivityForResult(intent, newWOrdActivityRequestCode)<br>        &#125;<br>        binding.clear.setOnClickListener&#123;<br>            wordViewModel.deleteAdd()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> wordViewModel: WordViewModel <span class="hljs-keyword">by</span> viewModels &#123;<br>        WordViewModelFactory((application <span class="hljs-keyword">as</span> WordsApplication).repository)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onActivityResult</span><span class="hljs-params">(requestCode: <span class="hljs-type">Int</span>, resultCode: <span class="hljs-type">Int</span>, <span class="hljs-keyword">data</span>: <span class="hljs-type">Intent</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onActivityResult(requestCode, resultCode, <span class="hljs-keyword">data</span>)<br>        <span class="hljs-keyword">if</span> (requestCode == newWOrdActivityRequestCode &amp;&amp; resultCode == Activity.RESULT_OK) &#123;<br>            <span class="hljs-keyword">data</span>?.getStringExtra(NewWordActivity.EXTRA_REPLY)?.let &#123;<br>                wordViewModel.insert(Word(it))<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Snackbar.make(binding.content, <span class="hljs-string">&quot;没有数据返回哦&quot;</span>, Snackbar.LENGTH_LONG).show()<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Common-vmware虚拟机桥接模式网络配置</title>
    <link href="/2021/12/11/Common-vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/12/11/Common-vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="VMware-Fusion连接模式"><a href="#VMware-Fusion连接模式" class="headerlink" title="VMware Fusion连接模式"></a>VMware Fusion连接模式</h2><h2 id="VMware-桥接模式"><a href="#VMware-桥接模式" class="headerlink" title="VMware 桥接模式"></a><strong>VMware 桥接模式</strong></h2><p>VMware桥接模式，也就是将虚拟机的虚拟网络适配器与主机的物理网络适配器进行交接，虚拟机中的虚拟网络适配器可通过主机中的物理网络适配器直接访问到外部网络(例如图中所示的局域网和Internet，下同)。简而言之，这就好像在上图所示的局域网中添加了一台新的、独立的计算机一样。因此，虚拟机也会占用局域网中的一个IP地址，并且可以和其他终端进行相互访问。桥接模式网络连接支持有线和无线主机网络适配器。如果你想把虚拟机当做一台完全独立的计算机看待，并且允许它和其他终端一样的进行网络通信，那么桥接模式通常是虚拟机访问网络的最简单途径。</p><h2 id="VMware-NAT模式"><a href="#VMware-NAT模式" class="headerlink" title="VMware NAT模式"></a><strong>VMware NAT模式</strong></h2><p>NAT，是Network Address Translation的缩写，意即网络地址转换。NAT模式也是VMware创建虚拟机的默认网络连接模式。使用NAT模式网络连接时，VMware会在主机上建立单独的专用网络，用以在主机和虚拟机之间相互通信。虚拟机向外部网络发送的请求数据”包裹”，都会交由NAT网络适配器加上”特殊标记”并以主机的名义转发出去，外部网络返回的响应数据”包裹”，也是先由主机接收，然后交由NAT网络适配器根据”特殊标记”进行识别并转发给对应的虚拟机，因此，虚拟机在外部网络中不必具有自己的IP地址。从外部网络来看，虚拟机和主机在共享一个IP地址，默认情况下，外部网络终端也无法访问到虚拟机。</p><p>此外，在一台主机上只允许有一个NAT模式的虚拟网络。因此，同一台主机上的多个采用NAT模式网络连接的虚拟机也是可以相互访问的。</p><p>前面我们已经提到，默认情况下，外部网络无法访问到虚拟机，不过我们也可以通过手动修改NAT设置实现端口转发功能，将外部网络发送到主机指定端口的数据转发到指定的虚拟机上。比如，我们在虚拟机的80端口上”建立”了一个站点，只要我们设置端口转发，将主机88端口上的数据转发给虚拟机的80端口，就可以让外部网络通过主机的88端口访问到虚拟机80端口上的站点。</p><h2 id="VMware-仅主机模式"><a href="#VMware-仅主机模式" class="headerlink" title="VMware 仅主机模式"></a><strong>VMware 仅主机模式</strong></h2><p>仅主机模式，是一种比NAT模式更加封闭的的网络连接模式，它将创建完全包含在主机中的专用网络。仅主机模式的虚拟网络适配器仅对主机可见，并在虚拟机和主机系统之间提供网络连接。相对于NAT模式而言，仅主机模式不具备NAT功能，因此在默认情况下，使用仅主机模式网络连接的虚拟机无法连接到Internet(在主机上安装合适的路由或代理软件，或者在Windows系统的主机上使用Internet连接共享功能，仍然可以让虚拟机连接到Internet或其他网络)。</p><p>在同一台主机上可以创建多个仅主机模式的虚拟网络，如果多个虚拟机处于同一个仅主机模式网络中，那么它们之间是可以相互通信的；如果它们处于不同的仅主机模式网络，则默认情况下无法进行相互通信(可通过在它们之间设置路由器来实现相互通信)。</p><h1 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h1><p>1、先确认好你的主机ip地址为多少，mac查看ip有两种方法：<br>一是在终端输入:ifconfig，如下图1红线划出的inet；brodcast指的是广播范围的IP地址，根据子网掩码决定了主机的IP的地址段范围是:172.20.10.1-172.20.10.15。</p><p>2、打开VMware Fusion,启动你的虚拟机，并在“设置–网络适配器中”选择“桥接模式网络连接”。</p><p>***3、***手动给虚拟机linux配置一个IP，这个IP必须要与主机在同一个网段(本例为172.20.10网段)中，否则无法桥接通连，配置方法如下：<br>执行ifconfig，查看虚拟机linux的网卡，如下图，我的是ens33<br>cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts<br>sudo vi ifcfg-ens33 (此处ens33具体看个人网卡，不要改ifcfg-lo)<br>在ifcfg-ens33文件尾配置IP以及路由网关等内容，有则修改，无则新增：<br>IPADDR&#x3D;172.20.10.11 （记住虚拟机IP要在172.20.10.1-172.20.10.15的地址段范围中选择）<br>GATEWAY&#x3D;172.20.10.1<br>NETMASK&#x3D;255.255.255.240<br>DNS1&#x3D;172.20.10.1 (首选DNS)</p><h1 id="虚拟机主机互相无法ping通问题解决"><a href="#虚拟机主机互相无法ping通问题解决" class="headerlink" title="虚拟机主机互相无法ping通问题解决"></a>虚拟机主机互相无法ping通问题解决</h1><p>此前一直没有注意到我的本机子网掩码是255.255.255.240，所以折腾了好长一阵子，把虚拟机的ip设置成172.20.10.101,导致一直没有办法去正常ping通，所以认为有必要在文末做一下说明。</p><p>我的主机所连接的wifi网络分配到的网段是172.20.10.1，子网掩码255.255.255.240，子网掩码转化为二进制形式即为：11111111.11111111.11111111.11110000，也就是说该子网掩码定义了该网段的前28位是网络号，后4位是主机号(host ID)，所以172.20.10.1这个网段只能分配15台主机(即该网段只有15个ip)。</p><p>广播地址(Broadcast Address)是专门用于同时向网络中所有工作站进行发送的一个地址。在使用TCP&#x2F;IP 协议的网络中，主机标识段host ID 为全1 的IP 地址为广播地址，广播的分组传送给host ID段所涉及的所有计算机。而由上图1得知主机的广播地址broadcast为172.20.10.15（对应二进制形式为10101100.00010100.00001010.00001111），全1的hostID与广播地址按位与并结合子网掩码所定义的15个主机IP范围推测，可知主机的有效ip地址为：172.20.10.1-172.20.10.15，因此虚拟机IP地址要设在该IP段范围内才能与主机通联。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Common</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Common-vmware虚拟机安装</title>
    <link href="/2021/12/11/Common-vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/"/>
    <url>/2021/12/11/Common-vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>安装vmware Fusion虚拟机</p><p>1、<a href="https://www.vmware.com/">https://www.vmware.com/</a> 官网，products搜索vmware fusion 12 for mac下载。</p><p>2、申请密钥需要注册并登陆。</p><p>3、注册中的坑，这个属于前端网页不提示，应该是对于某些地区人的限制。需要特别注意设置下: 没有按照要求填写。刚注册在下载了，填了美国的手机号码Phone Number：<strong>0013602923672，</strong>Adress:Texas，City:Houston,Zip Code:77001，其它的随便。</p><p>4、安装你需要的系统版本。</p><p>5、用起来感觉确实很丝滑，新版本的Fusion虚拟机。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Common</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git-git升级</title>
    <link href="/2021/12/07/Git-git%E5%8D%87%E7%BA%A7/"/>
    <url>/2021/12/07/Git-git%E5%8D%87%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<p>mac上的git升级.</p><p>1、挂上vpn, 设置全局模式.</p><p>2、安装brew   </p><p>&#x2F;usr&#x2F;bin&#x2F;ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install">https://raw.githubusercontent.com/Homebrew/install/master/install</a>)”</p><p>3、安装git </p><p> brew install git</p><p>4、可以看到当前新git文件和旧git文件</p><p>which -a git</p><p>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;git   &#x2F;旧git </p><p>&#x2F;usr&#x2F;bin&#x2F;git            &#x2F;新git</p><p>5、切换到之前git文件夹，删除git</p><p>sudo rm -rf git*</p><p>6、将新下载git overwrite到当前文件夹</p><p> brew link –overwrite git</p><p>7、ls检查文件，git –version 查看当前git版本.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android-ChainOfResponsibility责任链模式</title>
    <link href="/2021/12/07/Android-ChainOfResponsibility%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/12/07/Android-ChainOfResponsibility%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>责任链在Android中特别常用的设计模式，例如okhttp的intercepter等等.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//责任链模式</span><br><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Topic</span> &#123;<br>    NONE, BUTTON, DIALOG, APPLICATION<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelpHandler</span>(<span class="hljs-keyword">var</span> helpHandler: HelpHandler?, <span class="hljs-keyword">var</span> topic: Topic) &#123;<br>    <span class="hljs-keyword">open</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">handleHelp</span><span class="hljs-params">()</span></span> &#123;<br>        helpHandler?.handleHelp()<br>    &#125;<br><br>    <span class="hljs-keyword">open</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">hasHelp</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">return</span> topic != Topic.NONE<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Widget</span>(helpHandler: HelpHandler, topic: Topic) : HelpHandler(helpHandler, topic) &#123;<br>    <span class="hljs-keyword">init</span> &#123;<br>        println(javaClass.name+<span class="hljs-string">&quot; init()&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span>(helpHandler: HelpHandler, topic: Topic) : Widget(helpHandler, topic) &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">handleHelp</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">if</span> (hasHelp()) &#123;<br>            println(javaClass.name + <span class="hljs-string">&quot; &quot;</span> + Thread.currentThread().stackTrace[<span class="hljs-number">1</span>].methodName)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">super</span>.handleHelp()<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dialog</span>(helpHandler: HelpHandler, topic: Topic) : Widget(helpHandler, topic) &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">handleHelp</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">if</span> (hasHelp()) &#123;<br>            println(javaClass.name + <span class="hljs-string">&quot; &quot;</span> + Thread.currentThread().stackTrace[<span class="hljs-number">1</span>].methodName)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">super</span>.handleHelp()<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span>(helpHandler: HelpHandler?, topic: Topic) : HelpHandler(helpHandler, topic) &#123;<br>    <span class="hljs-keyword">constructor</span>(topic: Topic) : <span class="hljs-keyword">this</span>(<span class="hljs-literal">null</span>, topic) &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">var</span> application = Application(Topic.APPLICATION)<br>    <span class="hljs-keyword">var</span> dialog = Dialog(application, Topic.DIALOG)<br>    <span class="hljs-keyword">var</span> button = Button(dialog, Topic.BUTTON)<br>    button.handleHelp()<br><br>    <span class="hljs-keyword">var</span> button1 = Button(dialog, Topic.NONE)<br>    button1.handleHelp()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android-SingleInstance单例模式</title>
    <link href="/2021/12/04/Android-SingleInstance%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/12/04/Android-SingleInstance%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>单例模式在Android非常常见，例如user、networkManager、数据库操作等等。一般使用dcl或者静态内部类单例，带参数选择dcl，不带参数静态内部类。</p><p>1、java单例5种写法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//java 5种单例模式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleInstance</span> &#123;<br><br>    <span class="hljs-comment">//加载时创建单例</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleInstanceAdd</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingleInstanceAdd</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingleInstanceAdd</span> <span class="hljs-variable">instanceAdd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleInstanceAdd</span>();<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingleInstanceAdd <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> instanceAdd;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() + <span class="hljs-string">&quot; add completed&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//懒加载</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleInstanceLazy</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingleInstanceLazy</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingleInstanceLazy</span> <span class="hljs-variable">singleInstanceLazy</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingleInstanceLazy <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (singleInstanceLazy == <span class="hljs-literal">null</span>) &#123;<br>                singleInstanceLazy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleInstanceLazy</span>();<br>            &#125;<br>            <span class="hljs-keyword">return</span> singleInstanceLazy;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() + <span class="hljs-string">&quot; lazy complete&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//同步锁写法</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleInstanceSynchronized</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingleInstanceSynchronized</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingleInstanceSynchronized</span> <span class="hljs-variable">singleInstanceSynchronized</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> SingleInstanceSynchronized <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (singleInstanceSynchronized == <span class="hljs-literal">null</span>) &#123;<br>                singleInstanceSynchronized = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleInstanceSynchronized</span>();<br>            &#125;<br>            <span class="hljs-keyword">return</span> singleInstanceSynchronized;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//dcl</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleInstanceDCL</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingleInstanceDCL</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingleInstanceDCL</span> <span class="hljs-variable">singleInstanceDCL</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingleInstanceDCL <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (singleInstanceDCL == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">synchronized</span> (SingleInstanceDCL.class) &#123;<br>                    <span class="hljs-keyword">if</span> (singleInstanceDCL == <span class="hljs-literal">null</span>) singleInstanceDCL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleInstanceDCL</span>();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> singleInstanceDCL;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//静态内部类写法</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleInstanceStatic</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingleInstanceStatic</span><span class="hljs-params">()</span>&#123;&#125;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleStatic</span>&#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingleInstanceStatic</span> <span class="hljs-variable">singleInstanceStatic</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleInstanceStatic</span>();<br>        &#125;<br>        <span class="hljs-keyword">public</span> SingleInstanceStatic <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> SingleStatic.singleInstanceStatic;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        print(SingleInstanceAdd.getInstance().toString());<br>        print(SingleInstanceLazy.getInstance().toString());<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、kotlin单例5种写法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleInstanceDCL</span> &#123;<br>&#125;<br><br><span class="hljs-comment">//单例加载时初始化</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">object</span> SingleInstance &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>: String &#123;<br>        println(<span class="hljs-keyword">super</span>.toString() + <span class="hljs-string">&quot; &quot;</span> + javaClass.name + <span class="hljs-string">&quot; complete&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.toString()<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//延迟加载、懒加载</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleInstanceLazy</span> &#123;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-keyword">val</span> instanceLazy <span class="hljs-keyword">by</span> lazy(LazyThreadSafetyMode.NONE) &#123;<br>            SingleInstanceLazy()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>: String &#123;<br>        println(<span class="hljs-keyword">super</span>.toString() + <span class="hljs-string">&quot; &quot;</span> + javaClass.name + <span class="hljs-string">&quot; complete&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.toString()<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//同步锁写法</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleInstanceSynchronized</span>&#123;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> singleInstanceSynchronized:SingleInstanceSynchronized?=<span class="hljs-literal">null</span><br>        <span class="hljs-meta">@Synchronized</span><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">get</span><span class="hljs-params">()</span></span>:SingleInstanceSynchronized&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span>== singleInstanceSynchronized) singleInstanceSynchronized = SingleInstanceSynchronized()<br>            <span class="hljs-keyword">return</span> singleInstanceSynchronized <span class="hljs-keyword">as</span> SingleInstanceSynchronized<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//DCL写法</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleInstanceDCLkt</span>&#123;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span>&#123;<br>        <span class="hljs-keyword">val</span> instanceDCL <span class="hljs-keyword">by</span> lazy(LazyThreadSafetyMode.SYNCHRONIZED)&#123;<br>            SingleInstanceDCL()<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//静态内部类写法</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleInstanceStatic</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">object</span> SingleStatic&#123;<br>        <span class="hljs-keyword">val</span> instanceStatic = SingleInstanceStatic()<br>    &#125;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span> = SingleStatic.instanceStatic<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    SingleInstance.toString()<br>    SingleInstanceLazy.instanceLazy.toString()<br>    SingleInstanceSynchronized.<span class="hljs-keyword">get</span>().toString()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android-Factory工厂模式</title>
    <link href="/2021/12/04/Android-Factory%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/12/04/Android-Factory%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>工厂模式非常常见，一般分为简单工厂模式、工厂模式、抽象工厂</p><p>1、简单工厂。类创建型模式，通过参数使用静态方法创建工厂。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//简单工厂模式，对象切换在静态方法完成</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">SimpleFactoryDraw</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>: <span class="hljs-type">SimpleFactoryDraw</span>&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span> &#123;<br>        println(javaClass.name+ <span class="hljs-string">&quot; isinvoking &quot;</span> + Thread.currentThread().stackTrace[<span class="hljs-number">1</span>].methodName)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>: <span class="hljs-type">SimpleFactoryDraw</span>&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span> &#123;<br>        println(javaClass.name+ <span class="hljs-string">&quot; isinvoking &quot;</span> + Thread.currentThread().stackTrace[<span class="hljs-number">1</span>].methodName)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>: <span class="hljs-type">SimpleFactoryDraw</span>&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span> &#123;<br>        println(javaClass.name+ <span class="hljs-string">&quot; isinvoking &quot;</span> + Thread.currentThread().stackTrace[<span class="hljs-number">1</span>].methodName)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getShape</span><span class="hljs-params">(shape: <span class="hljs-type">String</span>)</span></span>: SimpleFactoryDraw &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">when</span>(shape)&#123;<br>        <span class="hljs-string">&quot;Circle&quot;</span> -&gt; Circle()<br>        <span class="hljs-string">&quot;Rectangle&quot;</span> -&gt; Rectangle()<br>        <span class="hljs-keyword">else</span> -&gt; Shape()<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">var</span> circle:SimpleFactoryDraw = getShape(<span class="hljs-string">&quot;Circle&quot;</span>)<br>    <span class="hljs-keyword">var</span> rectangle:SimpleFactoryDraw = getShape(<span class="hljs-string">&quot;rectangle&quot;</span>)<br>    circle.draw()<br>    rectangle.draw()<br>&#125;<br></code></pre></td></tr></table></figure><p>2、一般工厂模式。创建一个接口，让子类确定实例化哪个类，让对象实例化延迟到了子类。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//一般工厂模式，将选择工厂抽象</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IViewDraw</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onDraw</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Theme</span>(<span class="hljs-keyword">var</span> name: String) &#123;<br>    <span class="hljs-meta">@JvmName(<span class="hljs-string">&quot;getName1&quot;</span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> name<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ThemeFactory</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createTheme</span><span class="hljs-params">()</span></span>: Theme<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Scrollbar</span>(<span class="hljs-keyword">var</span> themeFactory: ThemeFactory) : IViewDraw &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onDraw</span><span class="hljs-params">()</span></span> &#123;<br>        println(javaClass.name + <span class="hljs-string">&quot; is &quot;</span> + Thread.currentThread().stackTrace[<span class="hljs-number">1</span>].methodName + <span class="hljs-string">&quot; <span class="hljs-subst">$&#123;themeFactory.createTheme().name&#125;</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DarkThemeFactory</span> : <span class="hljs-type">ThemeFactory</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createTheme</span><span class="hljs-params">()</span></span>: Theme &#123;<br>        <span class="hljs-keyword">return</span> Theme(<span class="hljs-string">&quot;DarkTheme&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LightThemeFactory</span> : <span class="hljs-type">ThemeFactory</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createTheme</span><span class="hljs-params">()</span></span>: Theme &#123;<br>        <span class="hljs-keyword">return</span> Theme(<span class="hljs-string">&quot;LightTheme&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> themeFactory = DarkThemeFactory()<br>    <span class="hljs-keyword">val</span> scrollbar = Scrollbar(themeFactory)<br>    scrollbar.onDraw()<br>    <span class="hljs-keyword">val</span> lightThemeFactory = LightThemeFactory()<br>    <span class="hljs-keyword">val</span> lightScrollbar = Scrollbar(lightThemeFactory)<br>    lightScrollbar.onDraw()<br>&#125;<br></code></pre></td></tr></table></figure><p>3、抽象工厂。抽象工厂将工厂方法进一步抽象，可以有多个factory。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//抽象工厂模式</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Background</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">drawBackground</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Border</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">drawBorder</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AdsShape</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AbsThemeFactory</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createBackground</span><span class="hljs-params">()</span></span>:Background<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createBorder</span><span class="hljs-params">()</span></span>:Border<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DarkBackground</span> : <span class="hljs-type">Background</span>&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">drawBackground</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;draw <span class="hljs-subst">$&#123;Thread.currentThread().stackTrace[<span class="hljs-number">1</span>].methodName&#125;</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DarkBorder</span> : <span class="hljs-type">Border</span>&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">drawBorder</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;draw <span class="hljs-subst">$&#123;Thread.currentThread().stackTrace[<span class="hljs-number">1</span>].methodName&#125;</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbScrollbar</span>(<span class="hljs-keyword">var</span> absThemeFactory: AbsThemeFactory): AdsShape&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span> &#123;<br>        absThemeFactory.createBackground().drawBackground()<br>        absThemeFactory.createBorder().drawBorder()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsDarkThemeFactory</span> : <span class="hljs-type">AbsThemeFactory</span>&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createBackground</span><span class="hljs-params">()</span></span>: Background &#123;<br>        <span class="hljs-keyword">return</span> DarkBackground()<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createBorder</span><span class="hljs-params">()</span></span>: Border &#123;<br>        <span class="hljs-keyword">return</span> DarkBorder()<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    AbScrollbar(AbsDarkThemeFactory()).draw()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android-Build模式</title>
    <link href="/2021/12/03/Android-Build%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/12/03/Android-Build%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>Build模式在Android中非常常见，例如dialog创建、okhttp配置等等。build模式是将复杂对象和表示分离，一步步构造对象。</p><p>1、静态内部类Build中function setConponent()将各个属性设置进去并返回this</p><p>2、build()创建Product(build), 参数构造时将build属性设置给product</p><p>3、Product.Build().setConponent().build创建product instance</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//Build模式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span>() &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> head: String<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> body: String<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> foot: String<br><br>    <span class="hljs-keyword">constructor</span>(build: Build) : <span class="hljs-keyword">this</span>() &#123;<br>        <span class="hljs-keyword">this</span>.head = build.head<br>        <span class="hljs-keyword">this</span>.body = build.body<br>        <span class="hljs-keyword">this</span>.foot = build.foot<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Product: head <span class="hljs-variable">$head</span> body<span class="hljs-variable">$body</span> foot<span class="hljs-variable">$foot</span>&quot;</span>)<br>    &#125;<br><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Build</span> &#123;<br>        <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> head: String<br>        <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> body: String<br>        <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> foot: String<br><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setHead</span><span class="hljs-params">(head: <span class="hljs-type">String</span>)</span></span>: Build &#123;<br>            <span class="hljs-keyword">this</span>.head = head<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setBody</span><span class="hljs-params">(body: <span class="hljs-type">String</span>)</span></span>: Build &#123;<br>            <span class="hljs-keyword">this</span>.body = body<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setFoot</span><span class="hljs-params">(foot: <span class="hljs-type">String</span>)</span></span>: Build &#123;<br>            <span class="hljs-keyword">this</span>.foot = foot<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span>: Product &#123;<br>            <span class="hljs-keyword">return</span> Product(<span class="hljs-keyword">this</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> product = Product.Build()<br>        .setHead(<span class="hljs-string">&quot;yeah I&#x27;m head&quot;</span>).setBody(<span class="hljs-string">&quot; now is body&quot;</span>).setFoot(<span class="hljs-string">&quot; atlast foot&quot;</span>).build()<br>    println(product.toString())<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android-proxy代理模式</title>
    <link href="/2021/12/02/Android-proxy%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/12/02/Android-proxy%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>代理模式是一种非常常见的模式，在java或者kotlin中，当我们去扩展某个对象也需要保护这个对象的时候，就可以使用代理模式。代理模式是一种控制模式。</p><p>1、静态代理。委托类和代理类实现同一个接口，代理类初始化时候将委托类也初始化，然后就可以使用委托类对象调用方法等，而代理类新加入方法属性可以对属性类做扩展，这样非常安全。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//静态代理</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ISubject</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doAction</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-comment">//真实对象委托类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RealSubject</span>: <span class="hljs-type">ISubject</span>&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;javaClass.name&#125;</span> function init()&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doAction</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;javaClass.name&#125;</span> function doAction&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//代理类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxySubject</span>(<span class="hljs-keyword">var</span> realSubject: RealSubject) : ISubject&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;javaClass.name&#125;</span> function init&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doAction</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;javaClass.name&#125;</span> doAction start&quot;</span>)<br>        realSubject.doAction()<br>        println(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;javaClass.name&#125;</span> doAction end&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">var</span> proxySubject = ProxySubject(RealSubject())<br>    proxySubject.<span class="hljs-keyword">init</span>()<br>    proxySubject.doAction()<br>&#125;<br></code></pre></td></tr></table></figure><p>2、动态代理。java动态代理例如jdk动态代理，proxyHandle实现InvocationHandler, 使用invoke()中的method.invoke(obj, args)。使用Proxy.newProxyInstance(classload, class, new ProxyHandle(myObject))利用反射创建的class加载进入内存中，然后调用doAction()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxyJavaPattern</span> &#123;<br><br>    <span class="hljs-comment">//动态代理</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Isubject</span> &#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAction</span><span class="hljs-params">()</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxySubject1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Isubject</span> &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>            print(getClass().getName() + <span class="hljs-string">&quot; init&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAction</span><span class="hljs-params">()</span> &#123;<br>            print(getClass().getName() + <span class="hljs-string">&quot; doAction&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxySubject2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Isubject</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>            print(getClass().getName() + <span class="hljs-string">&quot; init&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAction</span><span class="hljs-params">()</span> &#123;<br>            print(getClass().getName() + <span class="hljs-string">&quot; doAction&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyHandle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>        <span class="hljs-keyword">private</span> Object subject;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyHandle</span><span class="hljs-params">(Object subject)</span> &#123;<br>            <span class="hljs-built_in">this</span>.subject = subject;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>            print(getClass().getName() + <span class="hljs-string">&quot; start&quot;</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(subject, args);<br>            print(getClass().getName() + <span class="hljs-string">&quot; end&quot;</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Isubject</span> <span class="hljs-variable">isubject1</span> <span class="hljs-operator">=</span> (Isubject) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[]&#123;Isubject.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyHandle</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxySubject1</span>()));<br>        isubject1.init();<br>        isubject1.doAction();<br>        <span class="hljs-type">Isubject</span> <span class="hljs-variable">isubject2</span> <span class="hljs-operator">=</span> (Isubject) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[]&#123;Isubject.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyHandle</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxySubject2</span>()));<br>        isubject2.init();<br>        isubject2.doAction();<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(message);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3、kotlin代理模式。通过by关键字实现。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//kotlin中的动态代理，使用by关键字。效率比java反射高很多</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProxyKotlinPatternInterface</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doAction</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyKotlinPatternSubject</span> : <span class="hljs-type">ProxyKotlinPatternInterface</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doAction</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;javaClass.name&#125;</span>  <span class="hljs-subst">$&#123;Thread.currentThread().stackTrace[<span class="hljs-number">1</span>].methodName&#125;</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyKotlinPatternExecute</span>(proxyKotlinPatternInterface: ProxyKotlinPatternInterface) : ProxyKotlinPatternInterface <span class="hljs-keyword">by</span> proxyKotlinPatternInterface&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span>&#123;<br>        println(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;javaClass.name&#125;</span>  <span class="hljs-subst">$&#123;Thread.currentThread().stackTrace[<span class="hljs-number">1</span>].methodName&#125;</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">val</span> proxyKotlinPatternExecute = ProxyKotlinPatternExecute(ProxyKotlinPatternSubject())<br>    proxyKotlinPatternExecute.execute()<br>    proxyKotlinPatternExecute.doAction()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android-observer观察者模式</title>
    <link href="/2021/12/01/Android-observer%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/12/01/Android-observer%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>观察者模式是一种一对多的对象行为模式，当被观察者改变时，所有依赖于他的观察者都会自动更新。常见例子比如Android中的button.setOnclickListener()，broadcastReceiver, rxJava等等。这里通过一个自定义观察者模式来看：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-comment">//接受被观察者的信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">update</span><span class="hljs-params">(observable: <span class="hljs-type">Observable</span>, objects: <span class="hljs-type">Any</span>)</span></span><br>&#125;<br><br><span class="hljs-keyword">open</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Observable</span> &#123;<br>    <span class="hljs-comment">//存储所有的观察者对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> list: ArrayList&lt;Observer&gt; = ArrayList&lt;Observer&gt;()<br><br>    <span class="hljs-comment">//添加观察者对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">addObserver</span><span class="hljs-params">(observe: <span class="hljs-type">Observer</span>)</span></span> &#123;<br>        observe?.apply &#123;<br>            list.add(observe)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//移除观察者</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">deleteObserver</span><span class="hljs-params">(observe: <span class="hljs-type">Observer</span>)</span></span> &#123;<br>        list?.apply &#123;<br>            <span class="hljs-keyword">if</span> (list.size &gt; <span class="hljs-number">0</span>) &#123;<br>                list.remove(observe)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//有活动行为通知观察者</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">notifyObservers</span><span class="hljs-params">(obj: <span class="hljs-type">Any</span>)</span></span> &#123;<br>        <span class="hljs-keyword">for</span> (element <span class="hljs-keyword">in</span> list) &#123;<br>            element.update(<span class="hljs-keyword">this</span>, obj)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//观察者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FishMan</span>(<span class="hljs-keyword">var</span> name: String) : Observer &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">update</span><span class="hljs-params">(observable: <span class="hljs-type">Observable</span>, objects: <span class="hljs-type">Any</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;<span class="hljs-variable">$name</span> observed this fish is eating <span class="hljs-variable">$objects</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shark</span>(<span class="hljs-keyword">var</span> name: String) : Observer &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">update</span><span class="hljs-params">(observable: <span class="hljs-type">Observable</span>, objects: <span class="hljs-type">Any</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;<span class="hljs-variable">$name</span> observed this fish is eating <span class="hljs-variable">$objects</span>&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//被观察者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fish</span>(<span class="hljs-keyword">var</span> name: String) : Observable() &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">eating</span><span class="hljs-params">(food: <span class="hljs-type">String</span>)</span></span> &#123;<br>        notifyObservers(food)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toStrings</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Fish&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    println(<span class="hljs-string">&quot;hi is me&quot;</span>)<br>    <span class="hljs-keyword">var</span> fish = Fish(<span class="hljs-string">&quot;smallFish&quot;</span>)<br>    <span class="hljs-keyword">var</span> fishManJack = FishMan(<span class="hljs-string">&quot;Jack&quot;</span>)<br>    <span class="hljs-keyword">var</span> fishManTonny = FishMan(<span class="hljs-string">&quot;Tonny&quot;</span>)<br>    <span class="hljs-keyword">var</span> fishManMash = FishMan(<span class="hljs-string">&quot;Mash&quot;</span>)<br>    <span class="hljs-keyword">var</span> shark = Shark(<span class="hljs-string">&quot;Onil&quot;</span>)<br>    fish.addObserver(fishManJack)<br>    fish.addObserver(fishManTonny)<br>    fish.addObserver(fishManMash)<br>    fish.addObserver(shark)<br>    fish.deleteObserver(fishManJack)<br>    fish.eating(<span class="hljs-string">&quot;smallFish&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>1、抽象的observer接口，方便多个观察者调用；</p><p>2、class observable存储所有的观察者对象，有list存储观察者，addObserver()添加观察者，deleteObservable()删除观察者，notifyObserver()将list中的observers.notify(), notify()是抽象后的接口, 实现的方法体在每个具体的观察者如fishMan、shark等类中。</p><p>3、init Observable Fish, init Observers Fishman and Shark, 将观察者add进去被观察者父类中，然后调用被观察者eating方法，到Observable中的notifyObservers(), 再到Observer中的update(), 最后到达FishMan和Shark中的update()。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android-delegate委托模式</title>
    <link href="/2021/11/24/Android-delegate%E5%A7%94%E6%89%98%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/11/24/Android-delegate%E5%A7%94%E6%89%98%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>委托模式，与java继承不同的是，它体现的是代码组合的思想。解决问题思路是将委托对象中的某些操作交给其他被委托对象。可以将代码分离，使得某个对象不是那么臃肿。</p><p>这是最简单的委托模式：</p><p>Print 中的 fun print()被委托给RealPrint，fun print()打印。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> print = Print()<br>    print.print()<br>&#125;<br><span class="hljs-comment">//委托模式。将某个对象中的操作委托给其他对象，是代码组合的思想</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealPrint</span>() &#123;<br>    <span class="hljs-comment">//被委托者</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span> &#123;<br>        print(<span class="hljs-string">&quot;yeah, it is realPrint&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Print</span>() &#123;<br>    <span class="hljs-comment">//委托者</span><br>    <span class="hljs-keyword">var</span> realPrint: RealPrint = RealPrint()<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span> &#123;<br>        realPrint.print()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用接口实现委托是很常见的一种模式。</p><p>1、委托类实现接口方法，然后创建接口引用去掉用接口方法。</p><p>2、委托类中function创建被委托类instance.</p><p>3、被委托类实现接口，接口function中具体执行代码。</p><p>4、委托类切换interface引用instance, 执行function.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">var</span> executeMe:ExecuteMe = ExecuteMe()<br>    executeMe.toDelegateFirst()<br>    executeMe.delegateFirst()<br>    executeMe.delegateSecond()<br>    executeMe.toDelegateSecond()<br>    executeMe.delegateFirst()<br>    executeMe.delegateSecond()<br>&#125;<br><br><span class="hljs-comment">//使用接口的委托模式</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Delegateinterface</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">delegateFirst</span><span class="hljs-params">()</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">delegateSecond</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-comment">//被委托类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DelegateFirst</span>:<span class="hljs-type">Delegateinterface</span>&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">delegateFirst</span><span class="hljs-params">()</span></span> &#123;<br>        print(<span class="hljs-string">&quot;yeah! it&#x27;s <span class="hljs-subst">$&#123;javaClass.name&#125;</span> delegateFirst()&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">delegateSecond</span><span class="hljs-params">()</span></span> &#123;<br>        print(<span class="hljs-string">&quot;yeah! it&#x27;s <span class="hljs-subst">$&#123;javaClass.name&#125;</span> delegateSecond()&quot;</span>)<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//被委托类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DelegateSecond</span>:<span class="hljs-type">Delegateinterface</span>&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">delegateFirst</span><span class="hljs-params">()</span></span> &#123;<br>        print(<span class="hljs-string">&quot;yeah! it&#x27;s <span class="hljs-subst">$&#123;javaClass.simpleName&#125;</span> delegateFirst()&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">delegateSecond</span><span class="hljs-params">()</span></span> &#123;<br>        print(<span class="hljs-string">&quot;yeah! it&#x27;s <span class="hljs-subst">$&#123;javaClass.name&#125;</span> delegateSecond()&quot;</span>)<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//委托类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecuteMe</span>: <span class="hljs-type">Delegateinterface</span>&#123;<br>    <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> delegateinterface:Delegate<span class="hljs-keyword">interface</span><br>    <span class="hljs-title class_">override</span> <span class="hljs-title">fun</span> <span class="hljs-title">delegateFirst</span>() &#123;<br>        delegateinterface.delegateFirst()<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">delegateSecond</span><span class="hljs-params">()</span></span> &#123;<br>        delegateinterface.delegateSecond()<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toDelegateFirst</span><span class="hljs-params">()</span></span>&#123;<br>        delegateinterface = DelegateFirst()<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toDelegateSecond</span><span class="hljs-params">()</span></span>&#123;<br>        delegateinterface = DelegateSecond()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-github打造个人网站</title>
    <link href="/2021/11/21/Hexo-github%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <url>/2021/11/21/Hexo-github%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>使用hexo+github打造个人网站：</p><p>1、安装node.js。输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><p>2、安装git，github账户new repo.</p><p>输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，README初始化也要勾上。然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，点击那个链接，就会出现自己的网页啦.</p><p>3、安装hero.</p><p>输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="https://link.zhihu.com/?target=http://localhost:4000/">http://localhost:4000/</a>，就可以看到我们的博客啦.</p><p>4、写文章并发布</p><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p><p>然后打开<code>D:\study\program\blog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><p>5、theme选择。</p><p>github上面很多的theme download, 选择 一个自己最喜欢的然后放进去就可以啦。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode-TwoSum算法</title>
    <link href="/2021/05/14/Leetcode-TwoSum/"/>
    <url>/2021/05/14/Leetcode-TwoSum/</url>
    
    <content type="html"><![CDATA[<p>Two Sum<br>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.<br>You may assume that each input would have exactly one solution, and you may not use the same element twice.<br>You can return the answer in any order.</p><p>Example 1:<br>Input: nums &#x3D; [2,7,11,15], target &#x3D; 9<br>Output: [0,1]<br>Output: Because nums[0] + nums[1] &#x3D;&#x3D; 9, we return [0, 1].</p><p>Example 2:<br>Input: nums &#x3D; [3,2,4], target &#x3D; 6<br>Output: [1,2]</p><p>Example 3:<br>Input: nums &#x3D; [3,3], target &#x3D; 6<br>Output: [0,1]</p><p>Constraints:<br>2 &lt;&#x3D; nums.length &lt;&#x3D; 103<br>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109<br>-109 &lt;&#x3D; target &lt;&#x3D; 109<br>Only one valid answer exists.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddCount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> numsArray[] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;<br>        System.out.println(Arrays.toString(twoSum(numsArray, target)));<br>    &#125;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> result[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length-<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>+i; j &lt; nums.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i]+nums[j]==target)&#123;<br>                    result[<span class="hljs-number">0</span>]=i;<br>                    result[<span class="hljs-number">1</span>]=j;<br>                    <span class="hljs-keyword">return</span> result;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>    Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">complement</span> <span class="hljs-operator">=</span> target - nums[i];<br>        <span class="hljs-keyword">if</span> (map.containsKey(complement)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; map.get(complement), i &#125;;<br>        &#125;<br>        map.put(nums[i], i);<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;No two sum solution&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android-jetpack系列-lifecycle</title>
    <link href="/1979/11/30/Android-jetpack%E7%B3%BB%E5%88%97-lifecycle/"/>
    <url>/1979/11/30/Android-jetpack%E7%B3%BB%E5%88%97-lifecycle/</url>
    
    <content type="html"><![CDATA[<h1 id="Lifecycle的使用"><a href="#Lifecycle的使用" class="headerlink" title="Lifecycle的使用"></a>Lifecycle的使用</h1><p>Android jetpack系列有很多组件，lifecycle属于感知生命周期的组件，下面通常代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> : <span class="hljs-type">AppCompatActivity</span>() &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> myLocationListener: MyLocationListener<br>    <span class="hljs-keyword">val</span> DITAG = <span class="hljs-string">&quot;debug&quot;</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        setContentView(R.layout.activity_main)<br>        myLocationListener = MyLocationListener(applicationContext)&#123;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onStart</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onStart()<br>        myLocationListener.start()<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onStop</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onStop()<br>        myLocationListener.stop()<br>    &#125;<br><br>   <span class="hljs-keyword">inner</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLocationListener</span>(<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> context: Context,<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> callback: (Location) -&gt; <span class="hljs-built_in">Unit</span><br>    ) &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-comment">//connect to locationListener</span><br>            Log.d(DITAG, <span class="hljs-string">&quot;locationListener start&quot;</span>)<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-comment">//disconnect to locationListener</span><br>            Log.d(DITAG, <span class="hljs-string">&quot;locationListener stop&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是Android很常见的listener定义，activity onstart中listener start, activity onstop时listener stop, callback中的function可以通过start和stop来控制。</p><p>问题在于：</p><p>1、如果activity中有很多listener start or stop的function, 不止一个listener, 那在activity生命周期中方法就会特别多非常难以维护。这在产品后期的迭代开发中时致命的。</p><p>2、如果activity onstart需要长时间的启动，而onstop在onstart之前执行，那就会导致组件留存下来。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivityLifecycle</span> : <span class="hljs-type">AppCompatActivity</span>() &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> binding: ActivityMainLifecycleBinding<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> myLocationListener: MyLocationListener<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> DITAG = <span class="hljs-string">&quot;debug&quot;</span><br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br><br>        binding = ActivityMainLifecycleBinding.inflate(layoutInflater)<br>        setContentView(binding.root)<br>        myLocationListener = MyLocationListener(applicationContext, lifecycle)&#123;<br>            <span class="hljs-comment">//update ui</span><br>        &#125;<br>        lifecycle.addObserver(myLocationListener)<br>        myLocationListener.enable()<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onStart</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onStart()<br>        Log.d(DITAG, <span class="hljs-string">&quot;activity onstart&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onStop</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onStop()<br>        Log.d(DITAG, <span class="hljs-string">&quot;activity onstop&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">inner</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLocationListener</span>(<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> context: Context,<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> liftcycle: Lifecycle,<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> callback: (Location) -&gt; <span class="hljs-built_in">Unit</span><br>    ) :DefaultLifecycleObserver&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> enabled = <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onStart</span><span class="hljs-params">(owner: <span class="hljs-type">LifecycleOwner</span>)</span></span> &#123;<br>            <span class="hljs-keyword">super</span>.onStart(owner)<br>            Log.d(DITAG, <span class="hljs-string">&quot;onstart &quot;</span>)<br>            <span class="hljs-keyword">if</span> (enabled)&#123;<br>                <span class="hljs-comment">//connect</span><br><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">enable</span><span class="hljs-params">()</span></span>&#123;<br>            enabled = <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">if</span> (liftcycle.currentState.isAtLeast(Lifecycle.State.STARTED))&#123;<br>                <span class="hljs-comment">//connect if not connected</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onStop</span><span class="hljs-params">(owner: <span class="hljs-type">LifecycleOwner</span>)</span></span> &#123;<br>            <span class="hljs-keyword">super</span>.onStop(owner)<br>            <span class="hljs-comment">//disconnect if connected</span><br>            Log.d(DITAG, <span class="hljs-string">&quot;onstop &quot;</span>)<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用lifecycle就只需要lifecycle.addObserver(instance implement defautlifecycleObserver),然后override onstart onstop, 就可以初始化和结束关闭资源回收了，不需要在activity中去写很多代码，直接从view中代码独立出来，非常容易维护。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android-okhttp3单独使用</title>
    <link href="/1979/11/30/Android-okhttp3%E5%8D%95%E7%8B%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/1979/11/30/Android-okhttp3%E5%8D%95%E7%8B%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p> 最近使用了okhttp3 + mvvm的架构框架，也了解了volley，httpclient，async-http等框架，这些框架之前有的使用过，比起okhttp3来说，okhttp3有各种自定义拦截器，这里介绍下okhttp的各种方法吧。</p><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><blockquote><p>构造request时候，直接吧参数拼成name&#x3D;xx&amp;pwd&#x3D;xx这种表单格式放在?后面。</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">request</span> = new Request.Builder().url(API.baseurl + url + <span class="hljs-string">&quot;?&quot;</span> + stringJson).header(<span class="hljs-string">&quot;ACCESS_TOKEN&quot;</span>, Utils.getToken(activity)).build()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><blockquote><p>requestbody.create(stringjson,JSON)，stringjson是json格式的请求参数，后面的JSON是互联网媒体类型。</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">if</span> (stringJson == <span class="hljs-keyword">null</span>) &#123;<br>body = RequestBody.<span class="hljs-keyword">create</span>(&quot;&quot;, <span class="hljs-type">JSON</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>body = RequestBody.<span class="hljs-keyword">create</span>(stringJson, <span class="hljs-type">JSON</span>);<br>&#125;<br>request = <span class="hljs-built_in">new</span> Request.Builder().url(API.baseurl + url).post(body).<span class="hljs-keyword">header</span>(&quot;ACCESS_TOKEN&quot;, Utils.getToken(activity)).build();<br></code></pre></td></tr></table></figure><h2 id="上传媒体类型"><a href="#上传媒体类型" class="headerlink" title="上传媒体类型"></a>上传媒体类型</h2><blockquote><p>也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示。具体请求中的媒体类型信息。用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件。</p></blockquote><p> text&#x2F;html：HTML格式</p><p> text&#x2F;pain：纯文本格式</p><p> image&#x2F;jpeg：jpg图片格式</p><p> application&#x2F;json：JSON数据格式</p><p> application&#x2F;octet-stream：二进制流数据（如常见的文件下载）</p><p> application&#x2F;x-www-form-urlencoded：form表单encType属性的默认格式，表单数据将以key&#x2F;value的形式发送到服务端</p><p> multipart&#x2F;form-data：表单上传文件的格式</p><h2 id="请求返回"><a href="#请求返回" class="headerlink" title="请求返回"></a>请求返回</h2><blockquote><p>异步返回</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">enqueue</span> <span class="hljs-selector-tag">client</span><span class="hljs-selector-class">.newCall</span>(request)<span class="hljs-selector-class">.enqueue</span>(new <span class="hljs-built_in">Callback</span>() &#123;<br>            <span class="hljs-variable">@Override</span><br>            public void <span class="hljs-built_in">onFailure</span>(Call call, IOException e) &#123;<br>            &#125;<br>            <span class="hljs-variable">@Override</span><br>            public void <span class="hljs-built_in">onResponse</span>(Call call, Response response) throws IOException &#123;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><blockquote><p>初始化okhttpclient并设置默认信任所有证书，添加拦截器，为了不断更新token加在请求头给服务端，所以我的初始化代码是这样写的.</p></blockquote><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">private</span> OkHttpClient okhttpclient(Activity activity) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">client</span> == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">client</span> = <span class="hljs-keyword">new</span> OkHttpClient.Builder().<br>                        sslSocketFactory(createSSLSocketFactory(), <span class="hljs-keyword">new</span> TrustAllCerts())<br>                        .hostnameVerifier(<span class="hljs-keyword">new</span> TrustAllHostnameVerifier()).addInterceptor(interceptor(activity))<br>                        .build();<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">client</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Utils.log(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;okhttp https连接问题&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>拦截器就是为了拿到服务端response里面的token和打印各种请求和返回，代码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpLogInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interceptor</span> &#123;<br>    <span class="hljs-comment">//    private static final String TAG = HttpLogInterceptor.class.getSimpleName();</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Charset</span> <span class="hljs-variable">UTF8</span> <span class="hljs-operator">=</span> Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-keyword">private</span> Activity activity;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpLogInterceptor</span><span class="hljs-params">(Activity activity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.activity = activity;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">intercept</span><span class="hljs-params">(Chain chain)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> chain.request();<br>        <span class="hljs-type">RequestBody</span> <span class="hljs-variable">requestBody</span> <span class="hljs-operator">=</span> request.body();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (requestBody != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Buffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>();<br>            requestBody.writeTo(buffer);<br>            <span class="hljs-type">Charset</span> <span class="hljs-variable">charset</span> <span class="hljs-operator">=</span> UTF8;<br>            <span class="hljs-type">MediaType</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> requestBody.contentType();<br>            <span class="hljs-keyword">if</span> (contentType != <span class="hljs-literal">null</span>) &#123;<br>                charset = contentType.charset(UTF8);<br>            &#125;<br>            body = buffer.readString(charset);<br>        &#125;<br>        Log.d(<span class="hljs-string">&quot;xuedi&quot;</span>, <span class="hljs-string">&quot;发送请求: method：&quot;</span> + request.method()<br>                + <span class="hljs-string">&quot;\nurl：&quot;</span> + request.url()<br>                + <span class="hljs-string">&quot;\n请求头：&quot;</span> + request.headers()<br>                + <span class="hljs-string">&quot;\n请求参数: &quot;</span> + body);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startNs</span> <span class="hljs-operator">=</span> System.nanoTime();<br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> chain.proceed(request);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">tookMs</span> <span class="hljs-operator">=</span> TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs);<br>        <span class="hljs-keyword">if</span> (response.header(<span class="hljs-string">&quot;ACCESS_TOKEN&quot;</span>)!=<span class="hljs-literal">null</span>) &#123;<br>            UserLogin.getInstance().setToken(response.header(<span class="hljs-string">&quot;ACCESS_TOKEN&quot;</span>));<br>            SharePref.put(activity, API.token, response.header(<span class="hljs-string">&quot;ACCESS_TOKEN&quot;</span>));<br>        &#125;<br>        <span class="hljs-type">ResponseBody</span> <span class="hljs-variable">responseBody</span> <span class="hljs-operator">=</span> response.body();<br>        String rBody;<br>        <span class="hljs-type">BufferedSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> responseBody.source();<br>        source.request(Long.MAX_VALUE);<br>        <span class="hljs-type">Buffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> source.buffer();<br>        <span class="hljs-type">Charset</span> <span class="hljs-variable">charset</span> <span class="hljs-operator">=</span> UTF8;<br>        <span class="hljs-type">MediaType</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> responseBody.contentType();<br>        <span class="hljs-keyword">if</span> (contentType != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                charset = contentType.charset(UTF8);<br>            &#125; <span class="hljs-keyword">catch</span> (UnsupportedCharsetException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        rBody = buffer.clone().readString(charset);<br>        Log.d(<span class="hljs-string">&quot;xuedi&quot;</span>, <span class="hljs-string">&quot;收到: method：&quot;</span> + request.method()+<br>                <span class="hljs-string">&quot;\n响应header：&quot;</span>+response.header(<span class="hljs-string">&quot;ACCESS_TOKEN&quot;</span>)<br>                +<span class="hljs-string">&quot;\n响应url:&quot;</span>+response.request().url()<br>                + <span class="hljs-string">&quot;\n响应body: &quot;</span> + rBody);<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里面就是重写的intercept(Chain chain),chain.request和chain.response拿到就可以打印了，这是Chain接口方法：</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Chain</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">call</span><span class="hljs-params">()</span></span>: okhttp3.Call<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">connectTimeoutMillis</span><span class="hljs-params">()</span></span>: kotlin.<span class="hljs-built_in">Int</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">connection</span><span class="hljs-params">()</span></span>: okhttp3.Connection?<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">proceed</span><span class="hljs-params">(request: <span class="hljs-type">okhttp3</span>.<span class="hljs-type">Request</span>)</span></span>: okhttp3.Response<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">readTimeoutMillis</span><span class="hljs-params">()</span></span>: kotlin.<span class="hljs-built_in">Int</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">request</span><span class="hljs-params">()</span></span>: okhttp3.Request<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">withConnectTimeout</span><span class="hljs-params">(timeout: <span class="hljs-type">kotlin</span>.<span class="hljs-type">Int</span>, unit: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">concurrent</span>.<span class="hljs-type">TimeUnit</span>)</span></span>: okhttp3.Interceptor.Chain<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">withReadTimeout</span><span class="hljs-params">(timeout: <span class="hljs-type">kotlin</span>.<span class="hljs-type">Int</span>, unit: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">concurrent</span>.<span class="hljs-type">TimeUnit</span>)</span></span>: okhttp3.Interceptor.Chain<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">withWriteTimeout</span><span class="hljs-params">(timeout: <span class="hljs-type">kotlin</span>.<span class="hljs-type">Int</span>, unit: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">concurrent</span>.<span class="hljs-type">TimeUnit</span>)</span></span>: okhttp3.Interceptor.Chain<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">writeTimeoutMillis</span><span class="hljs-params">()</span></span>: kotlin.<span class="hljs-built_in">Int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>拿到保存在本地，然后返回给服务端，这就是一次完整的请求。当然还有多类型上传，formbody上传等等。官方文档：</p><p><a href="https://square.github.io/okhttp">https://square.github.io/okhttp</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android-源码中的单例模式</title>
    <link href="/1979/11/30/Android-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/1979/11/30/Android-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式介绍"><a href="#单例模式介绍" class="headerlink" title="单例模式介绍"></a>单例模式介绍</h1><blockquote><p>介绍：单例模式属于项目必用模式之一，因为项目中肯定要有user、database、network这些对象，这些对象一是创建起来耗费大量资源，而是网络请求中需要队列去处理请求（因为会有多个请求的状况），所以我们必须保证只有一个对象。</p><p>定义：确保一个类只有一个实例，并且自行实例化并向整个系统提供这个实例。</p><p>使用场景：创建一个对象消耗的资源过多。</p><p>关键点：</p><p>· 构造函数不对外开放，一般为private;</p><p>· 通过一个静态方法或者枚举返回单例类对象；</p><p>· 确保单例类对象有且仅有一个，尤其在多线程环境下；</p><p>· 确保单例类对象在反序列化时不会重新构建对象。</p></blockquote><h1 id="几种常用的单例模式"><a href="#几种常用的单例模式" class="headerlink" title="几种常用的单例模式"></a>几种常用的单例模式</h1><blockquote><p>饿汉模式，不建议</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHungryMan</span> &#123;<br>    <span class="hljs-comment">//构造函数私有</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonHungryMan</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>    <span class="hljs-comment">//直接创建对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingletonHungryMan</span> <span class="hljs-variable">singletonHungryMan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonHungryMan</span>();<br>    <span class="hljs-comment">//静态public提供外部访问</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonHungryMan <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> singletonHungryMan;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>懒汉模式，不建议</p><p>每次使用的时候都有synchronized同步，造成资源的浪费</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonLazyMan</span> &#123;<br>    <span class="hljs-comment">//构造函数private,无法new</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonLazyMan</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingletonLazyMan singletonLazyMan;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> SingletonLazyMan <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (singletonLazyMan == <span class="hljs-literal">null</span>)&#123;<br>            singletonLazyMan = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonLazyMan</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> singletonLazyMan;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Double Check Lock</p><p>用的做多的单例模式，volatile防止指令重拍，避免dcl失效(给对象分配内存–使用构造函数，初始化成员字段，—对象指向内存空间，2、3具有不确定性)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonDCL</span> &#123;<br>    <span class="hljs-comment">//构造函数private,无法new</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonDCL</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">SingletonDCL</span> <span class="hljs-variable">singletonDCL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDCL</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDCL <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//第一次判空，为了检验当前是否有对象</span><br>        <span class="hljs-keyword">if</span> (singletonDCL==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (SingletonDCL.class)&#123;<br>                <span class="hljs-comment">//第二次判空，第一次初始化的时候，因为多个线程都跑到了这里，所以为了避免重复创建，会再次判空</span><br>                <span class="hljs-keyword">if</span> (singletonDCL == <span class="hljs-literal">null</span>)&#123;<br>                    singletonDCL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDCL</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singletonDCL;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>静态内部类单例，dcl优化是丑陋的，不建议使用，建议如下</p><p>第一次加载类并不会初始化对象，只有第一次调用才会导致对象初始化</p><p>加入readResolve() 反序列化也不会生成新的实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonInnerClass</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonInnerClass</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    静态内部类</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHolder</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SingletonInnerClass</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonInnerClass</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonInnerClass <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> SingletonHolder.instance;<br>    &#125;<br>      <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">readResolve</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> SingletonHolder.instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>枚举单例，反序列化也不会生成新的实例</p><p>容器单例等</p></blockquote><h1 id="Android源码中的单例模式"><a href="#Android源码中的单例模式" class="headerlink" title="Android源码中的单例模式"></a>Android源码中的单例模式</h1><blockquote><p>接下来通过Android源码中的context和layoutinflater来认识Android中的单例模式，因为篇幅较长和很多源码，所以放到下篇。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android-面向对象6大原则源码设计模式</title>
    <link href="/1979/11/30/Android-%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A16%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <url>/1979/11/30/Android-%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A16%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h3 id="单一职责原则——优化代码第一步"><a href="#单一职责原则——优化代码第一步" class="headerlink" title="单一职责原则——优化代码第一步"></a>单一职责原则——优化代码第一步</h3><p>Single Responsibility Principle, SRP. 就一个类而言，应该仅有一个能引起他变化的原因。最重要的是，要能划分一个类具体的职责，2个完全不同的功能代码不能放在同一个类中，会引起类文件冗余庞大，后面的代码会越来越难以维护，这是优化代码第一步。例如我们去写一个缓存图片的功能。</p><p>​<code>1、下载图片</code> <code>2、缓存图片</code></p><p>在这里基础的用3个类文件去写，download、cache、tools，写在一个文件就会显得特别的大，这样后续开发看着就头大，找代码就要找半天，写3个文件非常简洁，可以在把这三个文件放到一个package里面去。这样不管开发还是后续维护都很容易。</p><h3 id="开闭原则——-让程序稳定和灵活"><a href="#开闭原则——-让程序稳定和灵活" class="headerlink" title="开闭原则——-让程序稳定和灵活"></a>开闭原则——-让程序稳定和灵活</h3><p>Open Close Principle，OCP。代码文件对于修改是封闭的，但对于扩展是开放的。也就是说，尽可能的不去修改原来旧文件，因为一旦修改，别的对象调用会出现问题，因为你不知道这个函数方法在哪里调用会被调用几次（总不能一直点击去查看吧，或者写很多个注释）。但是对象调用肯定会使用到当前类文件，为了满足后续需求，所以他的拓展性是要开放的，一般使用接口满足拓展性。</p><h3 id="里氏替换原则—–构建拓展性更好的系统"><a href="#里氏替换原则—–构建拓展性更好的系统" class="headerlink" title="里氏替换原则—–构建拓展性更好的系统"></a>里氏替换原则—–构建拓展性更好的系统</h3><p>所有引用基类的地方必须能透明的使用其子类的对象。面向对象的三大特性：封装、继承、多态。里氏替换原则就是基于多态和继承，只要父类出现的地方子类就可以出现，而且替换为子类也不会有任何的错误和异常。其实就是一种抽象。看下面一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Window</span> <span class="hljs-variable">window</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Window</span>();<br>        window.show(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>());<br>        window.show(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextView</span>());<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(View child)</span>&#123;<br>            child.mesure();<br>            child.draw();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//写一个抽象view,draw交给子类自己实现，mesure公用代码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">View</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mesure</span><span class="hljs-params">()</span>&#123;<br>            print(<span class="hljs-string">&quot;view mesure&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span>;<br>    &#125;<br>    <span class="hljs-comment">//写一个Button</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">View</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>            print(<span class="hljs-string">&quot;button draw&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//新建一个TextView文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TextView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">View</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>            print(<span class="hljs-string">&quot;textview draw&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(message);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//执行结果</span><br>view mesure<br>button draw<br>view mesure<br>textview draw<br></code></pre></td></tr></table></figure><p><em>可以仔细看看这段代码，Window中的show(View child),在这里传入的是View的子类Button和Textview对象。</em></p><ul><li><p>mesure()是子类调用父类方法，这是一个公共的方法，因为你不用每个view子类都自己去测量，在父View中共用一套代码执行就完毕。</p></li><li><p>draw()是子类方法，子类继承抽象父类必须实现的抽象方法，这里面每个View都有自己的绘制方法，所以需要每个子类都去自定义。</p><p>这就是里氏替换原则，用的正是面向对象三大特性之二的继承和多态。继承是父类里面的共有方法，多态体现在任何使用基类的地方都可以创建其子类对象。</p><p><em>里氏替换原理就是抽象，抽象又依赖继承这个特性，继承的优点</em></p></li><li><p>代码重用，减少创建类的成本，每个子类都有父类的属性和方法；</p></li><li><p>子类和父类相似，但和父类有区别；</p></li><li><p>提高代码的可扩展性</p><p><em>继承的缺点</em></p></li><li><p>继承是侵入性的，只要继承就必须拥有父类的所有属性和方法；</p></li><li><p>可能造成子类的代码冗余，因为子类必须拥有父类的属性和方法；</p></li></ul><h3 id="依赖倒置原则——让项目拥有变换的能力"><a href="#依赖倒置原则——让项目拥有变换的能力" class="headerlink" title="依赖倒置原则——让项目拥有变换的能力"></a>依赖倒置原则——让项目拥有变换的能力</h3><p>依赖倒置原则是一种特定的解藕形式，使得高层次模块不依赖于低层次模块的实现细节，依赖模块被颠倒了。</p><p>1、高层模块不应该依赖底层模块，两者都应该依赖其抽象；</p><p>2、抽象不应该依赖细节；</p><p>3、细节应该依赖抽象；</p><blockquote><p>在java中，抽象就是指的接口或者抽象类，两者都是不能背实例化的；细节就是实现类，实现接口或者继承抽象类产生的类就是细节，是可以被实例化的。高层模块就是调用端，底层模块就是细节类。</p></blockquote><p><u>模块间的依赖通过抽象产生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的，也就是面向接口或者面向抽象编程</u></p><h3 id="接口隔离原则——-系统拥有更高的灵活度"><a href="#接口隔离原则——-系统拥有更高的灵活度" class="headerlink" title="接口隔离原则——-系统拥有更高的灵活度"></a>接口隔离原则——-系统拥有更高的灵活度</h3><p>ISP定义：客户端不应该依赖他不需要的接口，或者类之间的关系应该建立在最小的接口上。接口隔离的原则是让庞大冗余的接口拆分为更小、更加精细的接口，让接口尽可能的小。<em>这个在实际的引用场景还是常见的，如closeable.close()等</em>。</p><p><em>单一职责、开闭原则、里氏替换、接口隔离和依赖倒置这5个原则常见于Android源码之中，其特点为：抽象、单一职责、最小化。也就是说，类之间的依赖关系应该基于抽象，单个类符合单一职责，单个类和方法也要最小化。</em></p><h3 id="迪米特原则——更好的可扩展性"><a href="#迪米特原则——更好的可扩展性" class="headerlink" title="迪米特原则——更好的可扩展性"></a>迪米特原则——更好的可扩展性</h3><p>最少知识原则，一个对象对其他对象应该有最少的了解，一个类应该对和自己耦合的类知道的最少。</p><blockquote><p>这个实际应用也很广泛，多个文件相互通信时，不应该一股脑全部都写出来，而是确定一个方向，和当前类耦合度最低，调用的文件越少愈好。从mvp到mvvm不就是这样的设计模式🐎</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>应用实际开发中，最难的不是初始开发工作，而是后续的迭代和升级，越来越多的代码文件加入其中，类文件越来越臃肿时。这时候就是考验对这6大原则掌握的时候了，不管是重构还是新加入的文件，遵循这6大原则会让代码简介、清晰、灵活和稳定。所谓高内聚、低耦合和高扩展度就是如此。阅读Android源码设计模式第一步，就是必须对这些基本原理理解透彻。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android-从LayoutInflater.from(context)看源码</title>
    <link href="/1979/11/30/Android-%E4%BB%8ELayoutInflater-from-context-%E7%9C%8B%E6%BA%90%E7%A0%81/"/>
    <url>/1979/11/30/Android-%E4%BB%8ELayoutInflater-from-context-%E7%9C%8B%E6%BA%90%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>在Android中，我们经常通过Context获取系统级别的服务，比如WindowsManagerService、ActivityManagerService等，但我们今天使用RecyclerView.Adapter里面onCreateViewHolder来开始查看代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> CarSelectorViewHolder <span class="hljs-title function_">onCreateViewHolder</span><span class="hljs-params">(ViewGroup parent, <span class="hljs-type">int</span> viewType)</span> &#123;<br>            <span class="hljs-type">View</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> LayoutInflater.from(context).inflate(R.layout.adapter_carselectdialog, <span class="hljs-literal">null</span>);<br>            <span class="hljs-type">CarSelectorViewHolder</span> <span class="hljs-variable">holder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CarSelectorViewHolder</span>(view);<br>            <span class="hljs-keyword">return</span> holder;<br>        &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Obtains the LayoutInflater from the given context.</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//点进去发现是 context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LayoutInflater <span class="hljs-title function_">from</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-type">LayoutInflater</span> <span class="hljs-variable">LayoutInflater</span> <span class="hljs-operator">=</span><br>                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);<br>        <span class="hljs-keyword">if</span> (LayoutInflater == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(<span class="hljs-string">&quot;LayoutInflater not found.&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> LayoutInflater;<br>    &#125;<br><br><span class="hljs-comment">//再次点击就是一个抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-meta">@Nullable</span> Object <span class="hljs-title function_">getSystemService</span><span class="hljs-params">(<span class="hljs-meta">@ServiceName</span> <span class="hljs-meta">@NonNull</span> String name)</span>;<br></code></pre></td></tr></table></figure><p>下面就用Activity里面来分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="hljs-string">&quot;ActivityThreadMain&quot;</span>);<br><br>       <span class="hljs-comment">// Install selective syscall interception</span><br>       AndroidOs.install();<br><br>       <span class="hljs-comment">// CloseGuard defaults to true and can be quite spammy.  We</span><br>       <span class="hljs-comment">// disable it here, but selectively enable it later (via</span><br>       <span class="hljs-comment">// StrictMode) on debug builds, but using DropBox, not logs.</span><br>       CloseGuard.setEnabled(<span class="hljs-literal">false</span>);<br><br>       Environment.initForCurrentUser();<br><br>       <span class="hljs-comment">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span><br>       <span class="hljs-keyword">final</span> <span class="hljs-type">File</span> <span class="hljs-variable">configDir</span> <span class="hljs-operator">=</span> Environment.getUserConfigDirectory(UserHandle.myUserId());<br>       TrustedCertificateStore.setDefaultUserDirectory(configDir);<br><br>       <span class="hljs-comment">// Call per-process mainline module initialization.</span><br>       initializeMainlineModules();<br><br>       Process.setArgV0(<span class="hljs-string">&quot;&lt;pre-initialized&gt;&quot;</span>);<br><br>       Looper.prepareMainLooper();<br><br>       <span class="hljs-comment">// Find the value for &#123;@link #PROC_START_SEQ_IDENT&#125; if provided on the command line.</span><br>       <span class="hljs-comment">// It will be in the format &quot;seq=114&quot;</span><br>       <span class="hljs-type">long</span> <span class="hljs-variable">startSeq</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">if</span> (args != <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> args.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>               <span class="hljs-keyword">if</span> (args[i] != <span class="hljs-literal">null</span> &amp;&amp; args[i].startsWith(PROC_START_SEQ_IDENT)) &#123;<br>                   startSeq = Long.parseLong(<br>                           args[i].substring(PROC_START_SEQ_IDENT.length()));<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-type">ActivityThread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityThread</span>();<br>       thread.attach(<span class="hljs-literal">false</span>, startSeq);<br><br>       <span class="hljs-keyword">if</span> (sMainThreadHandler == <span class="hljs-literal">null</span>) &#123;<br>           sMainThreadHandler = thread.getHandler();<br>       &#125;<br><br>       <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123;<br>           Looper.myLooper().setMessageLogging(<span class="hljs-keyword">new</span><br>                   <span class="hljs-title class_">LogPrinter</span>(Log.DEBUG, <span class="hljs-string">&quot;ActivityThread&quot;</span>));<br>       &#125;<br><br>       <span class="hljs-comment">// End of event ActivityThreadMain.</span><br>       Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);<br>       Looper.loop();<br><br>       <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Main thread loop unexpectedly exited&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>1、创建ActivityThread，调用attach。主要看attach方法；</p><p>2、looper.prepareMainLooper()，looper.loop()；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-meta">@UnsupportedAppUsage</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(<span class="hljs-type">boolean</span> system, <span class="hljs-type">long</span> startSeq)</span> &#123;<br>       sCurrentActivityThread = <span class="hljs-built_in">this</span>;<br>       mSystemThread = system;<br>       <span class="hljs-keyword">if</span> (!system) &#123;<br>           android.ddm.DdmHandleAppName.setAppName(<span class="hljs-string">&quot;&lt;pre-initialized&gt;&quot;</span>,<br>                                                   UserHandle.myUserId());<br>           RuntimeInit.setApplicationObject(mAppThread.asBinder());<br>           <span class="hljs-keyword">final</span> <span class="hljs-type">IActivityManager</span> <span class="hljs-variable">mgr</span> <span class="hljs-operator">=</span> ActivityManager.getService();<br>           <span class="hljs-keyword">try</span> &#123;<br>               mgr.attachApplication(mAppThread, startSeq);<br>           &#125; <span class="hljs-keyword">catch</span> (RemoteException ex) &#123;<br>               <span class="hljs-keyword">throw</span> ex.rethrowFromSystemServer();<br>           &#125;<br>           <span class="hljs-comment">// Watch for getting close to heap limit.</span><br>           BinderInternal.addGcWatcher(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>               <span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                   <span class="hljs-keyword">if</span> (!mSomeActivitiesChanged) &#123;<br>                       <span class="hljs-keyword">return</span>;<br>                   &#125;<br>                   <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>                   <span class="hljs-type">long</span> <span class="hljs-variable">dalvikMax</span> <span class="hljs-operator">=</span> runtime.maxMemory();<br>                   <span class="hljs-type">long</span> <span class="hljs-variable">dalvikUsed</span> <span class="hljs-operator">=</span> runtime.totalMemory() - runtime.freeMemory();<br>                   <span class="hljs-keyword">if</span> (dalvikUsed &gt; ((<span class="hljs-number">3</span>*dalvikMax)/<span class="hljs-number">4</span>)) &#123;<br>                       <span class="hljs-keyword">if</span> (DEBUG_MEMORY_TRIM) Slog.d(TAG, <span class="hljs-string">&quot;Dalvik max=&quot;</span> + (dalvikMax/<span class="hljs-number">1024</span>)<br>                               + <span class="hljs-string">&quot; total=&quot;</span> + (runtime.totalMemory()/<span class="hljs-number">1024</span>)<br>                               + <span class="hljs-string">&quot; used=&quot;</span> + (dalvikUsed/<span class="hljs-number">1024</span>));<br>                       mSomeActivitiesChanged = <span class="hljs-literal">false</span>;<br>                       <span class="hljs-keyword">try</span> &#123;<br>                           ActivityTaskManager.getService().releaseSomeActivities(mAppThread);<br>                       &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>                           <span class="hljs-keyword">throw</span> e.rethrowFromSystemServer();<br>                       &#125;<br>                   &#125;<br>               &#125;<br>           &#125;);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-comment">// Don&#x27;t set application object here -- if the system crashes,</span><br>           <span class="hljs-comment">// we can&#x27;t display an alert, we just want to die die die.</span><br>           android.ddm.DdmHandleAppName.setAppName(<span class="hljs-string">&quot;system_process&quot;</span>,<br>                   UserHandle.myUserId());<br>           <span class="hljs-keyword">try</span> &#123;<br>               mInstrumentation = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instrumentation</span>();<br>               mInstrumentation.basicInit(<span class="hljs-built_in">this</span>);<br>               <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> ContextImpl.createAppContext(<br>                       <span class="hljs-built_in">this</span>, getSystemContext().mPackageInfo);<br>               mInitialApplication = context.mPackageInfo.makeApplication(<span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>               mInitialApplication.onCreate();<br>           &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>                       <span class="hljs-string">&quot;Unable to instantiate Application():&quot;</span> + e.toString(), e);<br>           &#125;<br>       &#125;<br><br>       ViewRootImpl.<span class="hljs-type">ConfigChangedCallback</span> <span class="hljs-variable">configChangedCallback</span><br>               <span class="hljs-operator">=</span> (Configuration globalConfig) -&gt; &#123;<br>           <span class="hljs-keyword">synchronized</span> (mResourcesManager) &#123;<br>               <span class="hljs-comment">// TODO (b/135719017): Temporary log for debugging IME service.</span><br>               <span class="hljs-keyword">if</span> (Build.IS_DEBUGGABLE &amp;&amp; mHasImeComponent) &#123;<br>                   Log.d(TAG, <span class="hljs-string">&quot;ViewRootImpl.ConfigChangedCallback for IME, &quot;</span><br>                           + <span class="hljs-string">&quot;config=&quot;</span> + globalConfig);<br>               &#125;<br><br>               <span class="hljs-comment">// We need to apply this change to the resources immediately, because upon returning</span><br>               <span class="hljs-comment">// the view hierarchy will be informed about it.</span><br>               <span class="hljs-keyword">if</span> (mResourcesManager.applyConfigurationToResourcesLocked(globalConfig,<br>                       <span class="hljs-literal">null</span> <span class="hljs-comment">/* compat */</span>)) &#123;<br>                   updateLocaleListFromAppContext(mInitialApplication.getApplicationContext(),<br>                           mResourcesManager.getConfiguration().getLocales());<br><br>                   <span class="hljs-comment">// This actually changed the resources! Tell everyone about it.</span><br>                   <span class="hljs-keyword">if</span> (mPendingConfiguration == <span class="hljs-literal">null</span><br>                           || mPendingConfiguration.isOtherSeqNewer(globalConfig)) &#123;<br>                       mPendingConfiguration = globalConfig;<br>                       sendMessage(H.CONFIGURATION_CHANGED, globalConfig);<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;;<br>       ViewRootImpl.addConfigCallback(configChangedCallback);<br>   &#125;<br><br><span class="hljs-meta">@UnsupportedAppUsage</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IActivityManager <span class="hljs-title function_">getService</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> IActivityManagerSingleton.get();<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>ActivityManager.getService()获取到是一个IActivityManager单例</p><p>attachApplication()调用在ActivityManagerService文件里面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachApplication</span><span class="hljs-params">(IApplicationThread thread, <span class="hljs-type">long</span> startSeq)</span> &#123;<br>       <span class="hljs-keyword">if</span> (thread == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityException</span>(<span class="hljs-string">&quot;Invalid application interface&quot;</span>);<br>       &#125;<br>       <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">callingPid</span> <span class="hljs-operator">=</span> Binder.getCallingPid();<br>           <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">callingUid</span> <span class="hljs-operator">=</span> Binder.getCallingUid();<br>           <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">origId</span> <span class="hljs-operator">=</span> Binder.clearCallingIdentity();<br>           attachApplicationLocked(thread, callingPid, callingUid, startSeq);<br>           Binder.restoreCallingIdentity(origId);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>Binder.restoreCallingIdentity(origId);是binder中的native方法</p><p>attachApplicationLocked(thread, callingPid, callingUid, startSeq);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Extended implementation of activity launch. Used when server requests a launch or relaunch.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Activity <span class="hljs-title function_">handleLaunchActivity</span><span class="hljs-params">(ActivityClientRecord r,</span><br><span class="hljs-params">        PendingTransactionActions pendingActions, Intent customIntent)</span> &#123;<br>    <span class="hljs-comment">// If we are getting ready to gc after going to the background, well</span><br>    <span class="hljs-comment">// we are back active so skip it.</span><br>    unscheduleGcIdler();<br>    mSomeActivitiesChanged = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">if</span> (r.profilerInfo != <span class="hljs-literal">null</span>) &#123;<br>        mProfiler.setProfiler(r.profilerInfo);<br>        mProfiler.startProfiling();<br>    &#125;<br><br>    <span class="hljs-comment">// Make sure we are running with the most recent config.</span><br>    handleConfigurationChanged(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">if</span> (localLOGV) Slog.v(<br>        TAG, <span class="hljs-string">&quot;Handling launch of &quot;</span> + r);<br><br>    <span class="hljs-comment">// Initialize before creating the activity</span><br>    <span class="hljs-keyword">if</span> (!ThreadedRenderer.sRendererDisabled<br>            &amp;&amp; (r.activityInfo.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class="hljs-number">0</span>) &#123;<br>        HardwareRenderer.preload();<br>    &#125;<br>    WindowManagerGlobal.initialize();<br><br>    <span class="hljs-comment">// Hint the GraphicsEnvironment that an activity is launching on the process.</span><br>    GraphicsEnvironment.hintActivityLaunch();<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Activity</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> performLaunchActivity(r, customIntent);<br><br>    <span class="hljs-keyword">if</span> (a != <span class="hljs-literal">null</span>) &#123;<br>        r.createdConfig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(mConfiguration);<br>        reportSizeConfigurations(r);<br>        <span class="hljs-keyword">if</span> (!r.activity.mFinished &amp;&amp; pendingActions != <span class="hljs-literal">null</span>) &#123;<br>            pendingActions.setOldState(r.state);<br>            pendingActions.setRestoreInstanceState(<span class="hljs-literal">true</span>);<br>            pendingActions.setCallOnPostCreate(<span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// If there was an error, for any reason, tell the activity manager to stop us.</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            ActivityTaskManager.getService()<br>                    .finishActivity(r.token, Activity.RESULT_CANCELED, <span class="hljs-literal">null</span>,<br>                            Activity.DONT_FINISH_TASK_WITH_ACTIVITY);<br>        &#125; <span class="hljs-keyword">catch</span> (RemoteException ex) &#123;<br>            <span class="hljs-keyword">throw</span> ex.rethrowFromSystemServer();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p> handleConfigurationChanged()、WindowManagerGlobal.initialize()和GraphicsEnvironment.hintActivityLaunch()等方法；</p><p>performLaunchActivity()；</p></blockquote><p><strong>构建activity核心代码，performLaunchActivity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  Core implementation of activity launch. */</span><br>  <span class="hljs-keyword">private</span> Activity <span class="hljs-title function_">performLaunchActivity</span><span class="hljs-params">(ActivityClientRecord r, Intent customIntent)</span> &#123;<br>      <span class="hljs-type">ActivityInfo</span> <span class="hljs-variable">aInfo</span> <span class="hljs-operator">=</span> r.activityInfo;<br>      <span class="hljs-keyword">if</span> (r.packageInfo == <span class="hljs-literal">null</span>) &#123;<br>          r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,<br>                  Context.CONTEXT_INCLUDE_CODE);<br>      &#125;<br><br>      <span class="hljs-type">ComponentName</span> <span class="hljs-variable">component</span> <span class="hljs-operator">=</span> r.intent.getComponent();<br>      <span class="hljs-keyword">if</span> (component == <span class="hljs-literal">null</span>) &#123;<br>          component = r.intent.resolveActivity(<br>              mInitialApplication.getPackageManager());<br>          r.intent.setComponent(component);<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (r.activityInfo.targetActivity != <span class="hljs-literal">null</span>) &#123;<br>          component = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComponentName</span>(r.activityInfo.packageName,<br>                  r.activityInfo.targetActivity);<br>      &#125;<br><br>      <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">appContext</span> <span class="hljs-operator">=</span> createBaseContextForActivity(r);<br>      <span class="hljs-type">Activity</span> <span class="hljs-variable">activity</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>          java.lang.<span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> appContext.getClassLoader();<br>          activity = mInstrumentation.newActivity(<br>                  cl, component.getClassName(), r.intent);<br>          StrictMode.incrementExpectedActivityCount(activity.getClass());<br>          r.intent.setExtrasClassLoader(cl);<br>          r.intent.prepareToEnterProcess();<br>          <span class="hljs-keyword">if</span> (r.state != <span class="hljs-literal">null</span>) &#123;<br>              r.state.setClassLoader(cl);<br>          &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;<br>              <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>                  <span class="hljs-string">&quot;Unable to instantiate activity &quot;</span> + component<br>                  + <span class="hljs-string">&quot;: &quot;</span> + e.toString(), e);<br>          &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-type">Application</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> r.packageInfo.makeApplication(<span class="hljs-literal">false</span>, mInstrumentation);<br><br>          <span class="hljs-keyword">if</span> (localLOGV) Slog.v(TAG, <span class="hljs-string">&quot;Performing launch of &quot;</span> + r);<br>          <span class="hljs-keyword">if</span> (localLOGV) Slog.v(<br>                  TAG, r + <span class="hljs-string">&quot;: app=&quot;</span> + app<br>                  + <span class="hljs-string">&quot;, appName=&quot;</span> + app.getPackageName()<br>                  + <span class="hljs-string">&quot;, pkg=&quot;</span> + r.packageInfo.getPackageName()<br>                  + <span class="hljs-string">&quot;, comp=&quot;</span> + r.intent.getComponent().toShortString()<br>                  + <span class="hljs-string">&quot;, dir=&quot;</span> + r.packageInfo.getAppDir());<br><br>          <span class="hljs-keyword">if</span> (activity != <span class="hljs-literal">null</span>) &#123;<br>              <span class="hljs-type">CharSequence</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> r.activityInfo.loadLabel(appContext.getPackageManager());<br>              <span class="hljs-type">Configuration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(mCompatConfiguration);<br>              <span class="hljs-keyword">if</span> (r.overrideConfig != <span class="hljs-literal">null</span>) &#123;<br>                  config.updateFrom(r.overrideConfig);<br>              &#125;<br>              <span class="hljs-keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG, <span class="hljs-string">&quot;Launching activity &quot;</span><br>                      + r.activityInfo.name + <span class="hljs-string">&quot; with config &quot;</span> + config);<br>              <span class="hljs-type">Window</span> <span class="hljs-variable">window</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>              <span class="hljs-keyword">if</span> (r.mPendingRemoveWindow != <span class="hljs-literal">null</span> &amp;&amp; r.mPreserveWindow) &#123;<br>                  window = r.mPendingRemoveWindow;<br>                  r.mPendingRemoveWindow = <span class="hljs-literal">null</span>;<br>                  r.mPendingRemoveWindowManager = <span class="hljs-literal">null</span>;<br>              &#125;<br><br>              <span class="hljs-comment">// Activity resources must be initialized with the same loaders as the</span><br>              <span class="hljs-comment">// application context.</span><br>              appContext.getResources().addLoaders(<br>                      app.getResources().getLoaders().toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourcesLoader</span>[<span class="hljs-number">0</span>]));<br><br>              appContext.setOuterContext(activity);<br>              activity.attach(appContext, <span class="hljs-built_in">this</span>, getInstrumentation(), r.token,<br>                      r.ident, app, r.intent, r.activityInfo, title, r.parent,<br>                      r.embeddedID, r.lastNonConfigurationInstances, config,<br>                      r.referrer, r.voiceInteractor, window, r.configCallback,<br>                      r.assistToken);<br><br>              <span class="hljs-keyword">if</span> (customIntent != <span class="hljs-literal">null</span>) &#123;<br>                  activity.mIntent = customIntent;<br>              &#125;<br>              r.lastNonConfigurationInstances = <span class="hljs-literal">null</span>;<br>              checkAndBlockForNetworkAccess();<br>              activity.mStartedActivity = <span class="hljs-literal">false</span>;<br>              <span class="hljs-type">int</span> <span class="hljs-variable">theme</span> <span class="hljs-operator">=</span> r.activityInfo.getThemeResource();<br>              <span class="hljs-keyword">if</span> (theme != <span class="hljs-number">0</span>) &#123;<br>                  activity.setTheme(theme);<br>              &#125;<br><br>              activity.mCalled = <span class="hljs-literal">false</span>;<br>              <span class="hljs-keyword">if</span> (r.isPersistable()) &#123;<br>                  mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                  mInstrumentation.callActivityOnCreate(activity, r.state);<br>              &#125;<br>              <span class="hljs-keyword">if</span> (!activity.mCalled) &#123;<br>                  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperNotCalledException</span>(<br>                      <span class="hljs-string">&quot;Activity &quot;</span> + r.intent.getComponent().toShortString() +<br>                      <span class="hljs-string">&quot; did not call through to super.onCreate()&quot;</span>);<br>              &#125;<br>              r.activity = activity;<br>              mLastReportedWindowingMode.put(activity.getActivityToken(),<br>                      config.windowConfiguration.getWindowingMode());<br>          &#125;<br>          r.setState(ON_CREATE);<br><br>          <span class="hljs-comment">// updatePendingActivityConfiguration() reads from mActivities to update</span><br>          <span class="hljs-comment">// ActivityClientRecord which runs in a different thread. Protect modifications to</span><br>          <span class="hljs-comment">// mActivities to avoid race.</span><br>          <span class="hljs-keyword">synchronized</span> (mResourcesManager) &#123;<br>              mActivities.put(r.token, r);<br>          &#125;<br><br>      &#125; <span class="hljs-keyword">catch</span> (SuperNotCalledException e) &#123;<br>          <span class="hljs-keyword">throw</span> e;<br><br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;<br>              <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>                  <span class="hljs-string">&quot;Unable to start activity &quot;</span> + component<br>                  + <span class="hljs-string">&quot;: &quot;</span> + e.toString(), e);<br>          &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> activity;<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p>1、activity &#x3D; mInstrumentation.newActivity(cl, component.getClassName(), r.intent); 创建activity</p><p>2、Application app &#x3D; r.packageInfo.makeApplication(false, mInstrumentation); 创建application</p><p>3、window &#x3D; r.mPendingRemoveWindow;创建window;</p><p>4、activity.attach()把window application window context 都加入</p><p>5、mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState); </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ContextImpl <span class="hljs-title function_">createBaseContextForActivity</span><span class="hljs-params">(ActivityClientRecord r)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> displayId;<br>    <span class="hljs-keyword">try</span> &#123;<br>        displayId = ActivityTaskManager.getService().getDisplayId(r.token);<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>        <span class="hljs-keyword">throw</span> e.rethrowFromSystemServer();<br>    &#125;<br><br>    <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">appContext</span> <span class="hljs-operator">=</span> ContextImpl.createActivityContext(<br>            <span class="hljs-built_in">this</span>, r.packageInfo, r.activityInfo, r.token, displayId, r.overrideConfig);<br><br>    <span class="hljs-comment">// The rotation adjustments must be applied before creating the activity, so the activity</span><br>    <span class="hljs-comment">// can get the adjusted display info during creation.</span><br>    <span class="hljs-keyword">if</span> (r.mPendingFixedRotationAdjustments != <span class="hljs-literal">null</span>) &#123;<br>        handleFixedRotationAdjustments(r.token, r.mPendingFixedRotationAdjustments,<br>                r.overrideConfig);<br>        r.mPendingFixedRotationAdjustments = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">DisplayManagerGlobal</span> <span class="hljs-variable">dm</span> <span class="hljs-operator">=</span> DisplayManagerGlobal.getInstance();<br>    <span class="hljs-comment">// For debugging purposes, if the activity&#x27;s package name contains the value of</span><br>    <span class="hljs-comment">// the &quot;debug.use-second-display&quot; system property as a substring, then show</span><br>    <span class="hljs-comment">// its content on a secondary display if there is one.</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">pkgName</span> <span class="hljs-operator">=</span> SystemProperties.get(<span class="hljs-string">&quot;debug.second-display.pkg&quot;</span>);<br>    <span class="hljs-keyword">if</span> (pkgName != <span class="hljs-literal">null</span> &amp;&amp; !pkgName.isEmpty()<br>            &amp;&amp; r.packageInfo.mPackageName.contains(pkgName)) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> id : dm.getDisplayIds()) &#123;<br>            <span class="hljs-keyword">if</span> (id != Display.DEFAULT_DISPLAY) &#123;<br>                <span class="hljs-type">Display</span> <span class="hljs-variable">display</span> <span class="hljs-operator">=</span><br>                        dm.getCompatibleDisplay(id, appContext.getResources());<br>                appContext = (ContextImpl) appContext.createDisplayContext(display);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> appContext;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>1、  ContextImpl appContext &#x3D; ContextImpl.createActivityContext(<br>                this, r.packageInfo, r.activityInfo, r.token, displayId, r.overrideConfig);</p><p>2、appContext &#x3D; (ContextImpl) appContext.createDisplayContext(display);</p><p>3、无论如何，都会使用到contextimpl这个类。</p><p>从contextImpl看出，虚拟机第一次加载类事会注册各种ServiceFatcher,这些服务以键值队形式存在HashMap中，用户先根据key找到ServiceFetcher,然后通过ServiceFetcher createService获取具体的服务对象。第一次获取时，会将该对象缓存到一个列表中。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>English-找对英语学习法第一本书</title>
    <link href="/1979/11/30/English-%E6%89%BE%E5%AF%B9%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E6%B3%95%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
    <url>/1979/11/30/English-%E6%89%BE%E5%AF%B9%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E6%B3%95%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<p>​第一次读一本书如此顺畅，根本停不下来。作者漏屋让我有种崇拜之情，他的学识、人生经历、观念等等让我惊叹，我在这本书面前就是如此无知愚昧。我第一次领教了国内教育的死板教条落后，有识之士花费时间做出的精品让我茅塞顿开。</p><h6 id="标准发音"><a href="#标准发音" class="headerlink" title="标准发音"></a>标准发音</h6><p>​儿童因为心理生理和环境呵护关系，学习英语就该用标准发音，这样学起来快而且发音准。但成年人恰好相反，因为母语已经在大脑留下神经单元，所以学英语就不受控制的向母语去靠拢，无论大脑翻译还是发音等。纠正这一错误就要多听些有问题非标准发音，进行夸张训练，从而找到自己错误并改正。</p><blockquote><p>华盛顿大学的 Patricia Kuhl 博士，把成年人学习外语时，在听到外语发 音后，大脑首先会在自己熟悉的母语发音中去寻找对应发音的现象，称 为是 “感知磁石效应(Perceptual Magnet Effect)”(Kuhl, 1991)。她进 一步解释了出现这个现象的内部原因是在大脑中建立的“声音概念神经 图”。在英语是母语的人的大脑中，对应接受“L”音的脑神经元与对应接 受“R”音的神经元是分离的，距离较远，所以听到不同的音后，大脑能 准确激活每个发音各自相应的独立神经元，从而轻易分辨两个发音;而 成年日本人大脑中反应“L”音和“R”音的神经元是重叠在一起的，在听 到“L”音或“R”音后，激活的都是同一处的神经元，于是大脑对这两个不 同发音的反应为“听到的是同一个音”而无法分辨。造成这一脑神经结构 差异的原因是日本人从小听的日语中没有这两个音的区别，在青春期 时，负责听音的脑神经图(神经网络)固化了，长大以后大脑就不再去 区别这两个音(Kuhl, 1997)。甚至有的日本人嘴里能够发出这两个不 同的发音，但耳朵却听不出区别(Sheldon and Strange, 1982)，说的时 候自然会经常搞错。日语中辅音缺少，造成日本人说英语时发音很容易 混淆，所以这个现象比较容易被注意到。原来耳朵没退化，是脑袋在捣鬼。</p></blockquote><blockquote><p>根据我们前面的分析，纠正成年人的外语发音，最重要的环节就是提高 成年人的听音准确度和分辨能力，更深层地说是需要先在大脑中建立接 收新的外语发音的对应脑神经，把他们原来听起来和母语相混的音区分 开。语音专家的研究表明，通过对与某一陌生外语发音相近的各种过渡 发音进行极端化的对比分辨练习，使大脑做到对这一发音附近容易混淆 的发音做到能够区别和分辨，就会提高听音准确度。该领域的权威 McClelland 博士，将这种“矫枉过正”的发音矫正方式称为“夸张训练”。 有很多人经过仅几天的“夸张训练”就有了明显效果。如果身边有英语发 音标准的人能来帮助我们进行“夸张训练”，效果会是非常好的。</p></blockquote><h6 id="石化现象"><a href="#石化现象" class="headerlink" title="石化现象"></a>石化现象</h6><p>​很多人觉得我到了英语环境中，英语就可以提升的特别快，是这样吗？除了能多学到一点点单词之外，可以跟的上别人的语速吗？可以改正口语中大量语法错误吗？</p><blockquote><p>1，最低水平的石化出现在用简单句子和词汇进行交流的同学上，这部 分人的比例最高。其语言是大家见到的常在大街上跟外国旅游者交流的 那些同学所说的外语，以及长期接触外国顾客的商场、旅游景点的小商 贩们使用的外语，以北京“秀水街”市场最有代表性。这个水平往往是出 现在那些认为“不必通过科学的手段，只要有机会跟外国人多交流就会 说英语”的同学身上。他们的外语能力被石化于这个水平，仍不断找机 会跟外国人交流，而很多年后水平仍不变。我们姑且称之为“秀水街英 语”水平或“旅游英语”水平吧，后面我们还会讨论到。</p><p>2，稍高一层的石化水平，普遍出现在原来外语水平不高就出国学习的 留学生身上。他们在国外经过了几年的学习，并大量接触了外语，能够 使用外语进行简单的生活对话，但错误百出，甚至是几乎每句话都存在 严重的语法错误(前面讲的Wes就是这种水平)。他们上课也能听懂个大概，也会进行简单的讨 论，但看原本电影还是很困难。很多人发现，无论再怎样努力或增加跟 外国同学的交流，外语就是提高很慢。这一部分同学目前占了留学生和 新移民中的多数。我们先称之为“留学生英语”水平吧。</p><p>3，再高一些的石化水平出现在出国读硕士以上的留学生，和在美国工作的同学中。他们原来在国内就有一定英语基础，来到国外几年后，课上、课下的英 文交流普遍也没有问题。但他们发现自己的英语交流总是不很流利，仍普遍存在语法错误，这个台阶怎么努力都上不去。他们考托福口语基本 上都是 23分。现在美国一些大学要求博士生做助教，上台讲课，甚至拿奖学金标准的托福口语分数是 26分，最低也要 24-25分。 23分就成为了大多数同学难以超越的极限，有的同学考了十几次都是同样的分数。 外语在这个层面被石化的中国同学也比较多，甚至很多在国外工作的知 名学者都在此列。比如在美国生活工作了几十年，被誉为“物理学界的 居里夫人”的吴健雄博士。大家对她的评价是:“超级的逻辑思维，困难 的英语表达。”我们姑且就称这个水平被石化的英语为“工作英语”吧。</p><p>4，只有少数的同学能够超越这个屏障达到更高的水平。他们在融入国 外社会时遇到的困难明显会比周围人小，能比较游刃有余地应对学习和 工作，往往能够进入国外公司的高级管理层。前面提到的三种石化水平 的同学，出现石化的原因是很多的，但他们有一个共同点就是:石化时 的外语水平，跟他们开始大量使用外语交流时的外语水平非常有关。开 始使用外语交流时自己的外语水平越低，石化出现的就越早，且被石化 的水平也越低。</p></blockquote><p>​可以依靠别人懂几个单词，但是语法如何提高？靠听别人说话？</p><blockquote><p>VanPatten 等语言学家这样分析:在交流过程中，听外语的人会下意识 地“过滤”听到的信息，以至于只有一部分信息能真正进入到意识中。一 般是语言中只带有明显含义的成分，才会被学习者注意到并放到瞬时记 忆中去处理，甚至只抓到了几个关键单词，其他含有语法要素和句子结 构的成分都被“过滤”掉了。大脑只有这样做，才能够帮助他们实现外语 信息内容的交换和满足生存需求。也就是说，我们的大脑只关注听到的 内容和含义( What)，至于正确的结构和语法，别人是如何(How) 表达的，根本不会注意到，自然也就很难学到了。研究还发现，我们对 交流中的词汇的关注，远远大于对句法的关注;对表时间词汇的关注， 远远大于对表时间的时态形式的关注。比如我们通过抓住 yesterday这个 时间词，我们就知道了是在讲述过去的事情，却根本不会去注意句子中 动词形式的过去时变位问题。</p><p>那么为什么不能在注意交流内容含义的同时，也同时有意识地去注意一 下正确的句子结构和语法成分呢?这个问题业界已经研究得比较清楚 了。其中最主要的原因，是我们的大脑在处理外界信息时的局限性，包 括人有限的注意力，有限的短期记忆容量和大脑在短期记忆中同时处理 信息的有限数量，所以我们注意了接受内容，就无法注意信息的具体形 式。当我们听到话语时，是“左耳朵听右耳朵冒”，只是拿走信息而已( Steven Pinker, 1994)。</p><p>如果我们听到的外语有些难度，需要努力才能够理解大概含义的时候， 大脑更会强迫我们只“捕捉”带有含义的关键词汇，而忽略句型结构和语法表达方式。所以语言交流时获取对方语言含义的压力，会强迫我们只 能够注意含义，根本不可能分精力注意语言形式( Sharwood,1986)。 从这个意义上说，只有在外语能力的高级阶段，当处理信息完全自如 时，才有可能分出一部分注意力去关注句子的具体表达形式和结构，也 才有可能提高外语能力(VanPatten, 1996)。</p></blockquote><p>​想要recast，可惜大多数人并不惯着你</p><blockquote><p>有的语言学家发现有一种被称为是 recast的“交流 -反馈”形式，对增加外 语理解和提高外语能力有作用。什么是 recast? 比如学生说:“我看到了 两个人对一件事意见不同，正在大声跟对方说自己的看法。”，教师给 学生以反馈:“噢，你刚看到两个人在‘争论。’”。这个“争论”的表达形 式，相当于给学生总结、更改和提出了应该使用的正确形式。初学者则 可能就此会跟着模仿道:“对，两个人是在争论。”于是帮助了初学者增 强理解和尝试使用“争论”这个正确的知识点。按道理说，这种过程分析 比较符合逻辑，这种特殊的交流应该会有较好的学习效果。但实验同时 还表明，要使recast真正发挥效果，必须是在特定条件下，对交流内 容、反馈形式、反馈次数要精心设计和有计划有步骤有难度梯度地实 施，才有可能形成有效的“更正性反馈”( corrective feedback)。最重要 的条件是交流双方必须共同协调，关注彼此输出语言的形式，否则不利 反害( Han,2001)。所以大部分在一般随意的自由交谈中偶然出现的 recast，实际上并不利于语言提高。</p></blockquote><h6 id="外语环境"><a href="#外语环境" class="headerlink" title="外语环境"></a>外语环境</h6><p>​自己英语水平不够，在那样的环境基本就是煎熬没什么进步，因为会的词汇就那些，熟悉的语法就那几种，怎么和别人交流，来个本地人几句话都听不明白，别人一看早就几句话给你打发了。</p><blockquote><p>犯糊涂而不明白这个道理了呢?主要可能是因为对大部分人来说，英文中多多少少我们能听懂有一小部分，从而我们误以为那些不懂部分的会逐渐自然变懂，会越懂越多。那就要问你了:你为什么有的部分能听懂?原因是这些部分一般都是原来学过的和在自己现有能力范围之内的，并不是到国外之后才变会的。本来就会的，也就是你原来的水平呀，难道需要到国外去证实?那没听懂的那几句，是不是在国外多听几遍，就变成能听懂的啦?好像没有吧。</p><p>很多同胞们又说了，听不懂的部分可以让老外给我们讲解一下或教我一 下呀!先不说外国人大多没兴趣也没耐心给你解释，就算有解释，一般 情况是你连解释都听不懂。大家都查过英 -英字典或双解字典吧?早就 听人说“用英文解释英文更准确”，而且用英文解释英文，连查单词带学 习句子，多好呀!有人甚至断言学外语就是要用英英字典。于是乎，碰 到一个单词去查英 英字典，结果发现解释里还有几个不认识的。再去 查解释的解释，一会儿就乱套了。这么学太不现实了。很多读者都有英 -英字典吧?我敢向大家保证，绝大部分的同学查过两次之后就放书架 上再也不会去碰它了。</p><p>听力没什么提高，那“说”英文的能力，是否因为你在英文环境或者在外 国人当中就提高了?当然不能呀!你说出来的英语一定是自己本来就会 的，或者是把不会的英语自己试着组合瞎说出来的，说出来并不正确， 并不能因为跟外国人在一起，就能突然把原来不会说的英语都变得会说 了，把原来不正确的都变正确了呀!所以到了国外也是“会多少，说多 少”，无非是对着“真外国人”去说罢了。</p></blockquote><h6 id="儿童和成年人学外语区别"><a href="#儿童和成年人学外语区别" class="headerlink" title="儿童和成年人学外语区别"></a>儿童和成年人学外语区别</h6><p>​关于造成儿童在外语环境中学外语比成年人快的原因，各方面研究非常 多。除了生理、心理等原因外，语言学家发现还有一个很重要的原因， 是儿童的语言环境和成年人的非常不同。儿童的语言环境和成年人的语 言环境最主要的区别在于语言交流的内容和场景不同。儿童一般交流的 内容是“应景而生，此时此地，即Here and now”( Krashen，1987)。交流中的人物、事物、事件、动 作、情节、时间、地点，都是交流者身边正在发生的，而且比较具象。</p><blockquote><p>比如下面这个场景:儿童 Gavin抱着一个球，做出要传球的动作，并对 伙伴 Andy说:“ Andy，Catch the ball!”Andy自然能够明白 Gavin在让他 干什么(接住球)，即便 Andy的外语能力很低，比如单纯给他听或看 这个句子时，他完全无法理解，但是在这个场景下，他很容易从发生的 事情中理解交流的内容，甚至分辨其中的细节，比如 the后面的那个发 音应该指的就是这个“球”，从而把一句原先不明白的外语的声音和他所 处的场景中应有的含义联系起来，形成有效输入。过一会儿， Gavin走 到 Vivian身边，并指着她手中的玩具说:“ Vivian，把你手里的娃娃借 我玩一下好吗?”这时身后一声大响， Vivian回头一瞧，马上指给 Gavin 看，并说:“啊呀， Andy摔倒了。”<br>这种在儿童之间的交流，可理解度相当高。而父母跟儿童的交流语言，<br>也符合这一特点，比如父母会指<br>本站热门推荐:为我离婚，你后悔了吗?[BL]5200 着一两开来的小汽车对小孩子说:“看，那边来了一辆小汽车!”而成年人的交流，大部分不具备这种特点。 Cross博士对儿童语言对话内容进行的量化分析结果如下:</p><p> —72%是此情此景的; </p><p>—55%是与这个孩子有关的刚发生的事情的延续; </p><p>—6%是一个单词的句子;<br>—8%是简单的常用短语;<br>—只有 2%是与当前内容完全无关的语言。</p></blockquote><blockquote><p>婴儿在最初听到任何语言的时候，一上来肯定也是不懂的。但因为他们 没有语言，再解释也是无用的。那怎么办?没人着急，人家自己有办 法。他们通过对出现这些词句(一般先是简单词汇，更严格说只是这些 词汇的语音)时的场景图像的观察(当然还包括触觉，嗅觉等其他辅助 的感官刺激，盲童甚至仅靠这些辅助感官刺激)，而猜测这些词句大概 代表的含义，并与图像进行“联系”逐渐形成了这一语音符号和具体事 物、概念的对应联系，在大脑语言区的位置形成了脑神经的一个网络结 构，从而逐渐构造该语言的语言区，最终实现了用这种语言的语音符号 思维的能力。这个过程实现起来，既轻松，又快捷，成年人望尘莫及， 惊叹不已。儿童的语言学习是从简单到复杂，成年人跟儿童交流时使用 的是根据儿童语言能力而调整过的，在语言学中被称为是“保姆式的语 言”(Care-taker Speech，Krashen, 1983)。而成年人在语言环境中听到 的语言一上来就是复杂的，没有人会对成年外国人说“宝乖乖，排排 坐，吃果果”这样的保姆式语言。另外，儿童之间的交流，或者成人所 说的“保姆式语言”，都具有发音非常清楚的性质。语言学家研究还发 现，儿童学外语的行为一般都是和肢体动作相伴产生，可以通过游戏和 学校活动实现，所以学习外语速度比成人快( Asher, 1965, 1969; Asher and Price, 1967;Asher, Kusudo, and de le Torre, 1974;)。</p></blockquote><h6 id="马太效应"><a href="#马太效应" class="headerlink" title="马太效应"></a>马太效应</h6><p>​基础越好成长越大，基础很差几乎没什么进步。好比如你和本地邻居聊天，别人一段话下来你好多单词没听过还怎么进行下去，相反基础很好的人就算有几个不懂词汇也可以猜想一下吧对话进行下去。</p><blockquote><p>成人在外语环境中的外语学习，也非常符合马太效应。本身外语水平就 高的人，在外语环境中受到“优待”，提高非常快。原因有几个:首先是 交流的每句或每段话，大部分是能听懂的，只有少部分不懂或拿不准 的。因为是少部分，所以比较容易通过大部分已经听懂的内容去“推测 和理解”这一小部分内容的准确意思，从而做到最佳的“有效输入”。而 本身水平低的人，就应了“因为不懂，所以不懂”的道理，即使有少部分 听懂了，但由于整个句子的大意都不明白，也就很难去猜测出任何其他 部分的含义而扩充知识;其次，外语水平高的人，因为本身已经具备了 一定的英文能力，在跟当地人交往时障碍较小，老外也才有耐心跟你正 常交流而不必担心你听不懂，交流不下去或非得刻意调整自己的语言输 出;第三，因为你在交流时已经不感到吃力了，所以才更加有时间和精 力真正去关注语言形式的细微变化和相关文化层面等高级阶段的语言学 习要素。而英文水不高的人，在国外的自然外语环境下是受到“歧 视”的，反而非常不利于提高外语。</p><p>至于外语基础不好的人应该如何创造理想的条件学习外语，我们在后面会详细讨论。先在国内把外语基础打好了的人，在国外的语言环境下，马太效应就会充分发挥让他们学得更好。另外，外语水平已经比较高的人，学习外语的途径也更加丰富，即使不去国外，也可以通过阅读和看电影等进行输入。</p></blockquote><h6 id="周围人影响"><a href="#周围人影响" class="headerlink" title="周围人影响"></a>周围人影响</h6><p>​有个人帮你英语纠错？周围人对你英语指导？先问问自己来一个朝鲜人学中文，或者有个中文都说不利索的越南同事，你会每天开开心心给人纠错教导吗？这种事基本不可能发生。</p><blockquote><p>对于在中国的外国人来说，汉语环境就是外语环境。可是有人发现这样 一个现象:很多老外在中国生活一年左右，就能把“生存汉语”掌握得不 错，听着还没有什么语法错误。而一个中国人在国外几年，英语还是说 不好。这一现象，是一些特殊原因造成的。首先是外国人在中国学习汉 语的条件，非常近似于儿童掌握母语的“儿童语言环境”条件，这使得外 国人来中国后，在中文环境中学中文比较容易。中国同胞在国外很难找<br>到相似的理想环境。为什么呢?大家都观察到外国人来到中国，在中国 人中间生活和工作，一般都是受到周围中国人非常高的关注和欢迎的。 尤其是年轻人，对外国朋友不但友好，还很愿意和他们交往，很多人以 有外国朋友为骄傲。现在中国发展到了今天的地步，“崇洋媚外”的心态 已少了，大家这样做的原因主要是对外国文化，外部世界和外国人感兴 趣，有人也希望能这样提高一些外语能力。于是，当这些外国人在开始 听中国人跟他们讲中文时，发现中国同学既耐心，又善良，并且为了照 顾他们的理解力，努力调整自己的语言难度和速度，通过各种手段力求 外国人能听懂，而且从不嘲笑外国人的理解错误或很友好和开玩笑式地 指出错误。而当他们能听懂或说对一两句中文时，受到的鼓励是如此令 人感动，很多外国朋友都因此感到心里无比的温暖。这时没人给他们讲 语法，也没人说你必须认识中国字才能学中国话，各种 Here and Now, Recast等利用学习交流条件随时随地都存在。担任过央视《绝对挑战》 节目主持人的英国人 Tim，曾用流利的中文讲述了他的经历:“我刚来 中国时，身边常有不是一个，而是一群中国朋友。开始时我觉得奇怪， 怎么他们中有的人讲的中文好懂，有的难懂?后来发现是其中有的人善 于自动调整自己说中文时的速度和难度，而且会通过各种方法巧妙地给 我演示意思，所以才好懂。于是我很快先和这些‘容易交流’的人接触。 而随着自己汉语水平提高后，才和其他人更多接触。”这种会根据对方 程度调整自己语言的中国朋友，正是充当了外语学习中非常有效的“保 姆式的交谈者”( Care-taker Speaker)的角色，在语言学中也被称作 为“同情式交谈者”(Sympathetic Speaker)。父母跟婴儿说话时，不就 是担任这样一个角色的吗?</p><p>再看我们中国同学到了国外，那里的环境是怎样对他们的呢?首先，美 国、加拿大的当地人，大多并没有兴趣去交中国朋友，对中国文化感兴 趣的也是极少数，更不会以见到华人为奇，甚至认为华人的英文好是应 该的，因为当地的“华裔”居民，英文是和他们一样好的。所以当他们见 到我们中国同学时，并不调整自己的语言难度，当他们发现你的语言程 度低时，个别人会调整一下自己的难度，赶快把事情说清楚就走掉了， 很少有人会有兴趣继续跟你用调整后的英语交流，更多的人是连调整一 下的耐心都没有，或者不知道如何调整语言难度，甚至有些人还故意刁 难。以前每次在美国或加拿大进海关时，总看到一些中国留学生的父母 们来探亲，在通关时因为言语不通很着急，我经常会帮忙翻译一下，有 时一下帮几个。但我发现这些父母很多并不是一点英文都不会，有的甚 至是大学退休教授，可这些美国海关官员就是没有耐心说得慢一点或简 单一点。当我帮忙后，他们会假装客气地说个谢谢，但那份不耐烦是写在脸上的。</p><p>在自然语言环境中，如果身边有这种友好的语言交流者，那当然是万幸 的事了。 Michael Long认为这种外语学习方式非常有效，他把这种语言 帮助者称为 Interactivist。他认为作为合格的 Interactivist，必须学会根据 对方的理解程度来调整、改变自己的语言难度，变化说法，同义重复， 确认信息等工作。如果能和这样的 Native Speaker在一起，那外语提高 会非常快( Long，1985)。很遗憾，这样的人很少。老师们在外语教 学实践中发现，这种特殊交流连大部分生活在一起的夫妻间都很难做 到，有时候是夫妻中的一方很快失去耐心，两人还经常为此吵架。某位 先生在放弃了教自己太太英语的努力后这样比喻:“你想试一下教你太 太学开车的滋味吗?”更多的人则是根本不知道如何当这个 Interactivist。在实际环境中，有很多的 Native Speaker面对外国人时确实 很有耐心。为了让外国人能听懂自己的语言，他们会主动把自己的语言 简化为一种“外国人说话的方式”( foreigner talk)，主要是简化语法 (比如 don’t forget说成 no forget; come in and have a cup of tea说成 you come drink tea,)，很像电影里葛优跟穿日本和服的服务员说汉语时，使 用的那段著名日式汉语台词:“你地，快快地。我们地，米西米西。”这 种做法在各国都很常见。虽然帮助了外国人理解自己的意思，但并不利 于他们学外语。</p></blockquote><h6 id="听力要靠大脑预估和猜测"><a href="#听力要靠大脑预估和猜测" class="headerlink" title="听力要靠大脑预估和猜测"></a>听力要靠大脑预估和猜测</h6><p>​每天恩刷听力实际效率很低下，因为你压根就不知道人对话在说啥的情况下，怎么听出别人的重点？或者一直听导致身体特别累，因为你时刻要保持耳朵灵敏不能放过任何一个词汇。可是我们听中文时候是这样吗？我们生活中是一直竖起耳朵听的嘛，并不是，漏几个字漏几个词在中文里太常见了。</p><p>​而且有很多文字游戏，你看到最后才知道他故意反转了几个词，但是自己并没有发现。这和听力是一样的，一直听清每个词汇本身就是不现实的，我们从小学习的语言声音，在我们大脑存储了很多，所以在很多语气起始下，我们仅凭大脑就能构造后面的内容。所以，当去听英语的时候，大脑根本没有储存这些，怎么构造？完全无法预估和猜测。</p><blockquote><p>其实母语或外语“听不清楚”的程度是相同的，但因为缺乏外语的思维以 及大脑中缺乏外语声音存储，造成无法通过“构造”来还原出句子的完整 内容来理解其含义，所以大脑让你感觉听外语时明明听到了但却听不清 楚，成了“听而不闻”。所以同学们在听外语时常抱怨的“听不清楚”，其 实不是耳朵的问题，是大脑的认知问题。由此可见外语听力问题，也不 是因为学会了一句话或练熟了一句话，就能在实际应用中听懂这一句话 那么简单。</p><p>另外神经语言学的研究发现，其实在听别人说的每一句话的时候，尽管 感觉“听清楚了”，但实际一开始我们的大脑并不能马上“辨认” 出到底听 到的究竟是哪个词或哪几个词。实际上听到这些声音后，大脑在迅速下 意识地做出一系列的“猜测”。这些“猜测”的依据是听到的声音与哪个词 的发音近似度高，在当前场景下哪个词出现的可能性最大，前后文的关 联这时最可能出现的是哪个词等等。大脑根据这些可能性，预先在大脑 中锁定了几个“高度备选”的对象。随着接下来的第二、三、四个单词声 音的出现，逐渐“确认”刚才究竟听到的是哪个词或哪些词(McCelland and Rumlhart，1981)。这个过程是大脑下意识地在几分之一秒内迅速 自动实现的。因为先有了前面的“备选”，从而使得这种“确认”工作更加 迅速，帮助我们加快理解速度。所以在听语言的时候，是当一定程度 的“整体”出现后，我们才能实现猜测成功，而不是听到一个字就“听清 楚”和“理解”一个字。</p><p>在听一句话的过程中，尽管你还不知道下一个词是什么，但实际上你的 大脑已经提前准备好会听到这个词了，很像中文里所说的“听了上句就 知道下句”的状态。这种状态同样也是增加了理解的速度和准确度。更 深一步的分析，实际在听语言的时候，是在没有完全听清楚的情况下，“预估”和“猜测”出我们听到的是什么，实际上我们的大脑“模糊处 理”了听到的一段信息，迅速成功辨认和解码了信息的内容，我们就认 为自己是听明白了。</p></blockquote><h6 id="确而不定"><a href="#确而不定" class="headerlink" title="确而不定"></a>确而不定</h6><p>​人类对听到的语言的理解，实际上并不是“辨别、分析和解释”这个顺 序，而是大脑在对听到的声音进行“构建”后，来确定和还原其含义。也 就是说，不是“拆解”分析部分得出整体，而是先“搭建”出整体来，才能 确认局部到底是什么。换句话说，不是先能听清，才能听懂;而是先有 听懂，后有听清。这确实跟一般人的直觉正好相反。</p><blockquote><p>我们用新闻中报道过的 Tiger Woods 跟老婆吵架后“在家门口撞了车”这 一句话做例子:“And he crashed his car outside his house.”我们实际听到 的是什么呢?(用音标表示吧)实际听到的是:在听到的这个英语句子中的所有单词之间、其实是不存在间隙的，整个句子就是一个连在一起的一串声音。因为英文是多音节，所以并不能像汉语那样容易切割出词汇来(其实汉语对不熟悉的人来说，一句话听起来也是一连串的没有分界线的音节)。这么快速飘过的一串连续的、不能确定是什么的声音，大脑应该如何正确分割出词汇，然后还要通 过“构建”来确定其含义呢?</p><p>首先，在听到上面这一串声音符号后，大脑凭着以前的听音经验，进行 声音的初步处理，很快就先排除一些英语中“不可能存在”的音节。比如 等，这样自动就能切割出的几种可能是:“And he crashed”, “Andy crashed”和“And Dick rashed”等符合英语发音规律的组合方式，但还不能 确定究竟是这几个之中的哪一个。<br>接下来的后面的“ 音被后面的 crash 用掉了。</p><p>好乱啊，我们的大脑真的在干这些事情吗?正是!大家不要觉得这个过程太复杂，其实我们的大脑在接受到信息时，都是在这样一刻不停地、下意识地、在几分之一秒内，迅速地做出一系列类似的判断来确认信息的。我们对这一过程往往没有察觉。</p><p>其次，那到底听到的是“Andy”还是“And he”撞了车呢?这个单纯靠听音 能力，或者靠后面几个词的确认，也是很难判断出来的，往往需要前后 文的意思来确定。最直接的判断出是“he”的线索，是根据刚才的话题中 的内容和前后文的联系。因此提前知道某段谈话的主题，会大幅度增加 听力的理解程度就是这个道理。比如刚才正在讨论Tiger Woods，或者 两人正在同时看关于伍兹的新闻，其中一个人说了这句话，听的人就可 以很容易判断出是在说“he”，然后接下来的判断出后面是 outside his house, 以及自动切割 car 和 out之间的连读等等，这些都是自动完成的。 所以是听了后面才能确定前面，“构建”出整体才能判断确认个体，而不 是先确定了个体来总结整体。</p><p>但其实不考虑前后文的意思，单纯从句子语调判断出 “he” 也是有可能 的。因为当两个人在谈论熟悉对象时，会使用“先降后升”的语调，这种 语调就可以告诉对方，语句中说的这个人，就是他们正在讨论的或之前 刚讨论过的，是两个人都心知肚明的那个人(Brazil, 1997)，自然不必 再提名字，说“he”(降调)就可以了，所以是 and he。关于“语调帮助确 定句子含义”的研究，一些心理学家发表了被称为“正弦波语”的实验结 果。他们发现，单纯用机器发出一个正弦波的类似语言的语调，测试者 很多都认为听到了一句具体的话，有25%的人甚至认为自己能具体判断 出所有组成这句话的词汇(Remez and Pisoni,1981)。我们就是这样被 会“说话”的鹦鹉给欺骗了，这些鹦鹉实际上只会两种发音，但却会这两 种音准确模仿各种语调，借助语调的变化构造出来了句子，让我们听起来，会认为它们模仿我们说话很“像”，其实从发音角度来说是差得很远 的。可见语调对判断句子含义起到了重要作用。这种对语调的把握，对 词汇含义的“预测”和“确定”，其实现过程完全是下意识的，不是由你的 智商，单词量或单词熟练程度决定，更不是“背会”的，而是由正常的英 文思维带动的，具体说是某单词在大脑中的存储方式和该单词与其他相 关词汇的“立体链接方式”决定的。</p></blockquote><h6 id="为何听力差或者只能慢速英语"><a href="#为何听力差或者只能慢速英语" class="headerlink" title="为何听力差或者只能慢速英语"></a>为何听力差或者只能慢速英语</h6><blockquote><p>明白了这几点， 大家就能够理解为什么很多人反映在听外语的时候总 感觉“速度跟不上”，和“十分费力”，稍微有一点干扰就“被打断了”。其 实很多情况下，是因为我们每听到一个外语单词时，就试图先辨认到底 听到了哪个词，脑子里在一边搜索词汇的发音，甚至还翻译这个词的中 文意思，又要一边还要顾着往下听，当然费力气。如果我们听到的某个 词的第一反应，甚至唯一反应是试图去找它的中文解释，往往不但听不 清，而且还是“猜测”不出来或“猜测”不对的。</p><p>而在被这种尝试翻译耽误了半秒钟后，下一个词早就出现了，我们又忙于分析和 翻译下一个词汇，同时还要回想和调整对前面一个词的判断和翻译，好 像是在用两个盖子去盖四个锅，忙得“按下了葫芦浮起了瓢”，就更不可 能去“预测”和“备选”出下一个可能出现的英文单词，那么我们对任何一 个句话的整体理解的能力都无法出现，也很难跟上整个话题，理解力当 然又进一步下降。所以很多同学长期只能听“慢速英语”。</p></blockquote><h6 id="几种正确学习方法"><a href="#几种正确学习方法" class="headerlink" title="几种正确学习方法"></a>几种正确学习方法</h6><p>1，不能执着非要听清楚句子中的每个单词不可。如果非要认为“不能放 过任何听不清的词汇”，则是耽误宝贵时间，降低学习效率。发现听力 中有听错和没听准的地方，不能简单地认为是自己的“听音辨音能力”有 问题，很可能是对内容整体不理解，对结构和语句的形式不熟悉等原因 造成的，那么当下学习的重点和方向也就随之清楚了。</p><p>2，学习单个英语单词的正确发音是重要的，从 “听单个单词的发音”开 始学听力也是正确的做法。用参看音标的做法去确认单词的准确读音是 正确的。具体在实际应用中和快语速中一些单词发音产生的变化，在英 语学习的初期不能刻意去学。</p><p>3，提前熟悉听力资料的内容和背景，有助于提高听力中的“预估”，“猜 测”和“确认”的把握度，是帮助提高学习效率的正确做法。听力练习完 成后去查阅原文，核对自己是否听正确，和再次通过相同内容不同形式 的输入提高整体认知，也会是非常有效的学习方式。</p><p>4，大家对平时碰到的所谓英文单词的连读现象有了正确的理解，不再 是象几十年前提出的，所谓“前一个单词的结尾辅音和后一个单词开头 元音之间的连读现象”那么简单，而实际上整个句子，整个人类的语 言，都是连续的。人们认为自己在句子中“听到了”的各单词之间的“空 隙”，只是人的心理幻觉，实际是不存在的，是人的大脑下意识地把空隙“武断添加”进去的。所以通过主动去学习和 练习所谓的各种“连读形式”去理解连读，是错误的学习方式。连读是在 对整体的理解以及对单个单词读音的熟悉前提下自动实现掌握的。</p><h6 id="几种错误的英语认知"><a href="#几种错误的英语认知" class="headerlink" title="几种错误的英语认知"></a>几种错误的英语认知</h6><p>1、口语是特殊形式的英语，错。这是因为英语会使用大量类比、比喻和一些短语，其实和中文一样，各种经典的比喻，可以说中文比喻句是特殊形式的中文吗？中文自己可以即兴发挥造词造句那英语为何不可以？这些抽象化的表达本身就是英语的一种，只能说自己不理解而已。</p><p>2、真正的俚语，具有很强的实效性和地方性，但并不是特殊英语。就如同盖了帽了我的老baby，这句话你第一次听可能会觉得这是人说的话？但这就如同俚语一般，解释下也就理解通了。</p><p>3、英语中某些过时的用法是无用的，错。英语的发展就如同每个人母语发展一样，就像你今天给别人来句饭否？稍微有点文化的都应该懂，那英语别人给你来句你要说爱慕拆腻子，不懂嫩在说啥莱？</p><p>4、英语连读一开始要专门练习，不对。这都是循序渐进过程，连读必须要掌握普通读法词汇，而且一开始刻意练习并这样说的话，你确定老外能听懂？</p><blockquote><p>知道连读的原理也就可以了，不知道也没关系，大家千万不要有意识地 记住连读原理并试图理性地应用它，刻意地连读，那样又适得其反，更 加深听力障碍和造成不会说话。连读的现象确实会给大家听力带来困 难，但掌握听或说的连读，都是个自然的过程，不可以主动地学习连读 和练习连读。听不懂连读的主要原因之一是对被连读了的两个或数个单 词的“单读发音”理解得不好造成的。其实英语中尽管有连读，不连读也 不算错，所以大家不要追求说的时候一定要连读(有的语言比如法语， 连读现象更普遍，不连读一般还不行)。但如果学外语非要每个连读都 去学习和练习，就等同于无端增加了好几万个新词。</p></blockquote><h6 id="兴趣使然，不要折磨自己"><a href="#兴趣使然，不要折磨自己" class="headerlink" title="兴趣使然，不要折磨自己"></a>兴趣使然，不要折磨自己</h6><p>​我做程序员快5年了，英语学习也是自然而然的，不然官方文档github都没法看了。这都是水到渠成，有需要就去做，youtube等只要想学英语随时随地都可以学。但千万别像个傻子一样搞什么疯狂英语，每次看到这种拙略的表演总是让我对这个逆淘汰的洼地更加绝望。</p><p>​该放松放松，想玩就玩，只有在心情愉悦情况下才能有效产出。工作如此，学习亦如此。所以我很痛很国内程序员996这个事，心情极度抑郁能写出什么代码？全部制造垃圾而已。但就是这一片魔幻的大地，每次都上演着永不完结的抽象故事，产出越来越多的魔怔人。没什么办法，只能多读书，增加自我观念知识，才不至于被吞噬。</p>]]></content>
    
    
    
    <tags>
      
      <tag>English</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android-上传module到jitpack.io</title>
    <link href="/1979/11/30/Android-%E4%B8%8A%E4%BC%A0module%E5%88%B0jitpack.io/"/>
    <url>/1979/11/30/Android-%E4%B8%8A%E4%BC%A0module%E5%88%B0jitpack.io/</url>
    
    <content type="html"><![CDATA[<h1 id="上传步骤"><a href="#上传步骤" class="headerlink" title="上传步骤"></a>上传步骤</h1><p>1、根据android官方文档，修改module build.gradle文件</p><p>2、上传项目至GitHub。</p><p>3、发布release包。</p><p>4、到jitpick.io查询当前包的打包状态。</p><p>5、打包完成即可implementation。</p><p>6、error 新建jitpack.yml文件使用openjdk11。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">jdk</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">openjdk11</span><br></code></pre></td></tr></table></figure><h1 id="Build-gradle修改"><a href="#Build-gradle修改" class="headerlink" title="Build.gradle修改"></a>Build.gradle修改</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">plugins &#123;<br>    id <span class="hljs-string">&#x27;com.android.library&#x27;</span><br>    id <span class="hljs-string">&#x27;kotlin-android&#x27;</span><br>    id <span class="hljs-string">&#x27;maven-publish&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">afterEvaluate &#123;<br>    publishing &#123;<br>        publications &#123;<br>            release(MavenPublication) &#123;<br>                from components.<span class="hljs-type">release</span><br>                <span class="hljs-variable">groupId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;com.github.wannaRunaway&#x27;</span><br>                artifactId = <span class="hljs-string">&#x27;networkmanager-retrofit-rxjava&#x27;</span><br>                version = <span class="hljs-string">&#x27;1.3&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看英文就知道意思，你的id，打包项目id，版本号</p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Reading-BRAINWASH the secret history of mind controal 洗脑术的隐密历史</title>
    <link href="/1979/11/30/Reading-BRAINWASH%20the%20secret%20history%20of%20mind%20controal%E6%B4%97%E8%84%91%E6%9C%AF%E7%9A%84%E7%A7%98%E5%AF%86%E5%8E%86%E5%8F%B2/"/>
    <url>/1979/11/30/Reading-BRAINWASH%20the%20secret%20history%20of%20mind%20controal%E6%B4%97%E8%84%91%E6%9C%AF%E7%9A%84%E7%A7%98%E5%AF%86%E5%8E%86%E5%8F%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="大脑战揭幕"><a href="#大脑战揭幕" class="headerlink" title="大脑战揭幕"></a>大脑战揭幕</h1><p><em><strong>伊凡·巴普洛夫提出了“条件反射”理论，他用摇铃和闪光就可以让狗分泌唾液，而这仅仅这是个开始。</strong></em></p><p>​在一次实验室水淹意外中，巴普洛夫注意到所有狗的条件反射反应消失了，濒死的经历如此恐怖，以至于巴普洛夫的狗被自己的恐惧所洗脑导致后天习得行为都丧失了。几个月后，当巴普洛夫打开水龙头让水冲进动物房间，这些狗惊慌失措，再次忘记了条件反射的信号。巴普洛夫实验了很久，得出了三个阶段：</p><p><em>对应阶段</em></p><blockquote><p>狗听到摇铃，就会分泌唾液。</p></blockquote><p><em>反常阶段</em></p><blockquote><p>狗听到摇铃，就会分泌唾液，但并不投食，其行为会变的难以预料–时而分泌唾液时而不分泌。</p></blockquote><p><em>超反常阶段</em></p><blockquote><p>在洪水案例中，极度的恐惧或精神创伤将积极条件反射转换为消极条件反射，狗的性格有可能发生了逆转。</p></blockquote><p><strong>巴普洛夫研究</strong></p><blockquote><p>​俄国革命后不久，巴甫洛夫就受到共产党的赏识，被公开奉为苏联在世最伟大的科学家。他获得了大笔研究经费，在克尔图什还专门为他新建了实验室。与其他俄国学者不同，巴甫洛夫可以不受限制地去往世界各地进行研究。“毫无疑问，（巴甫洛夫)是克里姆林宫外最受保护、特权最大的人。”亨特说。</p><p>​这种特殊待遇背后大有奥妙。1928年，巴甫洛夫以皇家医学院荣誉院士的身份到访伦敦。他告诉老同事迈克•柯洛斯特维茨，十月革命后不久，他收到列宁的私人邀请，请他访问克里姆林宫。巴甫洛夫受宠若惊。 会面时列宁询问了巴甫洛夫的工作，后者详细介绍了对狗的研究成果。“这些研究非常有意思”，列宁不耐烦地打断了巴甫洛夫，他感兴趣的是人，不是狗。关于人类，巴甫洛夫有什么新发现呢？列宁给了巴甫洛夫一项特殊任务。 列宁要巴甫洛夫提交一份关于其毕生研究的综述——但这次不是将其用于动物，而是运用于人类。从开始撰写报告的一刻起，巴甫洛夫就待在莫斯科，成了克里姆林宫的座上宾。 列宁似乎已经意识到只凭说服教育是无法造就出“苏维埃新人”的。革命要延续下去，就必须把俄国人全都变成社会主义者。巴甫洛夫的条件反射要首先用在俄国，接着是中国、中欧的共和国，最终传遍世界。</p><p>​会见结束3个月后，巴甫洛夫向列宁提交了一份长达400页的手稿。列宁读罢报告，在一天之后做出了反馈。他满脸笑容，紧紧握住巴甫洛夫的手说，有了他，苏联革命的未来才有了保障。“巴甫洛夫的手稿，”亨特说，“奠定了共产主义扩张其控制体系的基础，手稿再也没有出过克里姆林宫。”</p></blockquote><p><strong>西里尔·卡宁汉接到空军情报九处电话，委派他搞清楚朝鲜战场情况</strong></p><p>​战俘们和敏泽地案件一样，身体没有很大变化，但精神遭到了强制转型。</p><p><strong>战俘收到的精神折磨和虐待，残酷的心理操纵</strong></p><blockquote><p>​专家们写道，在苏联，审讯初期充斥着长时间的单独监禁，以使囚犯感到被国家所拋弃，孤单无助。克格勃发现，没有一件事比让囚犯独自面对恐惧更能软化他们的意志。在单独囚禁的4 一 6周内，犯人们要面对一系列麻痹思维的程序，心理压力随之产生。他们被迫长时间罚站、用规定姿势睡觉，对这些程序表现出丝毫的犹疑，就会遭到唾骂和毒打。犯人不能与外界有任何接触，被关在隔绝自然光的单间牢房内，丧失了时间概念。吃饭和其他活动的时间也经常变动，以进一步扰乱囚犯的时间感。让犯人挨饿受冻是为了使他们的身体和精神更加虚弱，而打乱睡眠规律（通常是根本不允许睡觉，或者面对强光睡觉）则是为了进一步加剧痛苦和不真实感。 经过漫长的软化时期，犯人被折磨成孤独、惊恐、思维混乱、精神崩溃的废人。他会坐在牢房里哭泣，喃喃自语地祈祷，并产生幻觉。到了这一阶段,真正的审讯才刚刚开始。 与软化阶段一样,审讯是为让犯人精神错乱而特别设计的。审讯初期，克格勃并不对囚犯提出任何指控，而是让他们自己列举犯罪行为。犯人一遍遍地写下罪行报告,又一次次眼睁睁看着审讯人员嘲弄地把报告撕成碎片。拒不撰写报告或所写内容前后矛盾都将招致毒打,直到他们彻底分不清应供认哪些行为，已交待过哪些罪行。与此同时，犯人不时遭到羞辱，筋疲力尽。他们被罚站直至虚脱倒地,上厕所的请求也常被否决，迫不得已要在审讯者面前便溺。</p><p>​直率的行为有时会受到鼓励，奖品可能是一根烟、一杯咖啡或是使用厕所。而审讯者对其他行为的反应则往往超出犯人的预料。为表明他们的某些观点，审讯者可能并不奖励积极认罪的犯人，反而会掏出手枪，告诉他们即将被枪毙。这些难以捉摸的举动又一次加深了犯人的困惑感。最终，情况越来越难以忍受。就算了断意味着死亡，囚犯们也不惜说出一切来结束这场折磨。 意识到不彻底屈服审讯就不会结束，犯人们会开始编造罪行，向审讯人员摇尾乞怜。通过这种方式，犯人实际上有力地说服了自己的确犯下了这些罪行，再难区分出真实与虚构。“受害者们并非有意识地改变了自己的价值体系；无论他如何努力反抗，都无法抵挡这种变化。就像精神崩溃的精神病人一样，他们自己对这种变化无能为力。”欣克尔和沃尔夫评论道。</p></blockquote><p><strong>登峰造极的魔法屋</strong></p><blockquote><p>​鲁夫向美国参议院的一个委员坦承了他在秘密警察手里受到的恐怖虐待，这段经历后来也收人了他的《洗脑机器》一书。一轮常规的严刑逼供之后（审讯者一开始要求鲁夫认罪，遭到拒绝后，把铸铁烟灰缸砸到他的脸上，敲掉了他两颗门牙），鲁夫被带到敏泽迪“崩溃”的房间。医生提醒他说，在“魔法屋”里，只有两种结果:要么坦白，要么精神分裂。</p><p>​ “魔法屋”和屋内物体的形状都是不规则的，以使犯人丧失正常的方位感和空间感。房间里的灯不停地转动，在墙上投射出旋转的图像。家具、摆设都是半透明的，床倾斜的角度则让人难以入眠。房间内还装有隐藏的扬声器,播放各种奇怪的声音。因此，当鲁夫听着音乐上床睡觉,就可能被惨叫声惊醒。用餐时间也经常变动，有时候两次送餐只间隔5分钟，扰乱鲁夫的时间感。他也常被下药，赤身裸体地睡觉,醒来却发现自己穿戴整齐。又或者穿着衣服人睡，一丝不挂地醒过来。还有一次，医生摇醒他，质问他为什么企图自杀。当然了，鲁夫的脖子又酸又痛还有淤青,就像他真的上过吊一样。</p><p>​鲁夫写道，魔法屋“是苏联最恐怖的精神毁灭工厂，是一座心理核反应堆。如同钻头顶端的钻石,魔法屋象征着共产党组织登峰造极的设计”。鲁夫摔碎了屋里所有的东西,绝食抗争，最终重获自由。</p></blockquote><p><strong>约翰·华生奇特实验</strong></p><blockquote><p>​实验中，艾尔伯特得到了一只温顺的小白鼠，他们很快就成为亲密的朋友。华生试图人为地改变艾尔伯特对老鼠的认知，从朋友变成威胁。从此，每次把小白鼠拿进艾尔伯特的婴儿床围栏时，华生就在他背后用锤子猛敲一块金属片，发出震耳欲聋的响声。艾尔伯特吓坏了，很快就把噪声和小白鼠联系起来。没过多久，只要小白鼠一出现艾尔伯特就会大哭。后来，其他的小动物或者任何有皮毛的东西，都能把他吓哭，甚至连圣诞老人的大胡子和白发的人，也会令他恼羞成怒。</p><p>​华生认为自己踏上了塑造人类个性的探索之路。如果方法正确，婴儿一出生，他就能为其编写思维程序。他的论调众所周知:“给我一个婴儿，我能让他爬，让他盖房子……让他成为窃贼、强盗、瘾君子……我能把他变成聋哑人，也能造出一个海伦•凯勒……人是塑造出来的，不是浑然天成的。” 华生在研究中使用的术语极大地影响了乔治•奥威尔。28年后，乔治•奥威尔在他的小说《1984》中发明了诸如“灌输”、“植入”和“遗忘”等恐怖的“新话”。中情局推测，如果能够通过这种方式构造（construct)人类的性格，那么使用同一方法能否解构(deconstruct)人的性格呢？</p></blockquote><p><strong>萨基特研究得出结论，认为严重的暴力和情感创伤有可能导致行为特征发生根本改变。严重的心理创伤超出临界值，人的思维难以维持正常运转，精神扭曲、极性反转之后，就是性格的巨变</strong></p><p>​萨金特观察了明泽蒂和朝鲜战俘的表现之后，结合自己经常接触的弹震症病人、新宗教信徒，他认为只有核战争的生理毁灭才比得上这一威胁。</p><p><strong>洗脑</strong></p><blockquote><p>​同年4月，时任中情局局长的艾伦•杜勒斯在普林斯顿大学发表演说，详细介绍了苏联在思维控制领域取得的进展。杜勒斯说：(苏联人）挑选特定的人，摧毁他们，把他们变成卑微的忏悔者，迫使他们承认从未犯下的罪行，或者把他们变成苏联政治宣传的传声筒。苏联人用新技术清除犯人的思想和以往的精神过程，并且有可能通过“谎言血清”让受害者产生全新的脑部活动和思想，并机械地重复它们。 杜勒斯警告说，从来就没有出现过如此“邪恶”变态的大脑实验，不管是大规模还是个别的，针对的目标都是自由思想。他赞同爱德华•亨特的说法，认为洗脑有效地实现了对人类思想的恣意控制，直到把它们变成留声机——“任凭主人摆布，把它们的唱针放在唱片上”。这项手段使冷战就此进入心理战时代。杜勒斯将其特征归纳为，为人类思想而战。“我们也许能根据它的新形式为之命名——大脑战。” 6个月后，在联合国政治与安全理事会会议上，美国代表查尔斯•梅奥博士发表长篇演说，激烈抨击共产党发展“洗脑和精神扼杀”手段。他详细介绍了巴甫洛夫条件反射和审讯药物的使用，解释了洗脑与拷问台、拇指夹等旧式刑具的区别。与单纯地造成生理痛苦不同，洗脑让受害者自愿成为了摧毁自己个性的帮凶。</p><p>​有了来自军方、情报机关和民间权威人士的各种报告，媒体的恐慌似乎也情有可原了。尽管没有人确切地知道洗脑的后果究竟是什么，但在赫胥黎的《美丽新世界》、亚瑟•凯斯特勒的《正午的黑暗》和奥威尔的《1984 》 ( 《 1984》中温斯顿的审讯者说：“到这儿来的人，没有一个能抵抗得了我们”，“我们要把你榨干，然后再亲手把你填满”）中，洗脑显然被描述成了一种恐怖的魔力。它鬼鬼祟祟地攻击人们的意志：它肮脏、阴险、恐怖，违背了一切道德标准。《社会问题期刊》评论道除了巴甫洛夫博士的理论和傅满洲博士的诡计，没有一件事能制造出这样的效果。”这是对灵魂的强暴。</p></blockquote><h1 id="吐实药"><a href="#吐实药" class="headerlink" title="吐实药"></a>吐实药</h1><p>​从纳粹德国到英国，再到美国中情局，进行了无数的实验，想要得到一种能够让他人供出情报的吐实药。可结果很差，最后发现咖啡因和酒精混合起来效果最好，也就是咖啡和酒。大麻药效最强，可是想要不知情让人服下并不合适，因为总有人不抽烟的。</p><p>​其他的化学剂比如巴比妥酸盐，一是实际操作很难不让人发现，还有就是引发幻觉后怎么判断实话还是幻想出来的事情，有很多例子可以说明。</p><p>​要套取对方情报，肯定要让人卸下防备。传统喝酒嗨了确实能谈天说地，在生活中见的确实很多。可若是给他人服用致幻剂等东西也能达到很嗨的效果，但是无法判断哪些是真实哪些是臆想或者纯粹吹牛。每个人经历不同所以致幻后场景也不一样，再加上大脑会刻意回避一些痛苦或者敏感的东西，所以真的无从判断。</p><p><strong>佛洛依德的精神宣泄理论</strong></p><blockquote><p>​事实上，它能追溯到19世纪末，西格蒙德•弗洛伊德就是在那时发现了心理原因可能会导致生理疾病。弗洛伊德认为，回忆过去不愉快的经历会引发情感上的痛苦。由于人并不乐于享受痛苦，因而更倾向于在昏迷状态中通过“遗忘”来埋葬伤痕累累的记忆。不幸的是，痛苦的回忆并不安于消逝的命运。有时，抑制痛苦所产生的压力会使记忆以看似毫无关联的生理症状重新显露出来。弗洛伊德说，只有压抑的记忆被完全揭开并妥善处理，生理症状才会消失。要做到这一点，办法不胜枚举。强化心理治疗是一种，催眠也算一个。弗洛伊德的同事布罗伊尔，将诱导出此类情绪称为“精神疏泄(Abreacticm)”，弗洛伊德把随之产生的心理压力的突然缓解称作“精神宣泄(Catharsis)”。</p></blockquote><p><strong>萨金特使用药物对士兵心理治疗</strong></p><blockquote><p>​几天后，萨金特又接诊了一个健忘症军人。他由于恐惧而不停地哆嗦，右手也不听使唤。萨金特再次给病人使用了阿米妥钠。注射剂发挥了作用，病人马上就不再发抖。他声情并茂地讲述了如何死里逃生,却发现同在战场上的弟弟奄奄一息。在弟弟的恳求下，这位病人把他拖到了空地，用步枪结束了他的痛苦。“突然瘫痪的，就是他扣动扳机的那只手。”萨金特说。</p><p>​ 送来的伤兵不断增加，萨金特开始更加频繁地使用阿米妥钠。当病人昏昏欲睡时，萨金特就告诉他们正置身战场，坦克开过来，他们即将丧命。病人们脸色通红，呼吸急促，隐藏的记忆在这一刻喷薄而出。士兵们不只是记起事情这么简单，他们重温了这些经历。一群士兵尖叫着在萨金特的办公室里奔跑，把他们的噩梦完完整整地演了出来。有时候精神宣泄太过剧烈，萨金特不得不采取措施制服病人。他后来开玩笑说:“我记得，有四分之三的病人几乎要满屋子追杀我了。” 很快，其他药物诱人招供的潜质也逐一显露。许多巴比妥酸盐类药物都有类似的功效。一位美国同事建议萨金特使用乙醚，它引发的情绪发泄甚至更加激烈。除了镇静剂，安非他明的效果也不错。弹震症病人被注射上述药物后，感到一种能量涌动而出，倾诉的欲望几乎无法阻挡。其结果是情感的突然流露和回忆的瞬间再现，心理治疗师则能对此进行充分疏导。借助药物，萨金特重新发现了弗洛伊德和布罗伊尔在19世纪90年代开创的心理宣泄手段。</p></blockquote><h1 id="The-Flesh-of-God"><a href="#The-Flesh-of-God" class="headerlink" title="The Flesh of God"></a>The Flesh of God</h1><p>​研究人员对各种植物进行研究，以找出可以让人致幻的药物，从春极草开始，提取到了一种强烈的致幻物质。但这个情报被发现而且广为流传，上流人士纷纷开始磕这种药物，人们对这种药物觉得神奇而又着迷。</p><h1 id="黑暗中的故事"><a href="#黑暗中的故事" class="headerlink" title="黑暗中的故事"></a>黑暗中的故事</h1><p>​感官隔离，会让大脑不知所措，配合噪音干扰、体罚、禁闭和灌输等方法，可以让一个人崩溃，并且可能造成永久的精神性损伤。从抓捕爱尔兰共和军嫌疑人导致无辜者受刑开始，这项侵犯人权研究就被人了解最后并为其他更大冲突埋下伏笔。</p><p>​感官隔离，从罩头套，到黑屋子、水箱实验等，就是为了剥离人感官，使大脑不接受刺激慢慢崩溃。</p><h1 id="满洲候选人"><a href="#满洲候选人" class="headerlink" title="满洲候选人"></a>满洲候选人</h1><p>​催眠，被人提出可以当作一种心灵控制。各种实验后，很多人声称发现了催眠的奥秘，在多次研究中心灵控制发现就是个骗局而已。相比催眠，权力和金钱更是决定性因素。</p><p>​那些声称被催眠做出坏事的人大多数是想逃避责任。</p><h1 id="詹姆斯、雷和广告心理师"><a href="#詹姆斯、雷和广告心理师" class="headerlink" title="詹姆斯、雷和广告心理师"></a>詹姆斯、雷和广告心理师</h1><p>​潜意识，人大脑潜意识会导致什么样的行为？很多人试图证明这些，通过一些暗示让人去自杀或者买东西？很难去证明，但也很难说没有潜意识影响。因为无法证明，潜意识无法证明他存在并不等于他不存在。</p><p>​大多数情况下，人们只是在惊恐情绪下想要逃离现状，加上媒体推波助澜，才会对某些无法证明的东西渴求不已。</p><h1 id="梦中治疗"><a href="#梦中治疗" class="headerlink" title="梦中治疗"></a>梦中治疗</h1><p>​尤恩·卡梅隆，使用麻醉电击疗法治疗精神病患者，为了自己的成功，无所不及的折磨病人，没有科学的治疗步骤和剂量，最终让病人崩溃。很多人失忆，更有多人死亡。卡梅隆的理念就是把人当作机器，删除坏的记忆，再用录音机不断提示病人该如何做，最终导致病人崩溃。</p><p>​萨金特，和卡梅隆理念相似，不过没有那么激进。使用药物电击治疗病人，有些人好转有些人失忆，有人恨他也有人觉得他很伟大。他先进的治疗方式就是精神治疗伴随着生理治疗。</p><p>​在前面也看到感官隔离对大脑的毁灭力，所以精神治疗伴随生理治疗是肯定的。让感官感知这个世界，让自己不断和记忆里那个人交流，接受真实的自己，再加上心理疏导。不是粗暴的删除记忆，植入新东西。这是屠夫的做法，人最宝贵的就是记忆，失去记忆既是死亡。</p><h1 id="吾主爱人"><a href="#吾主爱人" class="headerlink" title="吾主爱人"></a>吾主爱人</h1><p>​新兴宗教和思想解毒者。邪教组织通过洗脑来控制成员，这些人一旦真正进入，一辈子都走不出来，即使醒悟也晚了。相反思想解毒者大部分都是加入邪教成员的家人，唯一梦想就是让自己孩子亲人回家。为此采取了很多违法暴力行为。双方都为自己辩护，这场战争到现在还在继续。</p><p>​我认为邪教组织、恐怖主义和极权国家本质是一样的，都是洗脑之后大批量生产纸片人，没自我意识、没人性很抽象的纸片人。但这个世界到现在还没有认清这种危害，这种有毒的、易扩散的危害就如同新冠一样，爆发起来会吞噬这个世界。</p><p>​但我觉得很奇怪，人类历史上那么多的苦难，一战二战等等。为何还没发认清这种有毒的洗脑组织下的一切，按照人类智商而言这并不是很难的事情。我只能想到人性本恶，人性本来就很丑陋，人本身就是有罪的，需要不断的思考经历才能变好，而大量的恶人丑陋之人就在此隐藏卑贱的活着，阻挠正常人类思想法律社会发展，出卖灵魂为求金钱。当然会有有毒的洗脑组织存在。</p><h1 id="魔鬼计划"><a href="#魔鬼计划" class="headerlink" title="魔鬼计划"></a>魔鬼计划</h1><p>​绝对洗脑是不存在的，也就说把人变成机器人或者变成另一个完全不同的人是不存在的。人是一种理性的动物，在很多情况下反常的行为只是在当下做出的选择而已，在一种很坏却又无法改变的环境下，人只能做违背常理的坏事，为了生存这是会发生的。</p><p>​所以很多情况下，说某某被洗脑了，而不去深究后面的真相，这是不可以的。洗脑不可以变成一个借口或者口号，所有反常行为总归有一个理由，某种在在坏情况下做出的选择。</p><p>​作为一个警醒他人的概念，是可以使用的。但要作为一个具体事物，洗脑术是不存在的，人不会变成机器人，人的大脑思想一旦被毁坏就无法改变，这种毁坏是不可逆的，也无法植入新思想，这个人只能死亡。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/1979/11/30/%E5%BF%83%E7%90%86%E5%AD%A6-Thinking-Fast-and-Slow-BY-%E4%B8%B9%E5%B0%BC%E5%B0%94%C2%B7%E5%8D%A1%E5%B0%BC%E6%9B%BC/"/>
    <url>/1979/11/30/%E5%BF%83%E7%90%86%E5%AD%A6-Thinking-Fast-and-Slow-BY-%E4%B8%B9%E5%B0%BC%E5%B0%94%C2%B7%E5%8D%A1%E5%B0%BC%E6%9B%BC/</url>
    
    <content type="html"><![CDATA[<hr><p>title:认知心理学-Thinking, Fast and Slow BY 丹尼尔·卡尼曼<br>date:2022-07-15 15:50:29<br>tags:认知心理学</p><hr><blockquote><p>“丹尼尔·卡尼曼是人类历史上最具影响力的心理学家之一，当然也是至今仍健在的最重要、最优秀的心理学家。他有着独特的天赋，可以揭示人类思想的许多显著特征，其中很多特征已经成为教材中的经典内容，成了我们传统观念的一部分。他的工作打开了社会心理学、认知科学、对理性和幸福的研究以及行为经济学研究的新局面，其中行为经济学这一领域是丹尼尔与他的合作者阿莫斯·特沃斯基共同开辟的。本书的面世是一件大事。”</p></blockquote><h1 id="系统1，系统2"><a href="#系统1，系统2" class="headerlink" title="系统1，系统2"></a>系统1，系统2</h1><h2 id="一张愤怒的脸和一张乘法题"><a href="#一张愤怒的脸和一张乘法题" class="headerlink" title="一张愤怒的脸和一张乘法题"></a>一张愤怒的脸和一张乘法题</h2><h3 id="行为与注意力"><a href="#行为与注意力" class="headerlink" title="行为与注意力"></a>行为与注意力</h3><p>系统1是无意识且快速的，不需要费脑力和感觉，完全处于自主控制状态；系统2要将注意力转移到大脑活动上，例如复杂的运算。系统1是自主而初始的印象和感觉，系统2按部就班的构建想法，而且在系统2下系统1会被抑制。‘’大猩猩实验‘’阐述了2个事实，我们会忽视显而易见的事，也会忽视自己屏蔽了这些事的事实。</p><h3 id="系统一遇到麻烦，系统2会出面解决"><a href="#系统一遇到麻烦，系统2会出面解决" class="headerlink" title="系统一遇到麻烦，系统2会出面解决"></a>系统一遇到麻烦，系统2会出面解决</h3><p>系统一自主运行，系统2通常处于不费力的放松状态只有部分参与。系统一为系统二提供印象、直觉、意向和感觉等信息，如果系统二接受这些信息，则会将印象、直觉转变为信念，将冲动转化为自主行为。一般情况下，系统二毫无保留的接受系统一的建议。</p><p>当系统一运行遇到阻碍，系统二便会出马，例如11*15这样的题目，这样的激活包括令人吃惊的事情、违反系统一世界观的事情、惊讶的刺激物、犯错。这样分工代价最小、效果最好，因为这样人做出的反应是快速且基本恰当的，但因为系统一存在成见，在特定情况下，系统一容易犯系统心错误。</p><p>系统一有局限，无法被关闭。</p><h3 id="冲突与自我控制"><a href="#冲突与自我控制" class="headerlink" title="冲突与自我控制"></a>冲突与自我控制</h3><p>生活中这样的冲突极为普遍，自主反应和控制这种反应的意图之间存在冲突，系统二的众多任务中就包括抑制系统一产生的这些冲动。</p><h3 id="看上去不等长时间上等长的两条线"><a href="#看上去不等长时间上等长的两条线" class="headerlink" title="看上去不等长时间上等长的两条线"></a>看上去不等长时间上等长的两条线</h3><p>缪勒-莱耶错觉图，看上去完全不等的两条线竟然等长。这就是认知错觉，这种认知错觉不能完全避免，因为这是系统一在运行，我无法关闭他，且系统二对系统一这种错误一无所知，要是我一直保持警觉那在日常抉择中总是耗时很长且非常低效。</p><p>这种情况最好的解决办法就是妥协：学会区别常会出现重大错误的情况，风险很高的时候，尽力避免这些错误。</p><h3 id="两个虚拟出来的角色"><a href="#两个虚拟出来的角色" class="headerlink" title="两个虚拟出来的角色"></a>两个虚拟出来的角色</h3><p>系统一和系统二并不是真实存在的，是虚拟出来的角色。任何事物占用了大脑的工作记忆，都会削弱我的思考能力。</p><h2 id="电影的主角与配角"><a href="#电影的主角与配角" class="headerlink" title="电影的主角与配角"></a>电影的主角与配角</h2><p>如果本书被拍成电影，主角会是系统一，系统二自身很懒惰，除了必须的努力外，他不愿意多付出一点点。然而，一些至关重要的任务只有系统二才能执行，因为这些任务需要付出努力和控制自我，才能抑制系统一产生的直觉和冲动。</p><h3 id="瞳孔是人类思维活动的灵敏指示器"><a href="#瞳孔是人类思维活动的灵敏指示器" class="headerlink" title="瞳孔是人类思维活动的灵敏指示器"></a>瞳孔是人类思维活动的灵敏指示器</h3><p>通过心算两位数的乘法题和加3任务接近人们做到的极限，观察可发现，人在极度认真高度负荷下瞳孔会不自主放大，眼睛是心灵的窗户，观察人类瞳孔可以很明确感知他大脑的功率。</p><h3 id="为什么我们看不见那只‘’大猩猩‘’"><a href="#为什么我们看不见那只‘’大猩猩‘’" class="headerlink" title="为什么我们看不见那只‘’大猩猩‘’"></a>为什么我们看不见那只‘’大猩猩‘’</h3><p>系统二执行多任务会通过执行控制进行，多任务进行时需要快速转换，快速转化需要付出很大努力。时间制约时人们需要付出努力的另一个因素，慢思考最耗费脑力的思考形式就是那些催你思考的形式。</p><h2 id="惰性思维与延迟满足的矛盾"><a href="#惰性思维与延迟满足的矛盾" class="headerlink" title="惰性思维与延迟满足的矛盾"></a>惰性思维与延迟满足的矛盾</h2><p>一般情况下，大多数人保持连贯的思维或时不时积极思考都需要自我控制能力，比如一边散步一边思考问题，走的很快就无法思考，走到自己熟悉慢速情况才可以。而在研究中发现，某些人对某件事过度集中，会进入心流阶段，忘却时间和大脑疲惫，非常舒服。所以要将所有资源集中在手头上的任务更好。</p><h3 id="又累又饿的保释官更可能否定保释申请"><a href="#又累又饿的保释官更可能否定保释申请" class="headerlink" title="又累又饿的保释官更可能否定保释申请"></a>又累又饿的保释官更可能否定保释申请</h3><p>自我控制和认知努力是大脑工作的形式。比如背诵一段课文就是认知努力，背诵期间忍住不去玩游戏就是自我控制，这都是系统二决定的。大脑能量不是一个比喻的概念而是真实的，以色列的保释官就说明了这个例子，每次用餐过后65%申请者可以通过，后面稳步下降直到用餐前将为0。神经系统消耗的葡萄糖比身体其他部位消耗都要多，而且需要付出脑力活动的成本显然比葡萄糖高，在进行复杂的认知推理或自我控制任务时，人的血糖就会下降。</p><h3 id="脱口而出的错误答案"><a href="#脱口而出的错误答案" class="headerlink" title="脱口而出的错误答案"></a>脱口而出的错误答案</h3><blockquote><p>“现在我来为大家作一个逻辑论证—两个前提和一个结论。请你尽量快速地判定这个论证是否符合逻辑。想想结论是否与前提有关联？所有的玫瑰都是花。有些花会很快凋谢。因此，有些玫瑰也会很快凋谢。大部分大学生觉得这个推论是合理的。但事实上，这个论证是有问题的，因为玫瑰可能不会很快凋谢。”</p></blockquote><p>很多简单问题，很多人脱口而出错误答案，其根源就是系统一反应，而不去思考使用系统二。因为系统二是慢思考需要时间和精力，所以人们倾向于直接系统一的反应。我要做个避免思维上的懒惰的勤快人，更机警、思维更活跃、不会满足于貌似正确的答案，对自己的直觉常持怀疑态度，这些人更理性。</p><h3 id="今天得到一千美元，一年后得到一万美元，你选哪个？"><a href="#今天得到一千美元，一年后得到一万美元，你选哪个？" class="headerlink" title="今天得到一千美元，一年后得到一万美元，你选哪个？"></a>今天得到一千美元，一年后得到一万美元，你选哪个？</h3><p>这是一个自我控制的问题，要想当下直接享受还是一年后翻10倍。大多数直觉型人会选择今天一千美元，这些人使用系统一是冲动的、凭直觉的；而系统二具备推理能力很谨慎但是懒惰的。</p><p>斯坦诺维奇对系统二做了区分，算法负责的是慢思考和要求很高的计算活动，显示出的智商很高；理性负责消除成见，惰性思考是一个反思缺陷，是一个理性错误。智力和理性来源于系统二。</p><h2 id="联想的神奇力量"><a href="#联想的神奇力量" class="headerlink" title="联想的神奇力量"></a>联想的神奇力量</h2><p>香蕉、呕吐，看到这两个词出现大脑忍不住开始联想，各种香蕉和呕吐结合的场面，人面部表情、心理、情感、行为所有这些都开始有了不自主的反应。这种自我强化模式变换多样又可以形成一个整体，被称为联想的连贯性。</p><p>思维活动唤起一个看法会引发很多看法，而这些看法让我们想到更多，人觉得某几个被激发出的看法是有意识的思维活动，其实多数联想思维都是隐藏在意识之后的，也就是说我们对自我大脑的运转认识有限。你觉得自己很了解自己，但其实你错了。</p><h3 id="启动效应：让人不知不觉微笑的铅笔"><a href="#启动效应：让人不知不觉微笑的铅笔" class="headerlink" title="启动效应：让人不知不觉微笑的铅笔"></a>启动效应：让人不知不觉微笑的铅笔</h3><p>启动效应，人在听到某个词或者做某个行为时候，会引发大脑和身体相互作用，比如听到老人有人会走的慢有人走的快，面部摆出微笑表情会让心情开朗。启动效应会影响人的身体行为，人的行为又回作用到心理。不管你怎么想的，都得心平气和。</p><h3 id="你会自觉投到盒子里多少钱"><a href="#你会自觉投到盒子里多少钱" class="headerlink" title="你会自觉投到盒子里多少钱"></a>你会自觉投到盒子里多少钱</h3><p>启动效应是存在系统1的，可以看为潜意识行为，通过词汇、图案各种暗示可以诱发启动效应，但人在理性思考时，使用系统2可以有效避免启动效应。</p><p>我们是自己的陌生人，系统1带给自我的各种印象经常会变成自我信念，是自我做出选择和展开行动的动力源泉，包含了对这个世界的认知模式，可以快速做出直觉型判断的依据，大脑判断活动几乎是这个系统1指导下毫无意识的完成的。</p><p>但不幸的是，系统1是直觉中很多系统性错误的根源。</p><h2 id="你的直觉有可能只是错觉"><a href="#你的直觉有可能只是错觉" class="headerlink" title="你的直觉有可能只是错觉"></a>你的直觉有可能只是错觉</h2><p>认知放松度介于放松和紧张之间，放松时心情很好感到舒服导致想法随意、肤浅，紧张就会变的警惕、多疑且创造力下降。</p><h3 id="由记忆造成的错觉"><a href="#由记忆造成的错觉" class="headerlink" title="由记忆造成的错觉"></a>由记忆造成的错觉</h3><p>熟悉感有着简单而又强烈的不可复返性，之间接触的新单词后面出现会更好辨认，书中看到的某个人名现实中也有可能出现而让自己产生认识这个人的错觉，这种认知放松和认知紧张的转换，也是熟悉感造成错觉的原因。</p><h3 id="什么样的信息更容易让人信服"><a href="#什么样的信息更容易让人信服" class="headerlink" title="什么样的信息更容易让人信服"></a>什么样的信息更容易让人信服</h3><p>任何使联想机制运行更轻松、更顺利的事物都会使我们心生偏见，想让人相信缪误有个可靠的办法，那就是不断重复(可以看看中国人是被怎样洗脑的，所谓谎言重复一万次就是真理)，在记忆不确定时候，大多数人会跟着认知放松的感觉走。</p><p>系统2是非常懒惰的，基本会接受系统1的建议。所以大多数人会收到认知放松时得到的信息，大脑也会继续运作。</p><h3 id="股票代码上口，回报率也相对较高"><a href="#股票代码上口，回报率也相对较高" class="headerlink" title="股票代码上口，回报率也相对较高"></a>股票代码上口，回报率也相对较高</h3><p>这就是曝光效应，任何事物当我们见的多的时候，也就是事物曝光多时，我们就慢慢感到安全并且更容易取信赖他。重复曝光的结果有益于机体所处的环境，这一效应能让我们鉴别安全的物品，是最为原始的社会性依附的基础。</p><p>重复曝光构成了社会组织和社会整合的基础，而社会组织和社会整合又是心理稳定与社会稳定的基础。</p><h3 id="创新是发生在能让人联想无限的环境中的"><a href="#创新是发生在能让人联想无限的环境中的" class="headerlink" title="创新是发生在能让人联想无限的环境中的"></a>创新是发生在能让人联想无限的环境中的</h3><p>好心情、认知放松和对连贯性直觉是相互关联的。创新是发生在系统1中的，在我们好心情认知放松时，系统1开始运作，无限联想、天马行空各种思绪无限涌进大脑，创新这时就会发生。</p><h2 id="意料之外和情理之中"><a href="#意料之外和情理之中" class="headerlink" title="意料之外和情理之中"></a>意料之外和情理之中</h2><h3 id="从第一次的惊喜到第二次的习以为常"><a href="#从第一次的惊喜到第二次的习以为常" class="headerlink" title="从第一次的惊喜到第二次的习以为常"></a>从第一次的惊喜到第二次的习以为常</h3><p>系统1主要功能是维护并更新你个人世界模式，它呈现的都是常态下的思维模式，这个模式由联想和结果共同构成，联想由情景、时间、行为等概念引发，而结果伴随着某种规律出现。第一次的惊喜到第二次的习以为常，这就是常态理论，当我们见到第一次发生的事情时，这种记忆存储脑海中并引发了情绪强烈波动，而第二次只是联想就能得到这事情发生过，是某种常态。当然就会习以为常。</p><p>系统1常态思维模式下，对桌子、大象、老鼠等对象都有一个大致的印象，印象包括对象大小、特点、属性等等。</p><h3 id="简的钱包是怎么丢的呢"><a href="#简的钱包是怎么丢的呢" class="headerlink" title="简的钱包是怎么丢的呢"></a>简的钱包是怎么丢的呢</h3><p>因果关系心理学，这时系统1自然产生的联想。这种天生的、人生来拥有的东西，因果性直觉。这种心理行为是系统1的，注意他不是理性的科学论证的，只是人生来就有的。</p><h2 id="字母B和数字13"><a href="#字母B和数字13" class="headerlink" title="字母B和数字13"></a>字母B和数字13</h2><h3 id="是什么让你相信了那些荒谬之词"><a href="#是什么让你相信了那些荒谬之词" class="headerlink" title="是什么让你相信了那些荒谬之词"></a>是什么让你相信了那些荒谬之词</h3><p>吉尔伯特提出，在理解一个陈述之前，一定会试图相信它：如果这个陈述正确的话，你必须先了解它的观点究竟什么意思，只有这样。你才能决定是否怀疑它。</p><p>最初产生相信某种观点的想法，是因为系统1的自主运作。这种运作包括构建这一情况下可能性最大的解释。系统2工作就是不信任\质疑，系统2是懒惰的平常不发挥作用的。</p><h3 id="光环效用和群体智慧"><a href="#光环效用和群体智慧" class="headerlink" title="光环效用和群体智慧"></a>光环效用和群体智慧</h3><p>喜欢一个人就会喜欢他的全部，而且会在不了解的情况下幻想他具有某些和自己共同的性格品质，这就是光环作用。避免光环效用要遵循一个普遍原则—消除错误的关联。</p><p>一个装有硬币的罐子，找一群人来测试，有些人猜的多有些人反之。但平均下来就会接近真实数值，这就是群体智慧。所以把群体中的每个人当成某件事中的不同信息，让他们不相关联，这就会明显减少光环作用。</p><h3 id="眼见为实的想法往往让我们仓促做出决定"><a href="#眼见为实的想法往往让我们仓促做出决定" class="headerlink" title="眼见为实的想法往往让我们仓促做出决定"></a>眼见为实的想法往往让我们仓促做出决定</h3><p>眼见为实有助于达成连贯性和认知放松的状态，从而使我们相信某个陈述是真实的。这一理念解释了我们能够快速思考的原因，因为系统一联想机制和系统二懒惰相结合，往往让我们相信并快速最初反应。</p><p>过于自信：即使没有了解事情的全部，靠着一些信息进行联想能推测出事情大概。联想系统选择已被激活的连贯模式，抑制怀疑和歧义。</p><p>框架效应：手术后存活率是90%和手术后死亡率是10%，对人含义是不同的。表达方式不同，人们通常读出不同含义，且觉得自己所见就是事实。</p><p>比率忽略：忽视大数据分析，只相信自己所见即为事实。</p><h2 id="我们究竟是如何做出判断的？"><a href="#我们究竟是如何做出判断的？" class="headerlink" title="我们究竟是如何做出判断的？"></a>我们究竟是如何做出判断的？</h2><p>系统一没有特定意图，无需付出多少努力，对当前情形作出全方位评估。</p><p>系统二接受问题或提出问题，引导注意力或搜寻记忆，或使用算法。但系统一具有基本的评估这一理念，在回答某个特定问题时，系统二作出反应，这也需要系统一具有的基本评估。</p><h3 id="看照片预测竞选胜出者，为何准确率高达70"><a href="#看照片预测竞选胜出者，为何准确率高达70" class="headerlink" title="看照片预测竞选胜出者，为何准确率高达70%"></a>看照片预测竞选胜出者，为何准确率高达70%</h3><p>基本判断是人生来就有的，看一个陌生人的脸，他有多强势（存在潜在的威胁性），这个人有多可信（不管它的用意是友好地还是敌意的）。很多接受信息少不喜欢政治的人在投票时，就会随着基本判断感觉走，也就是系统一运行不使用系统二。所以看照片可预测竞选胜出者。</p><h3 id="平均长度和总长度是完全不同的数量概念"><a href="#平均长度和总长度是完全不同的数量概念" class="headerlink" title="平均长度和总长度是完全不同的数量概念"></a>平均长度和总长度是完全不同的数量概念</h3><p>一组线人门轻易可以记住长度颜色等属性，这是我们系统1决定的。一组线的总长度就要通过计算测量等，这是系统2决定的。在生活中，我们要区分单个物体和总体的区别。</p><h3 id="与强度等级匹配的描述"><a href="#与强度等级匹配的描述" class="headerlink" title="与强度等级匹配的描述"></a>与强度等级匹配的描述</h3><p>人生来就有的强度等级判断，杀人罪行是深红色，偷窃就是浅红色，这种强度等级是系统一具有的。如果一个孩子4岁就能阅读很多书籍，很多人认为他未来一定考上好大学，这就是强度等级匹配。要注意这种利用匹配进行预测的模式从统计学角度是错误的。</p><h3 id="思维的发散性让我们做出直觉性判断"><a href="#思维的发散性让我们做出直觉性判断" class="headerlink" title="思维的发散性让我们做出直觉性判断"></a>思维的发散性让我们做出直觉性判断</h3><p>系统一对周围环境作出评估，这种评估是一直进行的。某些有意识的判断出现在我们做出的选择中，而在选择中会受到思维的发散性影响。例如听写一个句子，某些词语会引起联想导致效率下降。思维的发散性和强度匹配就会让我们做出直觉性判断。</p><h2 id="目标问题与启发性问题形影不离"><a href="#目标问题与启发性问题形影不离" class="headerlink" title="目标问题与启发性问题形影不离"></a>目标问题与启发性问题形影不离</h2><p>思维活动中，人很难被问题难倒。比如喜不喜欢一个人、对某件事的判断、对商品值不值的看法，除了像123*1234这种问题，我们很难被问题难倒，这种回答的依据我们自己都不清楚。</p><h3 id="找个相对简单的问题来作答"><a href="#找个相对简单的问题来作答" class="headerlink" title="找个相对简单的问题来作答"></a>找个相对简单的问题来作答</h3><p>当目标问题很难时，大脑就会出现一个启发性问题也就是简单问题来作答。这正是思维的发散性让懒惰的系统2找到简单问题，而强度匹配让我们轻松的从目标问题匹配到相似的简单问题，这就是出现困难时大脑会做出直觉性答案的原因。</p><h3 id="立体启发法：远处的物体看上去更高大"><a href="#立体启发法：远处的物体看上去更高大" class="headerlink" title="立体启发法：远处的物体看上去更高大"></a>立体启发法：远处的物体看上去更高大</h3><p>一副立体感的图片，即使图中身高一样，人们第一时间判断都是远处的人比近处的人更高大。当问题是预估图中人身高时，远处人比近处预估更高，这就是替代判断影响人思维。所以生活中人评估幸福感、满足感等等情感时，注意替代判断不要影响到自己。</p><h3 id="情感启发：因为喜欢，所以认同"><a href="#情感启发：因为喜欢，所以认同" class="headerlink" title="情感启发：因为喜欢，所以认同"></a>情感启发：因为喜欢，所以认同</h3><p>系统一生成印象、感觉和倾向，当系统二支持这些行为时，他们就会变成信仰、态度和意图。情感对于事物认同有很大影响。正如之前说的系统二很懒惰，所以他不会主动抑制，而是默认和支持。</p><h1 id="启发法和偏见"><a href="#启发法和偏见" class="headerlink" title="启发法和偏见"></a>启发法和偏见</h1><h2 id="大数法则和小数定律"><a href="#大数法则和小数定律" class="headerlink" title="大数法则和小数定律"></a>大数法则和小数定律</h2><p>抽样调查中，大样本比小样本更加精确，小样本发生极端情况比大样本更大。所以在某些不正常情况下，要知道大脑中因果关系理念是一直运行中的，要去考虑大样本，而不是根据因果关系草率的判断。</p><h3 id="小样本出错风险可能高达50"><a href="#小样本出错风险可能高达50" class="headerlink" title="小样本出错风险可能高达50%"></a>小样本出错风险可能高达50%</h3><p>小样本中出现某些罕见的结论，很难去解释，这时候就需要看看自己样本选择是否正确。统计直觉中，应该使用计算方法来确定样品规模，而不是靠直觉印象做出决定。</p><h3 id="信任多于质疑的普遍性偏见"><a href="#信任多于质疑的普遍性偏见" class="headerlink" title="信任多于质疑的普遍性偏见"></a>信任多于质疑的普遍性偏见</h3><p>系统一不善于质疑，抑制不明确信息，并让处理信息尽可能连贯，除非该信息被立刻否定，不然它引发的联想就会扩散，彷佛这个信息是千真万确的。系统二能够提出质疑，但保持这种质疑会比不自觉相信它更加困难。</p><p>相信小数定律，就会建构成一个言之成理的说法让我们相信自己的直觉判断，完全错误的直觉判断。</p><h3 id="对随机事件做出因果解释必然是错的"><a href="#对随机事件做出因果解释必然是错的" class="headerlink" title="对随机事件做出因果解释必然是错的"></a>对随机事件做出因果解释必然是错的</h3><p>人们总是依靠因果理念去寻找生活中发生的一系列事情，但我们要知道，对随机事件做出因果解释必然是错误的。对许多巧合发生的事情去思考只是徒劳而已。因果理念只是我们从先辈继承下来的一般警觉性的一部分。</p><h2 id="锚定效应在生活中随处可见"><a href="#锚定效应在生活中随处可见" class="headerlink" title="锚定效应在生活中随处可见"></a>锚定效应在生活中随处可见</h2><p>人们的判断明显受到没有任何信息价值的数字的影响，这就是锚定效应，有两个机制共同作用。1是系统二的可以调整，2是系统一的启发效应。</p><h3 id="对锚定值的调整常常是不足的"><a href="#对锚定值的调整常常是不足的" class="headerlink" title="对锚定值的调整常常是不足的"></a>对锚定值的调整常常是不足的</h3><p>大脑系统二对于锚定值的调整常常是不足的，一些是记忆存在一些数字，一些或是累了等等，这种调整不足就是系统二的懒惰造成的。</p><h3 id="暗示就是一种锚定效应"><a href="#暗示就是一种锚定效应" class="headerlink" title="暗示就是一种锚定效应"></a>暗示就是一种锚定效应</h3><p>暗示就是一种启动效应，他会选择的找出相应的证据。很多情况下，我们都需要一个类似暗示的过程发挥作用：系统一建立一个将锚定数字视为真实数值的世界，这就是联想一致性的一种表现。</p><h3 id="做出这幢房子的主人，你能接受的最低售价是多少？"><a href="#做出这幢房子的主人，你能接受的最低售价是多少？" class="headerlink" title="做出这幢房子的主人，你能接受的最低售价是多少？"></a>做出这幢房子的主人，你能接受的最低售价是多少？</h3><p>锚定值对人们判断的影响巨大，人们不自觉的受到锚定值影响而给出和锚定值相近的答案，但锚定值是随机的，所以造成的结果也是巨大不确定的。</p><h3 id="锚定效应何时适用，何时不适用？"><a href="#锚定效应何时适用，何时不适用？" class="headerlink" title="锚定效应何时适用，何时不适用？"></a>锚定效应何时适用，何时不适用？</h3><p>锚定效应存在于系统一的启发效应，所以生活中随时可见。即时我们使用系统二去思考，在搜寻加工记忆时也会受到锚定效应影响，所以我们必须知道生活中锚定效用一直威胁着自己，要用系统二去抑制它。</p><h2 id="科学的利用可得性启发法"><a href="#科学的利用可得性启发法" class="headerlink" title="科学的利用可得性启发法"></a>科学的利用可得性启发法</h2><p>当我们思考某件事发生的概率时，就会先从记忆中搜寻，轻松搜到就说明这件事发生概率很大。可得性启发法可定义为通过‘’实例呈现在脑中的轻松程度‘’来判断概率的过程。</p><h3 id="意识到自己的偏见有利于团队关系融洽"><a href="#意识到自己的偏见有利于团队关系融洽" class="headerlink" title="意识到自己的偏见有利于团队关系融洽"></a>意识到自己的偏见有利于团队关系融洽</h3><p>可得性启发法使用的还是替代理念，当我们遇到一个困难问题时候，就会不自觉替代成一个已知的简单问题，那么偏见也就来了。人们对于控制偏见的能力很弱，但有时候看到团队其他人辛苦工作也就接受自己的辛苦，会让团队关系融洽。</p><h3 id="可得性偏见会影响我们对自己和其他人的看法"><a href="#可得性偏见会影响我们对自己和其他人的看法" class="headerlink" title="可得性偏见会影响我们对自己和其他人的看法"></a>可得性偏见会影响我们对自己和其他人的看法</h3><p>当人们遇到困难时，就会使用替代原则搜寻记忆，事件在脑海中呈现的轻松程度体现出系统1的启发作用，而当系统二越来越多参与其中时，人们就不会关注提取记忆的轻松度，而是内容了。所以要警惕系统1可得性偏见的影响。</p><h2 id="焦虑情绪与风险政策的设计"><a href="#焦虑情绪与风险政策的设计" class="headerlink" title="焦虑情绪与风险政策的设计"></a>焦虑情绪与风险政策的设计</h2><h3 id="被闪电击中与食物中毒，哪种意外致死率更高？"><a href="#被闪电击中与食物中毒，哪种意外致死率更高？" class="headerlink" title="被闪电击中与食物中毒，哪种意外致死率更高？"></a>被闪电击中与食物中毒，哪种意外致死率更高？</h3><p>在人们做决定时候，情绪启发法是重要因素：我喜欢它吗？我对它感觉有多强烈？人们形成的观点和做出的选择直接表达出情感和取舍的基本倾向，这些行为是毫无意识做出的。情绪启发是替代的一种，将简单问题替换为较难问题的答案。人们对结果的情感反应、身体状态，以及取舍抉择在决策制定中发挥了重要作用。</p><h3 id="如何避免小概率风险事件演变为公共危机"><a href="#如何避免小概率风险事件演变为公共危机" class="headerlink" title="如何避免小概率风险事件演变为公共危机"></a>如何避免小概率风险事件演变为公共危机</h3>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
